{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to WeeWX","text":"<p>The WeeWX weather system is written in Python and runs on Linux, MacOSX, Solaris, and *BSD. It collects data from many types of weather stations and sensors, then generates plots, HTML pages, and monthly and yearly summary reports. It can push plots, pages, and reports to a web server, and data to many online weather services.</p> <p>Initial development began in the winter of 2008-2009, with the first release in 2009. WeeWX is about 25,000 lines of code, plus another 15,000 for the hardware drivers.</p> <p>The source code is hosted on GitHub. Installation instructions and releases are available at weewx.com/downloads.</p> <p>See the hardware list for a complete list of supported stations, and for pictures to help identify your hardware!  The hardware comparison shows specifications for many types of hardware, including some not yet supported by WeeWX.</p> <p>The WeeWX distribution includes drivers for many types of hardware. These are listed in the driver list in the Hardware Guide. See the WeeWX Wiki for additional drivers and other extensions.</p>"},{"location":"#installation","title":"Installation","text":"<p>See the section Installing WeeWX in the User's Guide.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>WeeWX includes extensive documentation, and the WeeWX developers work hard to keep it relevant and up to date. If you have questions, please consult the documentation first.</p> <ul> <li>User's Guide - installation, getting started, where   to find things, backup/restore, troubleshooting</li> <li>Customization Guide - instructions for customizing   reports and plots, localization, formatting, writing extensions</li> <li>Utilities Guide - tools to manage stations, reports, and   data</li> <li>Hardware Guide - how to configure hardware, features of   supported hardware</li> <li>Upgrade Guide - detailed changes in each release</li> <li>Reference - application options, skin   options, definition of units and unit systems</li> <li>Notes for developers - things you should know if you write drivers   or skins</li> </ul>"},{"location":"#support","title":"Support","text":"<p>Please first try to solve any problems yourself by reading the documentation. If that fails, check the answers to frequently-asked questions, browse the latest guides and software in the WeeWX Wiki, or post a question to the WeeWX user group.</p>"},{"location":"#faq","title":"FAQ","text":"<p>The Frequently Asked Questions (FAQ) is contributed by WeeWX users. It contains pointers to more information for problems and questions most frequently asked in the WeeWX forums.</p> <p>https://github.com/weewx/weewx/wiki/WeeWX-Frequently-Asked-Questions</p>"},{"location":"#wiki","title":"Wiki","text":"<p>The wiki content is contributed by WeeWX users. It contains suggestions and experiences with different types of hardware, skins, extensions to WeeWX, and other useful tips and tricks.</p> <p>https://github.com/weewx/weewx/wiki</p>"},{"location":"#forums","title":"Forums","text":"<p>weewx-user is for general issues such as installation, sharing skins and templates, reporting unexpected behavior, and suggestions for improvement.</p> <p>weewx-development is for discussions about developing drivers, extensions, or working on the core code.</p>"},{"location":"#licensing-and-copyright","title":"Licensing and Copyright","text":"<p>WeeWX is licensed under the GNU Public License v3.</p> <p>\u00a9 Copyright 2009-2023 Thomas Keffer, Matthew Wall, and Gary Roderick</p>"},{"location":"changes/","title":"Change log","text":""},{"location":"changes/#weewx-change-history","title":"WeeWX change history","text":""},{"location":"changes/#500-mmddyyyy","title":"5.0.0 MM/DD/YYYY","text":"<p>Python 2.7 is no longer supported. You must have Python 3.7 (introduced May 2018) or greater.</p> <p>WeeWX can now be installed using pip.</p> <p>With pip installs, station data is stored in <code>~/weewx-data</code> by default,  instead of <code>/home/weewx</code>. This allows pip installs to be done without root privileges. However, <code>/home/weewx</code> can still be used.</p> <p>The new utility <code>weectl</code> replaces <code>wee_database</code>, <code>wee_debug</code>, <code>wee_device</code>, <code>wee_extension</code>, and <code>wee_config</code>. Try <code>weectl --help</code> to see how to use it.</p> <p>Documentation now uses MkDocs.</p> <p>Package installs now use <code>systemd</code> instead of the old System V <code>/etc/init.d</code>.</p> <p>Removed all references to the deprecated package <code>distutils</code>, which is due to be removed in Python v3.12.</p> <p>Removed the utility <code>wunderfixer</code>. The Weather Underground seems to no longer allow posting past-dated records.</p> <p>Logging handler <code>rotate</code> has been removed. Its need to access the privileged location <code>/var/log/</code> on start up would cause crashes, even if it was never used. Users can opt to add it back in by following the wiki on  Logging.</p> <p>MacOS now logs to <code>syslog</code> like any other system, rather than <code>rotate</code>.</p> <p>Method <code>ImageDraw.textsize()</code> and constants <code>ImageFont.LAYOUT_BASIC</code>, and <code>Image.ANTIALIAS</code> were deprecated in Pillow 9.2 (1-Jul-2022), then removed in Pillow 10.0 (1-Jul-2023). V5.0 replaces them with alternatives. Fixes issue #884.</p> <p>Fix bug when using Pillow v9.5.0. Fixes issue  #862.</p> <p>The Standard skin now uses the font <code>DejaVuSansMono-Bold</code> and includes a copy. Before, it had to rely on hardwired font paths, which were less reliable.</p> <p>If the uploaders get a response code of 429 (\"TOO MANY REQUESTS\"), they no longer bother trying again.</p> <p>Limit station registration to once a day, max.</p> <p>Station registration now uses HTTP POST, instead of HTTP GET.</p> <p>Station registration is delayed by a random length of time to avoid everyone hitting the server at the same time.</p> <p>Fix problem where aggregation of null wind directions returns 90\u00b0 instead of null. Fixes issue #849.</p> <p>Fix wrong station type for Vantage <code>weectl device --info</code> query.</p> <p>Add retransmit information for Vantage <code>weectl device --info</code> query.</p> <p>Fix problem when setting Vantage repeater. Fixes issue  #863.</p> <p>Detect \"dash\" values for rain-related measurements on Vantage stations.</p> <p>Change aggregations <code>minsumtime</code> and <code>maxsumtime</code> to return start-of-day,  rather than the time of max rainfall during the day.</p> <p>Relax requirement that column <code>dateTime</code> be the first column in the database. Fixes issue #855.</p> <p>Allow aggregation of xtypes that are not in the database schema. Fixes issue #864.</p> <p>Tag suffix <code>has_data()</code> now works for xtypes. Fixes issue  #877.</p> <p>Additional shorthand notations for aggregation and trend intervals. For example, <code>3h</code> for three hours.</p> <p>Accumulator <code>firstlast</code> no longer coerces values to a string. Thanks to user \"Karen\" for spotting this!</p> <p>Fix problem that caused crashes with <code>firstlast</code> accumulator type. Fixes issue #876.</p> <p>Fixed problem that prevented the astrometric heliocentric longitude of a body from being calculated properly.</p> <p>Default format for azimuth properties (such as wind direction) is now zero padded 3 digits. E.g., <code>005\u00b0</code> instead of <code>5\u00b0</code>. </p> <p>Most almanac properties are now returned as <code>ValueHelpers</code>, so they will obey local formatting conventions (in particular, decimal separators). To avoid breaking old skins, these properties now have new names. For example, use <code>$almanac.venus.altitude</code> instead of <code>$almanac.venus.alt</code>. </p> <p>Fix problem that prevented database from getting hit when calculating  <code>pressure</code>. Fixes issue #875.</p> <p>Fix problem that prevented option <code>stale_age</code> from being honored in image generation. Thanks to user Ian for PR #879!</p> <p>Fix problem that prevented complex aggregates such as <code>max_ge</code> from being used in plots. Fixes issue #881.</p> <p>Updated humidex formula and reference. Fixes issue  #883.</p> <p>Fix bugs in the \"basic\" skin example.</p> <p>Fix bug that prevented calculating <code>$trend</code> when one of the two records is missing.</p> <p>Fix bug that caused the extension installer to crash if one of the service groups was missing in the configuration file. Fixes issue  #886.</p> <p>New option <code>retry_wait</code>. If <code>weewxd</code> encounters a critical error, it will sleep this long before doing a restart.</p> <p>Change from old Google Analytics UA code to the GA4 tag system in the Standard and Seasons skins. Fixes issue #892.</p>"},{"location":"changes/#4102-02222023","title":"4.10.2 02/22/2023","text":"<p>Removed errant \"f-string\" in <code>imagegenerator.py</code>.</p> <p>Added missing <code>.long_form</code> to <code>celestial.inc</code> that would cause total daylight to be given in seconds, instead of long form.</p> <p>Fix problem that a <code>None</code> value in <code>long_form()</code> would raise an exception. PR #843. Thanks to user Karen!</p> <p>The module <code>user.extensions</code> is now imported into <code>wee_reports</code>. Thanks to user jocelynj! PR #842.</p> <p>Fix problem that prevented <code>wee_device --set-retransmit</code> from working on Vantage stations.</p> <p>Using a bad data binding with an aggregation tag no longer results in an exception. Instead, it shows the tag in the results. Related to PR #817.</p>"},{"location":"changes/#4101-01302023","title":"4.10.1 01/30/2023","text":"<p>Logging handler <code>rotate</code> has been removed. Its need to access privileged location <code>/var/log/weewx.log</code> on start up would cause crashes, even if it was never used.</p>"},{"location":"changes/#4100-01292023","title":"4.10.0 01/29/2023","text":"<p>Don't inject <code>txBatteryStatus</code> and <code>consBatteryVoltage</code> into records in the  Vantage driver. Let the accumulators do it. Fixes issue #802.</p> <p>Different wake-up strategy for the Vantage console.</p> <p>Do not write <code>config_path</code> and <code>entry_path</code> to updated configuration dictionary. Fixes issue #806.</p> <p>Allow more flexible formatting for delta times. This can break old skins. See Upgrade Guide. PR #807.</p> <p>Fix bug that prevents <code>group_deltatime</code> from being used by timespans. Users who used custom formatting for delta times will be affected. See the Upgrade Guide. Fixes issue #808.</p> <p>Add suffix <code>.length</code> to class TimespanBinder. This allows expressions such as $month.length. PR #809. Thanks to user Karen!</p> <p>Added new unit <code>hertz</code>. PR #812. Again, thanks to user Karen!</p> <p>Calculate <code>*.wind.maxtime</code> out of <code>windGust</code> like <code>*.wind.max</code> Fixes issue #833</p> <p>Fix bug that prevents <code>group_deltatime</code> from being used by timespans. Users Add suffix <code>.length</code> to class TimespanBinder. This allows expressions such as</p> <p>Option <code>line_gap_fraction</code> can now be used with bar plots. Fixes issue #818.</p>"},{"location":"changes/#491-10252022","title":"4.9.1 10/25/2022","text":"<p>Fix problem with <code>wind</code> for older versions of sqlite.</p>"},{"location":"changes/#490-10242022","title":"4.9.0 10/24/2022","text":"<p>Fix problem that create 'ghost' values for VantageVue stations. Fix problem that causes <code>leafWet3</code> and <code>leafWet4</code> to be emitted in VP2 stations that do not have the necessary sensors. Fixes issue #771.</p> <p>Try waking the Vantage console before giving up on LOOP errors. Better Vantage diagnostics. Fixes issue #772.</p> <p>Add missing 30-day barometer graph to Smartphone skin. Fixes issue #774.</p> <p>Fix check for <code>reuse_ssl</code> for Python versions greater than 3.10. Fixes issue #775.</p> <p>The utility <code>wee_reports</code> can now be invoked by specifying a <code>--date</code>  and <code>--time</code>. Fixes issue #776.</p> <p>Allow timestamps that are not integers. Fixes issue #779.</p> <p>Add localization file for Traditional Chinese. Thanks to user lyuxingliu! PR #777.</p> <p>Don't swallow syntax errors when <code>wee_config</code> is looking for drivers.</p> <p>Include <code>wind</code> in daily summary if <code>windSpeed</code> is present.</p> <p>Refine translations for French skin. Thanks to user Pascal!</p> <p>Allow a custom cipher to be specified for FTP uploads. See option <code>cipher</code> under <code>[[FTP]]</code>.</p> <p>Ensure that <code>rundir</code> exists and has correct permissions in weewx-multi</p> <p>Allow auto-provisioning feature of Seasons to work when using a SQL expression for option <code>data_type</code> in the ImageGenerator. Fixes issue #782.</p> <p>Allow constants <code>albedo</code>, <code>cn</code>, and <code>cd</code> to be specified when calculating ET. See the User's Guide. Resolves issue #730.</p> <p>Fix problem that prevented <code>wee_reports</code> from using a default location for <code>weewx.conf</code>.</p> <p>Post location of the configuration file and the top-level module to the station registry. Thanks to Vince! PR #705.</p> <p>Fix minor install warning under Python 3.10. Fixes issue #799.</p> <p>Fix problem where <code>xtypes.ArchiveTable.get_series()</code> does not pass <code>option_dict</code> on to <code>get_aggregate()</code>. Fixes issue #797</p> <p>Added <code>copytruncate</code> option to default log rotation configuration.  Thanks to user sastorsl.  Addresses PR #791.</p> <p>Update the default and example rules in rsyslog configuration.  The output from the weewx daemon goes to <code>weewxd.log</code> whereas the output from wee_xxx utilities goes to <code>weewx.log</code>.  Also added examples of how to deal with systemd/journald messing with log output.  Addresses PR #788 and PR #790. Thanks to user sastorsl.</p> <p>Allow additional aggregation intervals for observation type <code>$wind</code>. In particular, <code>vecdir</code> and <code>vecavg</code> can be done for aggregation intervals other than multiples of a day. Fixes issue #800.</p>"},{"location":"changes/#480-04212022","title":"4.8.0 04/21/2022","text":"<p>Allow unit to be overridden for a specific plot by using new option <code>unit</code>. Fixes issue #729.</p> <p>Fix problem that prevented wind from appearing in NOAA yearly summaries.</p> <p>Fix honoring global values for <code>log_success</code> and <code>log_failure</code>. Fix issue #757.</p> <p>wee_import CSV imports now allow import of text fields. Addresses issue #732.</p> <p>Explain in the Customization Guide how to include arbitrary SQL expressions in a plot.</p> <p>Reorder font download order, for slightly faster downloads. Fix issue #760.</p> <p>Add observation types <code>highOutTemp</code> and <code>lowOutTemp</code> to group_temperature.</p> <p>Add unit groups for sunshine and rain duration, cloudcover, and pop. PR #765</p> <p>Do not allow HUP signals (reload is not allowed as of V4.6). PR #766.</p> <p>Do not fork if using systemd. PR #767.</p> <p>Fix problem that prevented <code>wee_config --reconfigure</code> from working when using Python 2.7, if the configuration file contained UTF-8 characters.</p>"},{"location":"changes/#470-03012022","title":"4.7.0 03/01/2022","text":"<p>Introduced new option <code>generate_once</code>. If <code>True</code>, templates will be generated only on the first run of the reporting engine. Thanks to user Rich! PR #748.</p> <p>Added option <code>wee_device --current</code> for Vantage.</p> <p>Fixed two typos in the Standard skin.</p> <p>Fixed spelling mistakes in the Norwegian translations.  Thanks to Aslak! PR#746</p> <p>Supply a sensible default context for <code>group_deltatime</code> when no context has been specified.</p> <p>If <code>windGustDir</code> is missing, extract a value from the accumulators.</p> <p>Fixed typo that shows itself if no <code>[Labels]/[[Generic]]</code> section is supplied. Fixes issue #752.</p> <p>Fixed calculation of field <code>bar_reduction</code> for Vantage type 2 LOOP packets.</p> <p>Fix problem that prevents <code>windSpeed</code> and <code>windDir</code> from being displayed in the RSS feed. Fixes issue #755.</p>"},{"location":"changes/#462-02102022","title":"4.6.2 02/10/2022","text":"<p>Removed diagnostic code that was inadverently left in the <code>titlebar.inc</code> file in Seasons skin.</p>"},{"location":"changes/#461-02102022","title":"4.6.1 02/10/2022","text":"<p>Make the <code>show_rss</code> and <code>show_reports</code> flags work properly.  Fixes issue #739.</p> <p>Added <code>$to_list()</code> utility for use in Cheetah templates.</p> <p>Fixed a few more untranslated fields in Seasons skin.</p> <p>Observation types that use the <code>sum</code> extractor are set to <code>None</code> if no LOOP packets contributed to the accumulator. Fixes issue #737.</p> <p>Added <code>ppm</code> as default <code>group_fraction</code>.  Added default label string for <code>ppm</code>.</p> <p>Added Norwegian translations. Thanks to user Aslak! PR #742.</p> <p>Fixed problem that caused <code>wee_database --check-strings</code> / <code>--fix-strings</code> to fail on TEXT fields. Fixes issue #738.</p>"},{"location":"changes/#460-02042022","title":"4.6.0 02/04/2022","text":"<p>Easy localization of all skins that come with WeeWX. Big thanks to user Karen, who drove the effort! PR #665.</p> <p>Allow options <code>--date</code>, <code>--from</code>, and <code>--to</code> to be used with  <code>wee_database --reweight</code>. PR #659. Thanks to user edi-x!</p> <p>Added Cheetah helper functions <code>$jsonize()</code>, <code>$rnd()</code>, and <code>$to_int()</code>.</p> <p>The tag <code>$alltime</code>, formerly available as an example, is now a part of WeeWX core.</p> <p>New SLE example <code>$colorize()</code>. New document on how to write SLEs.</p> <p>Added conversions for <code>unix_epoch_ms</code> and <code>unix_epoch_ns</code>. Calculations in <code>celestial.inc</code> now explicitly use <code>unix_epoch</code>.</p> <p>Added almanac attribute <code>visible</code> and <code>visible_change</code>. For example, <code>$almanac.sun.visible</code> returns the amount of daylight, <code>$almanac.sun.visible_change</code> the difference since yesterday.</p> <p>Fixed problem that could cause weather xtypes services not to shut down properly. PR #672. Thanks again to user edi-x!</p> <p>Added Cheetah tag <code>$filename</code>, the relative path of the generated file. Useful for setting canonical URLs. PR #671. Thanks again to user Karen!</p> <p>XType <code>get_scalar()</code> and <code>get_series()</code> calls can now take extra keyword arguments. PR #673.</p> <p>Fixed problem where a bad clock packet could crash the WMR100 driver.</p> <p>Davis documentation for LOOP2 10-minute wind gusts is wrong. The Vantage actually emits mph, not tenths of mph. Changed driver so it now decodes the field correctly. Fixes issue #686.</p> <p>Sending a HUP signal to <code>weewxd</code> no longer causes the configuration file to be reread.</p> <p>Logging is not done until after the configuration file has been read. This allows customized logging to start from the very beginning. Fixes issue #699.</p> <p>Simplified the logging of Cheetah exceptions to show only what's relevant. Fixes issue #700.</p> <p>Include a <code>requirements.txt</code> file, for installing using pip. Thanks to user Cl\u00e9ment! PR #691.</p> <p>Fixed problem where <code>ConfigObj</code> interpolation would interfere with setting logging formats.</p> <p>Added option <code>--batch-size</code> to the Vantage version of <code>wee_device</code>. See PR #693.</p> <p>Slightly faster evaluation of the tag suffix <code>has_data</code>. New aggregation type <code>not_null</code>.</p> <p>A string in the database no longer raises an error. Fixes issue #695.</p> <p>Added plot option <code>skip_if_empty</code>. If set to <code>True</code>, and there is no non-null data in the plot, then the plot will not be generated at all. If set to a time domain (such as <code>year</code>), then it will do the check over that domain. See PR #702.</p> <p>Parameterized the Seasons skin, making it considerably smaller, while requiring less configuration. It now includes all types found in the wview-extended schema. See PR #702.</p> <p>New FTP option <code>ftp_encoding</code> for oddball FTP servers that send their responses back in something other than UTF-8.</p> <p>Availability of the pyephem module and extended almanac data is now logged during startup.</p> <p>Added column for <code>last contact</code> in the sensor status table in the Season skin to help diagnose missing/flaky sensors.</p> <p>Fix the weewx.debian and weewx-multi init scripts to work with non-root user.</p> <p>Added sample tmpfiles configuration to ensure run directory on modern systems when running weewx as non-root user.</p> <p>Fixed bug that prevented the ssh port from being specified when using rsync. Fixes issue #725.</p> <p>Improved alphanumeric sorting of loop packet/archive record fields displayed when WeeWX is run directly.</p> <p>Added sample weewxd init file for 'service' based init on freebsd.  Thanks to user ryan.</p> <p>Added i18n-report utility to help check skins for translated strings.</p>"},{"location":"changes/#451-04022021","title":"4.5.1 04/02/2021","text":"<p>Reverted the wview schema back to the V3 style.</p> <p>Fixed problem where setup.py would fail if the station description used UTF-8 characters.</p> <p>Fixed problem where unit labels would not render correctly under Python 2.7 if they were set by a 3rd party extension. Fixes issue #662.</p> <p>Added TCP support to the WS1 driver. Thanks to user Mike Juniper! Fixes issue #664.</p>"},{"location":"changes/#450-04022021","title":"4.5.0 04/02/2021","text":"<p>The utility <code>wee_database</code> has new options <code>--add-column</code>, <code>--rename-column</code>, and <code>--drop-columns</code> for adding, renaming, and deleting columns in the database.</p> <p>New optional tag <code>.series()</code>, for creating and formatting series in templates. See the document Tabs for series in the wiki. This is still experimental and subject to change! Addresses issue #341.</p> <p>New optional tag <code>.json()</code> for formatting results as JSON.</p> <p>New optional tag <code>.round()</code>. Useful for rounding results of <code>.raw</code> and <code>.json</code> options.</p> <p>Improved performance when calculating series using aggregation periods that are multiples of a day.</p> <p>Changed NOAA reports to use the <code>normalized_ascii</code> encoding instead of <code>utf8</code> (which did not display correctly for most browsers). Fixes issue #646.</p> <p>Plots longer than 2 years use a 6 month time increment.</p> <p>Uploads to PWSWeather and WOW now use HTTPS. Fixes issue #650.</p> <p>Fixed bug that prevented the Vantage driver from waiting before a wakeup retry. Thanks to user Les Niles!</p> <p>Changed the way of expressing the old \"wview\" schema to the new V4 way. Hopefully, this will lead to fewer support issues. Fixes issue #651.</p> <p>Fixed problem where iterating over a time period without an aggregation would wrongly include the record on the left.</p> <p>Fixed bug that caused the incorrect label to be applied to plots where the aggregation type changes the unit. Fixes issue #654.</p> <p>Plots now locate the x-coordinate in the middle of the aggregation interval for all aggregation types (not just min, max, avg). Revisits PR #232.</p> <p>Added new time units <code>unix_epoch_ms</code> and <code>unix_epoch_ns</code>, which are unix epoch time in milliseconds and nanoseconds, respectively.</p> <p>The FTP uploader now calculates and saves a hash value for each uploaded file. If it does not change, the file is not uploaded, resulting in significant time savings. PR #655. Thanks to user Karen!</p> <p>Updated the version of <code>six.py</code> included with WeeWX to 1.15.0. Fixes issue #657.</p> <p>Option aggregate_interval can now be specified by using one of the \"shortcuts\", that is, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, or <code>year</code>.</p> <p>Options <code>log_success</code> and <code>log_failure</code> are now honored by the <code>StdArchive</code> and <code>StdQC</code> services. Fixes issue #727.</p>"},{"location":"changes/#440-01302021","title":"4.4.0 01/30/2021","text":"<p><code>StdWXCalculate</code> can now do calculations for only LOOP packets, only archive records, or both. PR #630. Thanks to user g-eddy!</p> <p>Introduced aggregate types <code>avg_ge</code> and <code>avg_le</code>. PR #631. Thanks to user edi-x!</p> <p>NOAA reports now use a <code>utf8</code> encoding instead of <code>strict_ascii</code>. This will only affect new installations. Fixes issue #644.</p> <p>Introduced new encoding type <code>normalized_ascii</code>, which replaces characters that have accented marks with analogous ascii characters. For example, \u00f6 gets replaced with o.</p> <p>Patching process is more forgiving about records with interval less than or equal to zero.</p> <p>Fixed problem where invalid <code>mintime</code> or <code>maxtime</code> was returned for days with no data. Fixes issue #635.</p> <p>Syntax errors in <code>weewx.conf</code> are now logged. PR #637. Thanks to user Rich Bell!</p> <p>Fixed problem where plots could fail if the data range was outside of a specified axes range. Fixes issue #638.</p> <p>Fixed problem that could cause reporting to fail under Python2.7 if the configuration dictionary contained a comment with a UTF-8 character. Fixes issue #639.</p> <p>Fixed problem that could cause program to crash if asking for deltas of a non- existent key.</p> <p>The version 4.3.0 patch to fix the incorrect calculation of sums in the daily summary tables itself contained a bug. This version includes a patch to fix the problem. It runs once at startup. Fixes issue #642.</p>"},{"location":"changes/#430-01042020","title":"4.3.0 01/04/2020","text":"<p>Version 4.2.0 had a bug, which caused the sums in the daily summary to be incorrectly calculated. This version includes a patch to fix the problem. It runs once at startup. Fixes issue #623.</p> <p>The WMR200 driver is no longer supported. An unsupported version can be found at https://github.com/weewx/weewx-wmr200. Support for LaCrosse WS23xx and Oregon WMR300 will continue.</p> <p>Service <code>weewx.wxxtypes.StdDelta</code> was inadvertently left out of the list of services to be run. Fortunately, it is not used. Yet. Added it back in.</p> <p>Added the \"old\" NWS algorithm as an option for calculating heat index.</p> <p>Changed how various undocumented parameters in <code>[StdWXCalculate]</code> are specified. The only one people are likely to have used is <code>ignore_zero_wind</code>. Its name has changed to <code>force_null</code>, and it has been moved. See the Upgrading Guide.</p> <p>Documented the various <code>[StdWXCalculate]</code> options.</p> <p>Fixed corner case for <code>windDir</code> when using software record generation, <code>ignore_zero_wind=True</code>, and <code>windSpeed=0</code> for entire record interval. Now emits last <code>windDir</code> value.</p> <p>Fixed problem when looking up stars with more than one word in their name. Fixes issue #620.</p> <p>Fixed problem where wind gust direction is not available when using software record generation.</p> <p>Added <code>--no-prompt</code> action to <code>wee_import</code>, allowing wee_import to be run unattended.</p> <p>Fixed problem that prevented option <code>observations</code> from being used in the simulator. Thanks to user Graham!</p> <p>Fixed problem where wind chill was calculated incorrectly for <code>METRICWX</code> databases. PR #627. Thanks to user edi-x!</p> <p>Allow wind vectors to be converted to unit of beaufort. Fixes issue #629.</p> <p>Option <code>log_failure</code> under <code>[StdReport]</code> is set to <code>True</code> by the upgrade  process. See the Upgrading Guide.</p>"},{"location":"changes/#420-10262020","title":"4.2.0 10/26/2020","text":"<p>CHANGES COMING! This is the last release that will support the LaCrosse WS23xx, Oregon WMR200 and WMR300 stations. In the future, they will be published as unsupported extensions.</p> <p>Made it easier to add new, derived types via <code>StdWXCalculate</code>. Fixes issue #491.</p> <p>Changed the tag system slightly in order to make it possible for the XTypes system to add new aggregations that take an argument.</p> <p>Added the new data types in the <code>extended_wview</code> schema to the WeeWX types system. Fixes issue #613.</p> <p>Added ability to label left, right or both y-axes of graphs.  PR #610. Fixes issue #609. Thanks to user Brent Fraser!</p> <p>Added units and labels for the lightning data types.</p> <p>Fixed problem where threads attempt to access non-existent database. Fixes issue #579.</p> <p>Fixed problem that caused reporting units to revert to <code>US</code> if they were in a mixed unit system. Fixes issue #576.</p> <p>Fixed problem that could cause the station registry to fail if given a location with a non-ASCII location name.</p> <p>Changed TE923 bucket size from 0.02589 inches to 1/36 of an inch (0.02777778 in). PR #575. Fixes issue #574. Thanks to user Timothy!</p> <p>Undocumented option <code>retry_certificate</code> has been renamed to <code>retry_ssl</code>, and now covers all SSL errors (not just certificate errors). Fixes issue #569. Thanks to user Eric!</p> <p>Fixed problem caused by specifying a <code>[Logging]/[[formatters]]</code> section in <code>weewx.conf</code> that uses interpolated variables.</p> <p>Fixed problem in the Vantage driver that resulted in incorrect <code>sunrise</code> / <code>sunset</code> being included in loop packets when run under Python 3. Thanks to  users Constantine and Jacques!</p> <p>Improved auto-scaling of plot axes.</p> <p>Fixed problem where aggregates of <code>windvec</code> and <code>windgustvec</code> returned the aggregate since start of day, not the start of the aggregation period. Fixes issue #590.</p> <p>New unit <code>beaufort</code>, included in <code>group_speed</code>. Treating beaufort as a separate type has been deprecated. Fixes issue #591.</p> <p>New unit <code>kPa</code>, included in <code>group_pressure</code>. Fixes issue #596.</p> <p>Fixed bug in the simulator. Made it easier to subclass class <code>Simulator</code>.</p> <p>Expressions in <code>StdCalibration</code> are now ordered. Later corrections can depend on earlier corrections.</p> <p>Fixed problem under Python 2, where option <code>none</code> could cause exception. PR #597. Thanks to user Cl\u00e9ment!</p> <p>Fixed problem with ws23xx driver under Python 3 that caused it to crash.</p> <p>Use a more modern formula for heat index. Fixes issue #601. Thanks to user Peter Q!</p> <p>Allow overriding the data binding when using iterators. Fixes issue #580.</p> <p>Fixed problem where old daily summaries may not have a version number.</p> <p>Fixed problem in WMR200 driver where missing UV reports as index 255.</p> <p>Added option <code>force_direction</code> for working around a WU bug. Fixes issue #614.</p> <p>Fixed problem where null bytes in an import data file would cause <code>wee_import</code> to fail.</p>"},{"location":"changes/#411-06012020","title":"4.1.1 06/01/2020","text":"<p>Fixed problem that caused wind speed to be reported to AWEKAS in m/s instead of km/h.</p> <p>Fixed problem that caused FTP attempts not to be retried.</p> <p>Fixed problem that caused monthly and yearly summaries to appear only sporadically.</p> <p>Fixed problem when using the ultimeter driver under Python 2.</p> <p>Fixed problem when using the ws1 driver under Python 2.</p> <p>Fixed problem that prevented remote directories from being created by FTP.</p> <p>New strategy for calculating system uptime under Python 3. Revisits issue #428. Alternative to PR #561.</p>"},{"location":"changes/#410-05252020","title":"4.1.0 05/25/2020","text":"<p>Archive records emitted by the Vantage driver now include the number of wind samples per archive interval in field wind_samples.</p> <p>wee_import can now import WeatherCat monthly .cat files.</p> <p>Changed the logging configuration dictionary to match the Python documents. Thanks to user Graham for figuring this out!</p> <p>Fixed problem that prevented ws1 driver from working under Python 3. PR #556.</p> <p>Eliminate use of logging in wee_config, allowing it to be used for installs without syslog.</p> <p>Allow expressions to be used as a datatype when plotting.</p> <p>Added option 'reuse_ssl' to FTP. This activates a workaround for a bug in the Python ftp library that causes long-lived connections to get closed prematurely. Works only with Python 3.6 and greater.</p> <p>The cc3000 driver will automatically reboot the hardware if it stops sending observations. PR #549.</p> <p>Install using setup.py forgot to set WEEWX_ROOT when installing in non-standard places. Fixes issue #546.</p> <p>Fixed bug in ws28xx driver that prevented it from running under Python 3. Fixes issue #543.</p> <p>Changed query strategy for calculating min and max wind vectors, which should result in much faster plot generation.</p> <p>Fixed bug in wmr9x8 driver that prevented it from running under Python 3.</p> <p>Fixed several bugs in the te923 driver that prevented it from running under Python 3.</p> <p>Added a logging handler for rotating files. See https://bit.ly/2StYSHb for how to use it. It is the default for macOS.</p> <p>More information if an exception is raised while querying for vantage hardware type.</p> <p>wunderfixer: fixed problem under Python 3 where response was not converted to str before attempting to parse the JSON. Option --simulate now requires api_key and password, so it can hit the WU.</p> <p>Fixed problem in te923 driver under Python 3 that caused it to crash.</p>"},{"location":"changes/#400-04302020","title":"4.0.0 04/30/2020","text":"<p>Ported to Python 3. WeeWX should now run under Python 3.5 and greater, as well as Python 2.7. Support for Python 2.5 and 2.6 has been dropped.</p> <p>New facility for creating new user-defined derived types. See the Wiki article https://github.com/weewx/weewx/wiki/WeeWX-V4-user-defined-types</p> <p>WeeWX now uses the Python 'logging' facility. This means log, formats, and other things can now be customized. Fixes issue #353.</p> <p>Strings appearing in the data stream no longer cause a TypeError if they can be converted to a number.</p> <p>Strings can now be accumulated and extracted in the accumulators, making it possible to include them in the database schemas.</p> <p>The utility wee_reports now loads services, allowing it to use user-supplied extensions. Fixes issue #95.</p> <p>New default schema (\"wview_extended\") that offers many new types. The old schema is still supported. Fixes issue #115.</p> <p>Optional, more flexible, way of specifying schemas for the daily summaries. The old way is still supported.</p> <p>The install process now offers to register a user's station with weewx.com.</p> <p>The package MySQL-python, which we used previously, is not always available on Python 3. Ported the MySQL code to use the package mysqlclient as an alternative.</p> <p>The default for WOW no longer throttles posting frequency (the default used to be no more than once every 15 minutes).</p> <p>Added new aggregate types minsum, minsumtime, sum_le. PR #382.</p> <p>Unit group group_distance is now a first-class group.</p> <p>Added new tag $python_version.</p> <p>Ported to Python2-PyMySQL package on OpenSUSE.</p> <p>Added new aggregation types 'first' (similar to 'last'), 'diff' (the difference between last and first value in the aggregation interval), and 'tderiv' (the difference divided by the time difference).</p> <p>Created new unit group 'group_energy2', defined as watt-seconds. Useful for high resolution energy monitors.</p> <p>An observation type known to the system, but not in a record, will now return a proper ValueTuple, rather than UnknownType.</p> <p>Type \"stormStart\" was added to the unit system. Fixes issue #380.</p> <p>Added new aggregation type 'growdeg'. Similar to 'heatdeg', or 'cooldeg', it measures growing degree-days. Basically, cooldeg, but with a different base. Fixes issue #367. Thanks to user Clay Jackson for guidance!</p> <p>Ported OS uptime to OpenBSD. Fixes issue #428. Thanks to user Jeff Ross!</p> <p>Catch SSL certificate errors in uploaders. Retry after an hour. Fixes issue #413.</p> <p>Wunderfixer has been ported to the new WU API. This API requires an API key, which you can get from WU. Put it in weewx.conf. Added option --upload-only. Thanks to user Leon Shaner! Fixes issues #414 and #445.</p> <p>Wee_import can now import Weather Display monthly log files.</p> <p>Fixed problem where sub-sections DegreeDays and Trend were located under the wrong weewx.conf section. Fixes issue #432. Thanks to user mph for spotting this!</p> <p>Added new parameters to the Weather Underground uploader. Fixes issue #435.</p> <p>Added new air quality types pm1_0, pm2_5, and pm10_0 to the unit system. Added new unit microgram_per_meter_cubed. Added new unit group, group_concentration.</p> <p>Plist for the Mac launcher now includes a log file for stderr.</p> <p>Night-day transition in plots now uses shortest travel distance around color wheel to minimize extra colors. Fixes issue #457. Thanks to user Alex Edwards!</p> <p>Fixed bug that causes plots to fail when both min and max are zero. Fixes issue #463.</p> <p>Fixed problem with sqlite driver that can lead to memory growth. See PR #467. Thanks to user Rich Bell!</p> <p>Fixed bug that caused windrun to be calculated wrongly under METRICWX unit system. Fixes issue #452.</p> <p>If a bad value of 'interval' is encountered in a record, the program will simply ignore it, rather than stopping. Address issue #375.</p> <p>Change in how the archive timespan is calculated in the engine. This allows oddball archive intervals. Fixes issue #469.</p> <p>NOAA reports are now more tolerant of missing data. Fixes issue #300.</p> <p>Use of strftime() date and time format codes in template file names is now supported as an alternative to the legacy 'YYYY', 'MM' and 'DD'. The legacy codes continue to be supported for backwards compatibility. Fixes issue #415.</p> <p>New --calc-missing action added to wee_database to calculate and store derived observations.</p> <p>wee_import now calculates missing derived observations once all imported data has been saved to archive. Fixes issue #443.</p> <p>wee_import now tolerates periods that contain no source data. Fixes issue #499.</p> <p>wee_import now accepts strings representing cardinal, intercardinal and secondary intercardinal directions in CSV imports. Partially fixes issue #238.</p> <p>The field delimiter character may now be defined for wee_import CSV imports.</p> <p>Ignore historical records if the timestamp is in the future.</p> <p>Can now recover from MariaDB-specific database connection error 1927.</p> <p>Changed the name of the unit \"litre\" to \"liter\", making its spelling more consistent with \"meter\". The spelling \"litre\" is still accepted.</p> <p>Systemd type changed from \"simple\" to \"forking\". Thanks to user Jaap de Munck for figuring this one out!</p> <p>The configuration file is now an optional argument. This means most users will be able to use the simple command line 'sudo weewxd'.</p> <p>Use correct log path for netbsd and openbsd in logger setup.</p> <p>StdWXCalculate no longer calculates anything by default. Instead, types to be calculated must be listed in weewx.conf. See the Upgrade Guide.</p> <p>setup.py install no longer saves the old 'bin' subdirectory. Instead, it simply overwrites it.</p> <p>Support for the vantage LOOP2 packet format. Fixes issue #374.</p> <p>The vantage driver now allows 3 retries per read, rather than per archive interval.</p>"},{"location":"changes/#392-07142019","title":"3.9.2 07/14/2019","text":"<p>StdPrint now explicitly converts loop and archive fields to UTF-8 before printing. This means unicode strings can now be included in loop and archive fields.</p> <p>Fix WMR300 driver so that it will reject (corrupt) logger records if they have negative interval (similar to issue #375).</p> <p>Added 'rain_warning' option in WMR300 driver to remind station owners to reset the rain counter when the rain counter exceeds a threshold (default is 90%). Thanks to weewx user Leon!</p> <p>Added several other debug tools to the WMR300 driver. PR #402.</p> <p>Wunderfixer now keeps going if a post does not satisfy [[Essentials]]. Fixes issue #329 (again).</p> <p>Fixed problem that prevented the wee_device --history option from working with the CC3000 driver.</p> <p>Fix incorrect <code>log_success</code> operation in ftp, rsync, copy and image generators. PR #373. Partial fix of issue #370.</p> <p>Fixed problem that could cause the WMR200 to crash WeeWX if the record interval is zero. Fixes issue #375.</p> <p>Posts to the Weather Underground now use https, instead of http. Thanks to user mljenkins! PR #378.</p> <p>Fixed problem with handling CWOP connection errors. Commit 0a21a72</p> <p>Fixed problem that prevented to CopyGenerator from handling nested directories. Fixes issue #379.</p> <p>Fixed problem that prevented humidity calibration from being set on Vantage stations.</p> <p>Improved accuracy of the calculation of Moon phases. Revisits issue #342.</p> <p>When the AWEKAS code augments the record for rainRate, it now checks for a bad timestamp.</p> <p>The ts1 driver now returns 'barometer' instead of 'pressure'. Thanks to user 'windcrusader'! Fixes issue #393.</p> <p>Fixed problem when calculating vector averages. Thanks to user timtsm! PR #396.</p> <p>windrun is now calculated on a per-archive period basis, instead of for the whole day. Thanks to user 'windcrusader'! PR #399. Fixes issue #250.</p> <p>Wunderfixer has new option to set socket timeout. This is to compensate for WU \"capacity issues\". Thanks to user Leon! See PR #403.</p> <p>Fixed bug in WS1 driver that caused crash if rain_total was None.</p> <p>If a file user/schemas.py still exists (a relic from V2.7 and earlier), it is renamed to user/schemas.py.old. Fixes issue #54.</p> <p>V3.x test suites now use same data set as V4.x, minimizing the chance of a false negative when switching versions.</p> <p>Fixed fine offset driver to warn about (and skip) historical data that have zero for interval.</p> <p>Correct rounding problems for rain and other types when posting to CWOP. Fixes issue #431. Thanks to user ls4096!</p> <p>Fixed problem that can cause an exception with restx services that do not use the database manager. See commit 459ccb1.</p> <p>Sending a SIGTERM signal to weewxd now causes it to exit with status 128 + signal#. PR #442. Thanks to user sshambar!</p> <p>Fixed bug that could cause WMR200 packets with a timestamp between startup and the minimum interval to have an interval length of zero. Fixes issue #375 (again!).</p>"},{"location":"changes/#391-02062019","title":"3.9.1 02/06/2019","text":"<p>In genplot, do not attempt to normalize unspecified paths.</p> <p>Introduced option no_catchup. If set to true, a catchup will not be attempted. Fixes issue #368.</p>"},{"location":"changes/#390-02052019","title":"3.9.0 02/05/2019","text":"<p>New skin called Seasons. For new users, it will be installed and enabled. For old users, it will be installed, but not enabled. Fixes issue #75.</p> <p>There are also two new skins for mobile phones: Mobile and Smartphone. These are installed, but not enabled, for all users.</p> <p>Reworked how options get applied for reports. Backstop default values are supplied by a new file weewx/defaults.py. These can get overridden by skin.conf, or in a new section [StdReports] / [[Defaults]] in weewx.conf. See the Customization Guide, section \"How options work\", for details. Fixes issue #248.</p> <p>The skin.conf is optional.  It is possible to specify the entire skin configuration in the configuration file weewx.conf.</p> <p>Dropped support of Python 2.5. You must now use either Python 2.6 or 2.7. This is in anticipation of porting to Python 3.</p> <p>The image generator now supports the use of a 'stale_age' option. Thanks to user John Smith. Fixes issue #290.</p> <p>Rose line width can now be specified with option rose_line_width.</p> <p>The Felsius unit of temperature (see https://xkcd.com/1923/) is now supported.</p> <p>New tag $almanac.sidereal_time for calculating current sidereal time</p> <p>New tag $almanac.separation() for calculating planet separations.</p> <p>Can now use ephem.readdb() to load arbitrary bodies into the almanac.</p> <p>StdQC now includes an entry for rain again (inexplicably removed in v3.1.0).</p> <p>If software record generation is used, the archive interval is now what is specified in weewx.conf, even if the station supports hardware generation.</p> <p>Fixed problem where records were downloaded on startup, even if software record generation was specified.</p> <p>The tag formatting taxonomy has been simplified. Just use suffix \".format()\" now. Documentation updated to reflect changes. Backwards compatibility with old suffixes is supported. Fixes issue #328.</p> <p>Can now set Rapidfire parameter rtfreq. Thanks to user 'whorfin'. PR #304.</p> <p>Template names can now include the week number. Thanks to user 'stimpy23'. PR #319.</p> <p>New aggregation type for plots: 'cumulative'. Thanks to user 'henrikost'. PR #302.</p> <p>Fixed problem where MySQL error 2013 could crash WeeWX. Fixes issue #327.</p> <p>Posts to the Weather Underground will be skipped if an observation type that is listed in the [[[Essentials]]] subsection is missing. Fixes issue #329.</p> <p>Upgrade process now explicity upgrades version-to-version, instead of doing a merge to the new config file. Fixes issue #217.</p> <p>Example xstats now includes tags for last_year and last_year_todate. Thanks to user evilbunny2008. PR #325.</p> <p>Guard against a negative value for 'interval' in WMR200 stations.</p> <p>Check for missing or negative values for the record field 'interval'.</p> <p>Changed the formula used to calculate percentage illumination of the moon to something more accurate around 2018. This formula is only used if pyephem is not installed. Fixes issue #342.</p> <p>Fixed bug that caused older, \"type A\" Vantage Pro2, to crash. Fixes issue #343.</p> <p>Fixed a bug that caused a divide-by-zero error if a plot range was the same as a specified min or max scale. Fixes issue #344.</p> <p>Fixed bug that prevented an optional data_binding from being used in tags when iterating over records. Fixes issue #345.</p> <p>Examples lowBattery and alarm now try SMTP_SSL connections, then degrade if that's not available. Fixes issue #351.</p> <p>Fixed problem with Brazilian locations at the start of DST. It manifested itself with the error \"NoColumnError: no such column: wind\". Fixes issue #356.</p> <p>Fixed problem that caused sunrise/sunset to be calculated improperly in Sun.py.</p> <p>Improved coverage of test suites. Fixes issue #337.</p> <p>wee_device, when used with the Vantage series, now honors the \"no prompt\" (-y) option. Fixes issue #361.</p> <p>Log watch now correctly logs garbage collection events. Thanks to user buster-one. PR #340.</p>"},{"location":"changes/#382-08152018","title":"3.8.2 08/15/2018","text":"<p>Added flag to weewx-multi init script to prevent systemd from breaking it. Thanks to users Timo, Glenn McKechnie, and Paul Oversmith.</p> <p>Fixed problem that caused wind direction in archive records to always be calculated in software, even with stations that provide it in hardware. Fixes issue #336.</p>"},{"location":"changes/#381-06272018","title":"3.8.1 06/27/2018","text":"<p>Map cc3000 backup battery to consBatteryVoltage and station battery to supplyVoltage to more accurately reflect the battery functions.</p> <p>Update the syntax in the rsyslog configuration sample</p> <p>Significant overhaul to the WMR300 driver.  The driver should now work reliably on any version of pyusb and libusb.  The driver will now delete history records from the logger before the logger fills up (the WMR300 logger is not a circular buffer).  Thanks to users Markus Biewer and Cameron.  Fixes issue #288.</p> <p>Added automatic clearing of logger for CC3000 driver to prevent logger overflow (the CC3000 logger is not a circular buffer).  The default is to not clear the history, but it is highly recommended that you add a logging threshold once you are confident that all logger data have been captured to the weewx database.</p> <p>Improved the robustness of reading from the CC3000 logger.</p> <p>Better CRC error message in Vantage driver.</p> <p>Parameterize the configuration directory in weewx-multi init script.</p> <p>In StdWXCalculate, use None for an observation only if the variables on which the derived depends are available and None.  Fixes issue #291.</p> <p>Fixed bug that prevented specifying an explicit alamanac time from working.</p> <p>Fixed bug that prevented historical records from being downloaded from ws23xx stations. Thanks to user Matt Brown! Fixes issue #295</p> <p>Fixed bug that crashed program if a sqlite permission error occurred.</p> <p>If wind speed is zero, accumulators now return last known wind direction (instead of None). Thanks to user DigitalDan05. PR #303.</p> <p>Windrun calculations now include the \"current\" record. Fixes issue #294.</p> <p>Fixed bug involving stations that report windGust, but not windGustDir, in their LOOP data (e.g., Fine Offset), which prevented the direction of max wind from appearing in statistics. Fixes issue #320.</p> <p>The engine now waits until the system time is greater than the creation time of the weewx.conf file before starting up. Fixes issue #330.</p>"},{"location":"changes/#380-11222017","title":"3.8.0 11/22/2017","text":"<p>The <code>stats.py</code> example now works with heating and cooling degree days. Fixes issue #224.</p> <p>The ordinal increment between x- and y-axis labels can now be chosen. The increment between x-axis tick marks can now be chosen. Thanks to user paolobenve! PR #226.</p> <p>Bar chart fill colors can now be specified for individual observation types. Fixes issue #227.</p> <p>For aggregation types of <code>avg</code>, <code>min</code> and <code>max</code>, plots now locate the x- coordinate in the middle of the aggregation interval (instead of the end). Thanks again to user paolobenve! PR #232.</p> <p>The nominal number of ticks on the y-axis can now be specified using option <code>y_nticks</code>.</p> <p>Fixed bug that could cause tick crowding when hardwiring y-axis min and max values.</p> <p>The uploader framework in restx.py now allows POSTS with a JSON payload, and allows additional headers to be added to the HTTP request object.</p> <p>MySQL error 2006 (\"MySQL server has gone away\") now gets mapped to <code>weedb.CannotConnectError</code>. PR #246</p> <p>Whether to use an FTP secure data connection is now set separately from whether to authenticate using TLS. Fixes issue #284.</p> <p>Corrected formatting used to report indoor temp and humidity to the Weather Underground.</p> <p>Added inDewpoint to the observation group dictionary.</p> <p>Added missing aggregation type 'min_ge'. Thanks to user Christopher McAvaney!</p> <p>Plots can now use an <code>aggregate_type</code> of <code>last</code>. Fixes issue #261.</p> <p>When extracting observation type stormRain (Davis Vantage only), the accumulators now extract the last (instead of average) value.</p> <p>Added additional accumulator extractors.</p> <p>Allow reports to be run against a binding other than <code>wx_binding</code>.</p> <p>Do chdir at start of ImageGenerator so that skin.conf paths are treated the same as those of other generators.</p> <p>Changed default value of <code>stale</code> for CWOP from 60 to 600 seconds. PR #277.</p> <p>Vantage driver: Allow user to specify the Vantage Pro model type in weewx.conf.  Repeater support added to '-\u2014set-transmitter-type' command. New commands: '\u2014-set-retransmit',               '--set-latitude', '--set-longitude'               '--set-wind-cup',               '--set-temperature-logging' Details explained in hardware.htm. Thanks to user dl1rf! PR #270, #272.</p> <p>Using the <code>set-altitude</code> command in <code>wee_device</code> no longer changes the barometer calibration constant in Vantage devices. See PR #263. Thanks to user dl1rf!</p> <p>Fixed bug in wmr200 driver that resulted in archive records with no interval field and 'NOT NULL constraint failed: archive.interval' errors.</p> <p>Fixed bug in wmr200 driver that caused <code>windDir</code> to always be <code>None</code> when  <code>windSpeed</code> is zero.</p> <p>Include rain count in cc3000 status.</p> <p>In the restx posting, catch all types of httplib.HTTPException, not just BadStatusLine and IncompleteRead.</p>"},{"location":"changes/#371-03222017","title":"3.7.1 03/22/2017","text":"<p>Fixed log syntax in wmr100 and wmr9x8 drivers.</p> <p>Emit Rapidfire cache info only when debug is level 3 or higher.  Thanks to user Darryn Capes-Davis.</p> <p>Fixed problem that prevented Rapidfire from being used with databases in metric units. Fixes issue #230.</p> <p>Set WOW <code>post_interval</code> in config dict instead of thread arguments so that overrides are possible.  Thanks to user Kenneth Baker.</p> <p>Distribute example code and example extensions in a single examples directory. Ensure that the examples directory is included in the rpm and deb packages.</p> <p>Fixed issue that prevented a port from being specified for MySQL installations.</p> <p>MySQL error 2003 (\"Can't connect to MySQL server...\") now gets mapped to <code>weedb.CannotConnectError</code>. PR #234.</p> <p>By default, autocommit is now enabled for the MySQL driver. Fixes issue #237.</p> <p>Highs and lows from LOOP packets were not being used in preference to archive records in daily summaries. Fixed issue #239.</p>"},{"location":"changes/#370-03112017","title":"3.7.0 03/11/2017","text":"<p>The tag <code>$current</code> now uses the record included in the event <code>NEW_ARCHIVE_RECORD</code>, rather than retrieve the last record from the database. This means you can use the tag <code>$current</code> for observation types that are in the record, but not necessarily in the database. Fixes issue #13.</p> <p>Most aggregation periods now allow you to go farther in the past. For example, the tag <code>$week($weeks_ago=1)</code> would give you last week. You can also now specify the start and end of an aggregation period, such as <code>$week.start</code> and <code>$week.end</code>.</p> <p>Can now do <code>SummaryByDay</code> (as well as <code>SummaryByMonth</code> and <code>SummaryByYear</code>). NB: This can generate lots of files --- one for every day in your database! Leaving this undocumented for now. Fixes issue #185.</p> <p>When doing hardware record generation, the engine now augments the record with any additional observation types it can extract out of the accumulators. Fixes issue #15.</p> <p>It's now possible to iterate over every record within a timespan. Fixes issue #182.</p> <p>Use schema_name = hardware_name pattern in sensor map for drivers that support extensible sensor suites, including the drivers for cc3000, te923, wmr300, wmr100, wmr200, wmr9x8</p> <p>Simplified sensor mapping implementation for wmr100 and wmr200 drivers.  For recent weewx releases, these are the default mappings for wmr200:</p> <ul> <li>3.6.0: in:0, out:1, e2:2, e3:3, ..., e8:8   hard-coded</li> <li>3.6.1: in:0, out:1, e1:2, e2:3, ..., e7:8   hard-coded</li> <li>3.7.0: in:0, out:1, e1:2, e2:3, ..., e7:8   sensor_map</li> </ul> <p>and these are default mappings for wmr100:</p> <ul> <li>3.6.2: in:0, out:1, e1:2, e2:3, ..., e7:8   hard-coded</li> <li>3.7.0: in:0, out:1, e1:2, e2:3, ..., e7:8   sensor_map</li> </ul> <p>Enabled battery status for every remote T/H and T sensor in wmr100 driver.</p> <p>Enabled heatindex for each remote T/H sensor in wmr200 driver.</p> <p>Fixed inverted battery status indicator in wmr200 driver.</p> <p>Fixed 'Calculatios' typo in wmr100, wmr200, wmr9x8, and wmr300 drivers.</p> <p>Fixed usb initialization issues in the wmr300 driver.</p> <p>Added warning in wmr300 driver when rain counter reaches maximum value.</p> <p>Decode <code>heatindex</code> and <code>windchill</code> from wmr300 sensor outputs.</p> <p>Report the firmware version when initializing the cc3000 driver.</p> <p>Fixed bug in vantage driver that would prevent console wake up during retries when fetching EEPROM vales. Thanks to user Dan Begallie!</p> <p>The vantage driver no longer emits values for non-existent sensors. As a result, LOOP and archive packets are now much smaller. If this works out, other drivers will follow suit. Partial fix of issue #175.</p> <p>The vantage driver now emits the barometer trend in LOOP packets as field <code>trendIcon</code>.</p> <p>The engine now logs locale. Additional information if a TERM signal is received.</p> <p>Removed the site-specific \"Pond\" extensions from the Standard skin.</p> <p>The Standard skin now includes plots of outside humidity. Fixes  issue #181.</p> <p>Fixed reference to <code>index.html.tmpl</code> in the xstats example.</p> <p>Changed algorithm for calculating ET to something more appropriate for hourly values (former algorithm assumed daily values). Fixes issue #160.</p> <p>Fixed bug in Celsius to Fahrenheit conversion that affected pressure conversions in <code>uwxutils.py</code>, none of which were actually used.</p> <p>Fixed bug that was introduced in v3.6.0, which prevented <code>wee_reports</code> from working for anything other than the current time.</p> <p>Documented the experimental anti-alias feature, which has been in weewx since v3.1.0. Fixes issue #6.</p> <p>Fixed problem where multiple subsections under <code>[SummaryBy...]</code> stanzas could cause multiple copies of their target date to be included in the Cheetah variable <code>$SummaryByYear</code> and <code>$SummaryByMonth</code>. Fixes issue #187.</p> <p>Moved examples out of <code>bin</code> directory.  Eliminated experimental directory. Reinforce the use of <code>user</code> directory, eliminate use of <code>examples</code> directory. Renamed <code>xsearch.py</code> to <code>stats.py</code>.</p> <p>OS uptime now works for freeBSD. Thanks to user Bill Richter! PR #188.</p> <p>Broke out developer's notes into a separate document.</p> <p>Added <code>@media</code> CSS for docs to improve printed/PDF formatting.  Thanks to user Tiouck!</p> <p>Added a 0.01 second delay after each <code>read_byte</code> in ws23xx driver to reduce chance of data spikes caused by RS232 line contention.  Thanks lionel.sylvie!</p> <p>The observation <code>windGustDir</code> has been removed from wmr100, wmr200, te923, and fousb drivers.  These drivers were simply assigning <code>windGustDir</code> to <code>windDir</code>, since none of the hardware reports an actual wind gust.</p> <p>Calculation of aggregates over a period of one day or longer can now respect any change in archive interval. To take advantage of this feature, you will have to apply an update to your daily summaries. This can be done using the tool <code>wee_database</code>, option <code>--update</code>. Refer to the Changes to daily summaries section in the Upgrade Guide to determine whether you should update or not. Fixes issue #61.</p> <p>Max value of <code>windSpeed</code> for the day is now the max archive value of <code>windSpeed</code>. Formerly, it was the max LOOP value. If you wish to patch your older daily summaries to interpret max windSpeed this way, use the tool <code>wee_database</code> with option <code>--update</code>. Fixes issue #195.</p> <p>The types of accumulators, and the strategies to put and extract records  out of them, can now be specified by config stanzas. This will be of interest to extension writers. See issue #115.</p> <p>Fixed battery status label in acurite driver: changed from <code>txTempBatteryStatus</code> to <code>outTempBatteryStatus</code>.  Thanks to user manos!</p> <p>Made the lowBattery example more robust - it now checks for any known low battery status, not just <code>txBatteryStatus</code>.  Thanks to user manos!</p> <p>Added info-level log message to <code>calculate_rain</code> so that any rain counter reset will be logged.</p> <p>Added better logging for cc3000 when the cc3000 loses contact with sensors for extended periods of time.</p> <p>How long to wait before retrying after a bad uploader login is now settable with option <code>retry_login</code>. Fixes issue #212. </p> <p>The test suites now use dedicated users <code>weewx1</code> and <code>weewx2</code>. A shell script has been included to setup these users.</p> <p>A more formal exception hierarchy has been adopted for the internal database library <code>weedb</code>. See <code>weedb/NOTES.md</code>.</p> <p>The weedb Connection and Cursor objects can now be used in a \"with\" clause.</p> <p>Slightly more robust mechanism for decoding last time a file was FTP'd.</p>"},{"location":"changes/#362-11082016","title":"3.6.2 11/08/2016","text":"<p>Fixed incorrect WU daily rain field name</p> <p>Fixed bug that crashed Cheetah if the <code>weewx.conf</code> configuration file included a BOM. Fixes issue #172.</p>"},{"location":"changes/#361-10132016","title":"3.6.1 10/13/2016","text":"<p>Fixed bug in wunderfixer.</p> <p>Fixed handling of <code>StdWXCalculate.Calculations</code> in <code>modify_config</code> in the wmr100, wmr200, wmr300, and wmr9x8 drivers.</p> <p>Eliminate the apache2, ftp, and rsync suggested dependencies from the deb package.  This keeps the weewx dependencies to a bare minimum.</p> <p>Added retries to usb read in wmr300 driver.</p> <p>Remapped sensor identifiers in wmr200 driver so that <code>extraTemp1</code> and <code>extraHumid1</code> are usable.</p> <p>Standardized format to be used for times to <code>YYYY-mm-ddTHH:MM</code>.</p>"},{"location":"changes/#360-10072016","title":"3.6.0 10/07/2016","text":"<p>Added the ability to run reports using a cron-like notation, instead of with every report cycle. See User's Guide for details. Thanks to user Gary Roderick. PR #122. Fixes issue #17.</p> <p>Added the ability to easily import CSV, Weather Underground, and Cumulus data using a new utility, wee_import. Thanks again to \u00fcber-user Gary Roderick. PR #148. Fixes issue #97.</p> <p>Refactored documentation so that executable utilities are now in their own document, utilities.htm.</p> <p>Fixed rpm package so that it will retain any changes to the user directory. Thanks to user Pat OBrien.</p> <p>No ET when beyond the reach of the sun.</p> <p>Software calculated ET now returns the amount of evapotranspiration that occurred during the archive interval. Fixes issue #160</p> <p>Fixed wee_config to handle config files that have no FTP or RSYNC.</p> <p>Fixed bug in StdWXCalculate that ignored setting of 'None' (#110).</p> <p>Which derived variables are to be calculated are now in a separate  subsection of [StdWXCalculate] called [[Calculations]].  Upgrade process takes care of upgrading your config file.</p> <p>Reset weewx launchtime when waiting for sane system clock (thanks to user James Taylor).</p> <p>Fixed anti-alias bug in genplot.  Issue #111.</p> <p>Corrected the conversion factor between inHg and mbar. Thanks to user Olivier.</p> <p>Consolidated unit conversions into module weewx.units.</p> <p>Plots longer than two years now use an x-axis increment of one year. Thanks to user Olivier!</p> <p>The WS1 driver now retries connection if it fails. Thanks to user  Kevin Caccamo! PR #112.</p> <p>Major update to the CC3000 driver:  - reading historical records is more robust  - added better error handling and reporting  - fixed to handle random NULL characters in historical records  - fixed rain units  - added ability to get data from logger as fast as it will send it  - added support for additional temperature sensors T1 and T2  - added transmitter channel in station diagnostics  - added option to set/get channel, baro offset  - added option to reset rain counter</p> <p>Fixed brittle reference to USBError.args[0] in wmr200, wmr300, and te923 drivers.</p> <p>Fixed typo in default te923 sensor mapping for h_3.  Thanks to user ngulden.</p> <p>Added flag for reports so that reports can be disabled by setting enable=False instead of deleting or commenting entire report sections in weewx.conf.</p> <p>The vantage and ws23xx drivers now include the fix for the policy of \"wind direction is undefined when no wind speed\".  This was applied to other drivers in weewx 3.3.0.</p> <p>Fixed te923 driver behavior when reading from logger, especially on stations with large memory configuration.  Thanks to users Joep and Nico.</p> <p>Fixed rain counter problems in wmr300 driver.  The driver no longer attempts to cache partial packets.  Do no process packets with non-loop data when reading loop data.  Thanks to user EricG.</p> <p>Made wmr300 driver more robust against empty usb data buffers.</p> <p>Fixed pressure/barometer in wmr300 driver when reading historical records.</p> <p>Fixed problem with the Vantage driver where program could crash if a serial I/O error happens during write. Fixes issue #134.</p> <p>Changed name of command to clear the Vantage memory from --clear to --clear-memory to make it more consistent with other devices.</p> <p>Fixed problem that prevented channel 8 from being set by the Vantage driver.</p> <p>Added solaris .smf configuration.  Thanks to user whorfin.</p> <p>Added option post_indoor_observations for weather underground.</p> <p>Added maximum value to radiation and UV plots.</p> <p>In the .deb package, put weewx reports in /var/www/html/weewx instead of /var/www/weewx to match the change of DocumentRoot in debian 8 and later.</p>"},{"location":"changes/#350-03132016","title":"3.5.0 03/13/2016","text":"<p>Fixed bug that prevented rsync uploader from working.</p> <p>Fixed bug in wmr300 driver when receiving empty buffers from the station.</p> <p>The type of MySQL database engine can now be specified. Default is 'INNODB'.</p> <p>Updated userguide with capabilities of the TE923 driver added in 3.4.0.</p> <p>Added aggregation type min_ge(val).</p> <p>Provide better feedback when a driver does not implement a configurator.</p> <p>Added humidex and appTemp to group_temperature. Fixed issue #96.</p> <p>Backfill of the daily summary is now done in \"tranches,\" reducing the memory requirements of MySQL. Thanks to \u00fcber-user Gary Roderick! Fixes issue #83.</p> <p>Made some changes in the Vantage driver to improve performance, particularly with the IP version of the logger. Thanks to user Luc Heijst for nagging me that the driver could be improved, and for figuring out how.</p> <p>Plotting routines now use Unicode internally, but convert to UTF-8 if a font does not support it. Fixes issue #101.</p> <p>Improved readability of documents on mobile devices. Thank you Chris Davies-Barnard!</p> <p>The loop_on_init option can now be specified in weewx.conf</p> <p>When uploading data to CWOP, skip records older than 60 seconds.  Fixes issue #106.</p> <p>Added modify_config method to the driver's configuration editor so that drivers can modify the configuration during installation, if necessary.</p> <p>The fousb and ws23xx drivers use modify_config to set record_generation to software.  This addresses issue #84.</p> <p>The wmr100, wmr200, wmr9x8, and wmr300 drivers use modify_config to set rainRate, heatindex, windchill, and dewpoint calculations to hardware instead of prefer_hardware since each of these stations has partial packets.  This addresses issue #7 (SF #46).</p>"},{"location":"changes/#340-01162016","title":"3.4.0 01/16/2016","text":"<p>The tag $hour has now been added. It's now possible to iterate over hours. Thanks to user Julen!</p> <p>Complete overhaul of the te923 driver.  Thanks to user Andrew Miles.  The driver now supports the data logger and automatically detects small or large memory models.  Added ability to set/get the altitude, lat/lon, and other station parameters.  Significant speedup to reading station memory, from 531s to 91s, which is much closer to the 53s for the te923tool written in C (all for a station with the small memory model).</p> <p>The wee_debug utility is now properly installed, not just distributed.</p> <p>Fixed bug in almanac code that caused an incorrect sunrise or sunset to be calculated if it followed a calculation with an explicit horizon value.</p> <p>Localization of tags is now optional. Use function toString() with argument localize set to False. Example:  $current.outTemp.toString($localize=False) Fixes issue #88.</p> <p>In the acurite driver, default to use_constants=True.</p> <p>Fixed bug in the rhel and suse rpm packaging that resulted in a configuration file with html, database, and web pages in the setup.py locations instead of the rpm locations.</p> <p>The extension utility wee_extension now recognizes zip archives as well as tar and compressed tar archives.</p> <p>Check for a sane system time when starting up.  If time is not reasonable, wait for it.  Log the time status while waiting.</p> <p>Added log_success option to cheetah, copy, image, rsync, and ftp generators.</p> <p>Older versions of MySQL (v5.0 and later) are now supported.</p>"},{"location":"changes/#331-12062015","title":"3.3.1 12/06/2015","text":"<p>Fixed bug when posting to WOW.</p> <p>Fixed bug where the subsection for a custom report gets moved to the very end of the [StdReport] section of a configuration file on upgrade.  Fixes issue #81.</p>"},{"location":"changes/#330-12052015","title":"3.3.0 12/05/2015","text":"<p>Now really includes wunderfixer. It was inadvertently left out of the install script.</p> <p>Rewrote the almanac so it now supports star ephemeris. For example, $almanac.rigel.next_rising. Fixes issue #79.</p> <p>Uninstalling an extension with a skin now deletes all empty directories. This fixes issue #43.</p> <p>Fixed bug in WMR200 driver that caused it to emit dayRain, when what it was really emitting was the \"rain in the last 24h, excluding current hour.\" Fixes issue #62.</p> <p>Fixed bug in WMR200 driver that caused it to emit gauge pressure for altimeter pressure. Thanks to user Mark Jenks for nagging me that something was wrong.</p> <p>Fixed bug that caused wind direction to be calculated incorrectly, depending on the ordering of a dictionary. Thanks to user Chris Matteri for not only spotting this subtle bug, but offering a solution. </p> <p>StdPrint now prints packets and records in (case-insensitive) alphabetical order.</p> <p>Fixed wind speed decoding in the acurite driver.  Thanks to aweatherguy.</p> <p>The StdRESTful service now supports POSTs, as well as GETs.</p> <p>The FTP utility now catches PickleError exceptions, then does a retry.</p> <p>Added unit 'minute' to the conversion dictionary.</p> <p>The vertical position of the bottom label in the plots can now be set in skin.conf with option bottom_label_offset.</p> <p>An optional port number can now be specified with the MySQL database.</p> <p>Added option use_constants in the Acurite driver.  Default is false; the calibration constants are ignored, and a linear approximation is used for all types of consoles.  Specify use_constants for 01035/01036 consoles to calculate using the constants.  The 02032/02064 consoles always use the linear approximation.</p> <p>Fixed test for basic sensor connectivity in the Acurite driver.</p> <p>The policy of \"wind direction is undefined when no wind speed\" is enforced by the StdWXCalculate service.  There were a few drivers that were still applying the policy: acurite, cc3000, fousb, ws1, wmr100, wmr200, ultimeter. These have been fixed.</p> <p>Changed logic that decides whether the configuration file includes a custom schema, or the name of an existing schema.</p> <p>Added new command-line utility wee_debug, for generating a troubleshooting  information report.</p> <p>Added option --log-label to specify the label that appears in syslog entries. This makes it possible to organize output from multiple weewx instances running on a single system.</p> <p>Fixed problem with the Vantage driver that caused it to decode the console display units incorrectly. Thanks to Luc Heijst!</p> <p>The WMR300 driver is now part of the weewx distribution.</p>"},{"location":"changes/#321-071815","title":"3.2.1 07/18/15","text":"<p>Fixed problem when using setup.py to install into a non-standard location. Weewx would start a new database in the \"standard\" location, ignoring the old one in the non-standard location.</p>"},{"location":"changes/#320-071515","title":"3.2.0 07/15/15","text":"<p>There are now five command-line utilities, some new, some old</p> <ul> <li><code>wee_config</code>:    (New) For configuring weewx.conf, in particular,                      selecting a new device driver.</li> <li><code>wee_extension</code>: (New) For adding and removing extensions.</li> <li><code>wee_database</code>:  (Formerly called wee_config_database)</li> <li><code>wee_device</code>:    (Formerly called wee_config_device)</li> <li><code>wee_reports</code>:   No changes.</li> </ul> <p>The script setup.py is no longer used to install or uninstall extensions. Instead, use the new utility wee_extension.</p> <p>Wunderfixer is now included with weewx --- no need to download it separately.  It now works with MySQL, as well as sqlite, databases. It also supports metric databases. Thanks to user Gary Roderick!</p> <p>Fixed bug in 12-hour temperature lookup for calculating station pressure from sea level pressure when database units are other than US unit system.</p> <p>Added guards for bogus values in various wxformula functions.</p> <p>Added windrun, evapotranspiration, humidex, apparent temperature, maximum theoretical solar radiation, beaufort, and cloudbase to StdWXCalculate.</p> <p>If StdWXCalculate cannot calculate a derived variable when asked to, it now sets the value to null. Fixes issue #10.</p> <p>Added option to specify algorithm in StdWXCalculate.  So far this applies only to the altimeter calculation.</p> <p>Added option max_delta_12h in StdWXCalculate, a window in which a record will  be accepted as being \"12 hours ago.\" Default is 1800 seconds.</p> <p>Fixed bug in debian install script - 'Acurite' was not in the list of stations.</p> <p>$almanac.sunrise and $almanac.sunset now return ValueHelpers. Fixes issue #26.</p> <p>Added group_distance with units mile and km.</p> <p>Added group_length with units inch and cm.</p> <p>Failure to launch a report thread no longer crashes program.</p> <p>The WU uploader now publishes soil temperature and moisture, as well as leaf wetness.</p> <p>Increased precision of wind and wind gust posts to WU from 0 to 1  decimal point.</p> <p>Increased precision of barometer posts to WOW from 1 to 3 decimal points.</p> <p>A bad CWOP server address no longer crashes the CWOP thread.</p> <p>The \"alarm\" example now includes a try block to catch a NameError exception should the alarm expression include a variable not in the archive record.</p> <p>Fixed bug that shows itself if marker_size is not specified in skin.conf</p> <p>Show URLs in the log for restful uploaders when debug=2 or greater.</p> <p>Fixed problem that could cause an exception in the WMR200 driver when formatting an error string.</p> <p>Added better recovery from USB failures in the ws28xx driver.</p> <p>Added data_format option to FineOffset driver.  Thanks to Darryl Dixon.</p> <p>Decoding of data is now more robust in the WS1 driver.  Get data from the station as fast as the station can spit it out.  Thanks to Michael Walker.</p> <p>Changes to the WS23xx driver include:   - Fixed wind speed values when reading from logger.  Values were too     high by a factor of 10.   - wrapped non-fatal errors in WeeWXIO exceptions to improve error     handling and failure recovery</p> <p>Changes to the AcuRite driver include:  - The AcuRite driver now reports partial packets as soon as it gets them      instead of retaining data until it can report a complete packet  - Improved timing algorithm for AcuRite data.  Thanks to Brett Warden.  - Added acurite log entries to logwatch script.  Thanks to Andy.  - Prevent negative rainfall amounts in acurite driver by detecting      counter wraparound  - Use 13 bits for rain counter instead of 12 bits  - Use only 12 bits for inside temperature in acurite driver when decoding      for 02032 stations</p> <p>Changes to the TE923 driver include:  - consolidated retries  - improved error handling and reporting</p> <p>Changes to the WMR9x8 driver include:  - Correct bug that caused yesterday's rain to be decoded as dayRain  - LOOP packet type 'battery' is now an int, instead of a bool  - The driver can now be run standalone for debugging purposes.</p> <p>The Vantage driver now catches undocumented termios exceptions and converts them to weewx exceptions. This allows retries if flushing input or output buffers fail. Fixes issue #34.</p> <p>Default values for databases are now defined in a new section [DatabaseTypes].  New option \"database_type\" links databases to database type. Installer will automatically update old weewx.conf files.</p> <p>The RESTful services that come with weewx are now turned on and off by option \"enable\". Installer will automatically update old weewx.conf files.  Other RESTful services that don't use this method will continue to work.</p> <p>Option bar_gap_fraction is now ignored. Bar plot widths are rendered explicitly since V3.0, making the option unnecessary. Fixes issue #25.</p> <p>Added additional debug logging to main engine loop.</p> <p>FTP uploader now retries several times to connect to a server, instead of  giving up after one try. Thanks to user Craig Hunter!</p>"},{"location":"changes/#310-020515","title":"3.1.0 02/05/15","text":"<p>Fixed setup.py bug that caused list-drivers to fail on deb and rpm installs.</p> <p>Added a wait-and-check to the stop option in the weewx.debian rc script.</p> <p>Fixed bug in the Vantage driver that causes below sea-level altitudes  to be read as a large positive number. Also, fixed problem with altitude units when doing --info (ticket #42).</p> <p>Fixed bug in wmr100 driver that causes gust wind direction to be null.</p> <p>Fixed bug in wmr200 driver that causes gust wind direction to be null.</p> <p>Fixed ultimeter driver to ensure wind direction is None when no wind speed Thanks to user Steve Sykes.</p> <p>Fixed bug in calculation of inDewpoint.  Thanks to user Howard Walter.</p> <p>Assign default units for extraHumid3,4,5,6,7, extraTemp4,5,6,7, leafTemp3,4, and leafWet1,2.</p> <p>Use StdWXCalculate to ensure that wind direction is None if no wind speed.</p> <p>Fixed sign bug in ultimeter driver.  Thanks to user Garrett Power.</p> <p>Use a sliding window with default period of 15 minutes to calculate the rainRate for stations that do not provide it.</p> <p>Added support for AcuRite weather stations.  Thanks to users Rich of Modern Toil, George Nincehelser, Brett Warden, Preston Moulton, and Andy.</p> <p>The ultimeter driver now reads data as fast as the station can produce it. Typically this results in LOOP data 2 or 3 times per second, instead of once per second.  Thanks to user Chris Thompstone.</p> <p>The daily summary for wind now uses type INTEGER for column sumtime, like the other observation types.</p> <p>Utility wee_reports no longer chokes if the optionally-specified timestamp is not in the database. Can also use \"nearest time\" if option 'max_delta' is specified in [CheetahGenerator].</p> <p>Utility wee_config_device can now dump Vantage loggers to metric databases. Fixes ticket #40.</p> <p>Fixed problem where dumping to database could cause stats to get added to the daily summaries twice.</p> <p>FTP over TLS (FTPS) sessions are now possible, but don't work very well with Microsoft FTP servers. Requires Python v2.7. Will not work with older versions of Python. Fixes ticket #37.</p> <p>WeatherUnderground passwords are now quoted, allowing special characters to be used. Fixes ticket #35.</p> <p>New tag $obs, allowing access to the contents of the skin configuration section [Labels][[Generic]]. Fixes ticket #33.</p> <p>Better error message if there's a parse error in the configuration file.</p> <p>Added wxformulas for evapotranspiration, humidex, apparent temperature, and other calculations.</p> <p>Added --loop-on-init option for weewxd. If set, the engine will keep retrying if the device cannot be loaded. Otherwise, it will exit.</p> <p>Changed the weedb exception model to bring it closer to the MySQL exception model. This will only affect those programming directly to the weedb API.</p>"},{"location":"changes/#301-120714","title":"3.0.1 12/07/14","text":"<p>Fixed bug in setup.py that would forget to insert device-specific options in weewx.conf during new installations.</p>"},{"location":"changes/#300-120414","title":"3.0.0 12/04/14","text":"<p>Big update with lots of changes and lots of new features. The overall goal was to make it easier to write and install extensions. Adding custom databases, units, accumulators and many other little things have been made easier.</p> <p>Skins and skin.conf continue to be 100% backwards compatible (since V1.5!).  However, search-list extensions will have to be rewritten. Details in the Upgrading Guide.</p> <p>Previously, configuration options for all possible devices were included in the configuration file, weewx.conf. Now, for new installs, it has been slimmed down to the minimum and, instead, configuration options are added on an \"as needed\" basis, using a new setup.py option \"configure\".</p> <p>Your configuration file, weewx.conf should be automatically updated to V3 by the upgrade process, using your previously chosen hardware. But, check it over. Not sure we got everything correct. See the Upgrading Guide.</p> <p>Specific changes follow.</p> <p>There is no longer a separate \"stats\" database. Instead, statistics are included in the regular database (e.g., 'weewx.sdb') as separate tables, one for each observation type.</p> <p>Total rewrite of how data gets bound to a database. You now specify a \"data binding\" to indicate where data should be going, and where it is coming from. The default binding is \"wx_binding,\" the weather binding, so most users will not have to change a thing.</p> <p>Other database bindings can be used in tags. Example:   $current($data_binding=$alt_binding).outTemp Alternate times can also be specified:   $current($timestamp=$othertime).outTemp</p> <p>Explicit time differences for trends can now be specified:   $trend($time_delta=3600).barometer</p> <p>Introduced a new tag $latest, which uses the last available timestamp in a data binding (which may or may not be the same as the \"current\" timestamp).</p> <p>Introduced a new tag $hours_ago, which returns the stats for X hours ago.  So, the max temperature last hour would be $hours_ago($hours_ago=1).outTemp.max.</p> <p>Introduced a shortcut $hour, which returns the stats for this hour. So, the high temperature for this hour would be $hour.outTemp.max</p> <p>Introduced a new tag $days_ago, which returns the stats for X days ago.  So, the max temperature the day before yesterday would be $days_ago($days_ago=2).outTemp.max.</p> <p>Included a shortcut $yesterday: The tag $yesterday.outTemp.max would be yesterday's max temperature.</p> <p>Introduced a new aggregation type \".last\", which returns the last value in an aggregation interval. E.g., $week.outTemp.last would return the last temperature seen in the week.</p> <p>Introduced a new aggregation type \".lasttime\" which returns the time of the above.</p> <p>Can now differentiate between the max speed seen in the archive records (e.g., $day.windSpeed.max) and the max gust seen ($day.wind.max or $day.windGust.max).</p> <p>Allow other data bindings to be used in images.</p> <p>Made it easier to add new unit types and unit groups.</p> <p>The archive interval can now change within a database without consequences.</p> <p>Total rewrite of how devices are configured. A single utility wee_config_device replaces each of the device-specific configuration utilities.</p> <p>The Customization Guide was extended with additional examples and option documentation.</p> <p>Removed the no longer needed serviced StdRESTful, obsolete since V2.6</p> <p>Fixed bug in querying for schemas that prevented older versions of MySQL (V4.X) from working.</p> <p>Improved error handling and retries for ws1, ultimeter, and cc3000 drivers.</p> <p>Fixed missing dew initializations in wmr9x8 driver.  Fixed model/_model initialization in wmr9x8 driver.</p> <p>Fixed uninitialized usb interface in wmr200 driver.</p> <p>Fixed wakup/wakeup typo in _getEEPROM_value in vantage driver.</p> <p>Made the ftpupload algorithm a little more robust to corruption of the file that records the last upload time.</p> <p>Added observation type 'snow'. It generally follows the semantics of 'rain'.</p> <p>Fixed possible fatal exception in WS23xx driver.  Fixed use of str as variable name in WS23xx driver.</p> <p>Now catches database exceptions raised during commits, converting them to weedb exceptions. Weewx catches these, allowing the program to keep going, even in the face of most database errors.</p> <p>For the fine offset stations, record connection status as rxCheckPercent (either 0 or 100%) and sensor battery status as outTempBatteryStatus (0 indicates ok, 1 indicates low battery).</p> <p>For WS23xx stations, hardware record generation is now enabled and is the default (previously, software record generation was the default).</p> <p>Fixed bug in WS28xx driver the prevented reading of historical records when starting with an empty database.</p> <p>The database schemas are now their own package. The schema that was in user/schemas.py can now be found in weewx/schemas/wview.py.</p>"},{"location":"changes/#270-101114","title":"2.7.0 10/11/14","text":"<p>Added the ability to configure new Vantage sensor types without using the console. This will be useful to Envoy users.  Thanks to user Deborah  Pickett for this contribution! </p> <p>Allow calibration constants to be set in the Vantage EEPROM. This will particularly be useful to southern hemisphere users who may want to align their ISS to true north (instead of south), then apply a 180 correction. Thanks again to Deborah Pickett!</p> <p>Enabled multiple rsync instances for a single weewx instance.</p> <p>More extensive debug information for rscync users.</p> <p>Added the ability to localize the weewx and server uptime. See the Customization Guide for details. This will also cause a minor backwards  incompatibility. See the Upgrading Guide for details.</p> <p>Added catchup to the WS28xx driver, but still no hardware record generation.</p> <p>Changed lux-to-W/m^2 conversion factor in the fine offset driver.</p> <p>Added rain rate calculation to Ultimeter driver.</p> <p>Changed setTime to retrieve system time directly rather than using a value passed by the engine. This greatly improves the accuracy of StdTimeSync, particularly in network based implementations. Thanks to user Denny Page!</p> <p>Moved clock synchronization options clock_check and max_drift back to section [StdTimeSynch].</p> <p>Fixed ENDPOINT_IN in the te923 driver.  This should provide better compatibility with a wider range of pyusb versions.</p> <p>Now catches MySQL exceptions during commits and rollbacks (as well as queries) and converts them to weedb exceptions.</p> <p>Catch and report configobj errors when reading skin.conf during the generation of reports.</p> <p>Ensure correct location, lat, lon, and altitude modifications in the debian postinst installer script.</p> <p>In the debian installer, default to ttyUSB0 instead of ttyS0 for stations with a serial interface.</p> <p>Added CC3000 to debian installer scripts.</p> <p>Fixed bug that can affect hardware that emits floating point timestamps, where the timestamp is within 1 second of the end of an archive interval.</p> <p>Changed UVBatteryStatus to uvBatteryStatus in the WMR100 driver in order to match the convention used by other drivers.</p> <p>Fixed the shebang for te923, ws23xx, ultimeter, ws1, and cc3000 drivers.</p>"},{"location":"changes/#264-061614","title":"2.6.4 06/16/14","text":"<p>The WMR100 driver now calculates SLP in software. This fixes a problem with the WMRS200 station, which does not allow the user to set altitude.</p> <p>The WMR100 driver was incorrectly tagging rain over the last 24 hours as rain since midnight. This caused a problem with WU and CWOP posts.</p> <p>Fix cosmetic problem in wee_config_fousb pressure calibration.</p> <p>Detect both NP (not present) and OFL (outside factory limits) on ws28xx.</p> <p>Added driver for PeetBros Ultimeter stations.</p> <p>Added driver for ADS WS1 stations.</p> <p>Added driver for RainWise Mark III stations and CC3000 data logger.</p> <p>Added automatic power cycling to the FineOffsetUSB driver.  Power cycle the station when a USB lockup is detected.  Only works with USB hubs that provide per-port power switching.</p> <p>Fix imagegenerator aggregation to permit data tables with no 'interval' column.</p> <p>Prompt for metric/US units for debian installations.</p> <p>For WS28xx stations, return 0 for battery ok and 1 for battery failure.</p> <p>If a connection to the console has been successfully opened, but then on subsequent connection attempts suffers an I/O error, weewx will now attempt a retry (before it would just exit).</p>"},{"location":"changes/#263-041014","title":"2.6.3 04/10/14","text":"<p>Hardened the WMR100 driver against malformed packets.</p> <p>The plot images can now use UTF-8 characters.</p> <p>Fixed a problem where the Ambient threads could crash if there were no rain database entries.</p> <p>Battery status values txBatteryStatus and consBatteryVoltage now appear in the archive record. The last LOOP value seen is used.  </p> <p>CWOP posts are now slightly more robust.</p> <p>Fixed pressure calculation in wee_config_fousb.</p> <p>Prevent failures in imagegenerator when no unicode-capable fonts are installed.</p> <p>Provide explicit pairing feedback using wee_config_ws28xx</p> <p>Count wxengine restarts in logwatch.</p> <p>Cleaned up USB initialization for fousb, ws28xx, and te923 drivers.</p>"},{"location":"changes/#262-021614","title":"2.6.2 02/16/14","text":"<p>Fixed bug that crashes WMR200 driver if outTemp is missing.</p> <p>Fixed bug that can crash RESTful threads if there is missing rain data.</p> <p>Sqlite connections can now explicitly specify a timeout and  isolation_level.</p> <p>Server uptime now reported for MacOS</p> <p>Fixed bug that prevented Rapidfire posts from being identified as such.</p>"},{"location":"changes/#261-020814","title":"2.6.1 02/08/14","text":"<p>Fixed bug that crashed main thread if a StdQC value fell out of range.</p>"},{"location":"changes/#260-020814","title":"2.6.0 02/08/14","text":"<p>Changed the RESTful architecture so RESTful services are now first-class weewx services. This should simplify the installation of 3rd party extensions that use these services.</p> <p>Broke up service_list, the very long list of services to be run, into five separate lists. This will allow services to be grouped together, according to when they should be run.</p> <p>Defined a structure for packaging customizations into extensions, and added an installer for those extensions to setup.py.</p> <p>Changed the default time and date labels to use locale dependent formatting. The defaults should now work in most locales, provided you set the environment variable LANG before running weewx.</p> <p>Changed default QC barometric low from 28 to 26. Added inTemp, inHumidity, and rain.</p> <p>Ranges in MinMax QC can now include units.</p> <p>When QC rejects values it now logs the rejection.</p> <p>Introduced a new unit system, METRICWX. Similar to METRIC, it uses mm for rain, mm/hr for rain rate, and m/s for speed.</p> <p>Added an option --string-check and --fix to the utility wee_config_database to fix embedded strings found in the sqlite archive database.</p> <p>Font handles are now cached in order to work around a memory leak in PIL.</p> <p>Now does garbage collection every 3 hours through the main loop.</p> <p>Image margins now scale with image and font sizes.</p> <p>Now works with the pure Python version of Cheetah's NameMapper, albeit very slowly.</p> <p>Fixed bug that prevented weewx from working with Python v2.5.</p> <p>Fixed bug in SummaryByMonth and SummaryByYear that would result in duplicate month/year entries when generating from multiple ByMonth or ByYear templates.</p> <p>Consolidated pressure calculation code in ws23xx, ws28xx, te923, and fousb.</p> <p>Catch USB failures when reading Fine Offset archive interval.</p> <p>Added Vantage types stormRain and windSpeed10 to the list of observation types.</p> <p>Simulator now generates types dewpoint, pressure, radiation, and UV.</p> <p>The forecast extension is once again distributed separately from weewx.</p> <p>Minor cleanup to Standard skin for better out-of-the-box behavior:  - default to no radar image instead of pointing every station to Oregon  - not every WMR100 is a WMR100N</p> <p>Failure to set an archive interval when using bar plots no longer results in an exception.</p> <p>Change to skin directory before invoking Cheetah on any templates.</p>"},{"location":"changes/#251-123013","title":"2.5.1 12/30/13","text":"<p>Added UV plots to the templates. They will be shown automatically if you have any UV data.</p> <p>Fixed bug when reading cooling_base option.</p> <p>Default to sane behavior if skin does not define Labels.</p> <p>Fixed bug in setting of CheetahGenerator options.</p> <p>Fixed qsf and qpf summary values in forecast module.</p> <p>Fixed handling of empty sky cover fields in WU forecasts.</p> <p>Forecast module now considers the fctcode, condition, and wx fields for precipitation and obstructions to visibility.</p> <p>Added options to forecast module to help diagnose parsing failures and new forecast formats.</p> <p>Added retries when saving forecast to database and when reading from database.</p> <p>Fixes to the Fine Offset driver to eliminate spikes caused by reading from memory before the pointer had been updated (not the same thing as an unstable read).</p> <p>Added driver for LaCrosse 2300 series of weather stations.</p> <p>Added driver for Hideki TE923 series of weather stations.</p>"},{"location":"changes/#250-102913","title":"2.5.0 10/29/13","text":"<p>Introduced a new architecture that makes it easier to define search list extensions. The old architecture should be 100% backwards compatible.</p> <p>Added station registry service. This allows weewx to optionally \"phone home\" and put your station location on a map.</p> <p>Added a forecast service and reporting options.  The forecast service can generate Zambretti weather or XTide tide forecasts, or it can download Weather Underground or US National Weather Service weather forecasts.  These data can then be displayed in reports using the Cheetah template engine.  The forecast service is disabled by default.</p> <p>Weewx now allows easier localization to non-English speaking locales. In particular, set the environment variable LANG to your locale, and then weewx date and number formatting will follow local conventions. There are also more labeling options in skin.conf. Details in a new section in the Customization Guide.</p> <p>Added aggregate type \"minmax\" and \"maxmin\". Thank you user Gary Roderick!</p> <p>New option in [StdArchive] called \"loop_hilo\". Setting to True will cause both LOOP and archive data to be used for high/low statistics. This is the default. Setting to False causes only archive data to be used.</p> <p>When a template fails, skip only that template, not everything that the generator is processing.</p> <p>Trend calculations no longer need a record at precisely (for example) 3 hours in the past. It can be within a \"grace\" period.</p> <p>FineOffset driver now uses the 'delay' field instead of the fixed_block 'read_period' for the archive record interval when reading records from console memory.</p> <p>FineOffset driver now support for multiple stations on the same USB.</p> <p>FineOffset driver now reduces logging verbosity when bad magic numbers appear. Log only when the numbers are unrecognized or change. The purpose of the magic numbers is still unknown.</p> <p>WMR100, Vantage, FineOffset, and WS28xx drivers now emit a null wind direction when the wind speed is zero.  Same for wind gust.</p> <p>For WMR9x8 stations, wind chill is now retrieved from the console rather than calculated in software. Thank you user Peter Ferencz!</p> <p>For WMR9x8 stations, the first extra temperature sensor (packet code 4) now shows up as extraTemp1 (instead of outTemp). Thanks again to  Peter Ferencz.</p> <p>For WMR9x8 stations, packet types 2 and 3 have been separated. Only the latter is used for outside temperature, humidity, dewpoint. The former is used for \"extra\" sensors. Corrected the calculation for channel numbers &gt;=3. Also, extended the number of battery codes. Thanks to Per Edstr\u00f6m for his patience in figuring this out!</p> <p>For WMR200 stations, altitude-corrected pressure is now emitted correctly.</p> <p>ws28xx driver improvements, including: better thread control; better logging for debugging/diagnostics; better timing to reduce dropouts; eliminate writes to disk to reduce wear when used on flash devices. Plus, support for multiple stations on the same USB.</p> <p>Fixed rain units in ws28xx driver.</p> <p>The LOOP value for daily ET on Vantages was too high by a factor of 10.  This has been corrected.</p> <p>Fixed a bug that caused values of ET to be miscalculated when using software record generation.</p> <p>Ported to Korora 19 (Fedora 19). Thanks to user zmodemguru!</p> <p>Plots under 16 hours in length, now use 1 hour increments (instead of  3 hours).</p> <p>No longer emits \"deprecation\" warning when working with some versions of the MySQLdb python driver.</p> <p>Added ability to build platform-specific RPMs, e.g., one for RedHat-based distributions and one for SuSE-based distributions.</p> <p>Fixed the 'stop' and 'restart' options in the SuSE rc script.</p> <p>The weewx logwatch script now recognizes more log entries and errors.</p>"},{"location":"changes/#240-080313","title":"2.4.0 08/03/13","text":"<p>The configuration utility wee_config_vantage now allows you to set DST to 'auto', 'off', or 'on'. It also lets you set either a time zone code, or a time zone offset.</p> <p>The service StdTimeSync now catches startup events and syncs the clock on them. It has now been moved to the beginning of the list \"service_list\" in weewx.conf. Users may want to do the same with their old configuration file.</p> <p>A new event, END_ARCHIVE_PERIOD has been added, signaling the end of the archive period.</p> <p>The LOOP packets emitted by the driver for the Davis Vantage series now includes the max wind gust and direction seen since the beginning of the current archive period.</p> <p>Changed the null value from zero (which the Davis documentation specifies) to 0x7fff for the VP2 type 'highRadiation'.</p> <p>Archive record packets with date and time equal to zero or 0xff now terminate dumps.</p> <p>The code that picks a filename for \"summary by\" reports has now been factored out into a separate function (getSummaryByFileName). This allows the logic to be changed by subclassing.</p> <p>Fixed a bug that did not allow plots with aggregations less than 60 minutes across a DST boundary.</p> <p>Fixed bug in the WMR100 driver that prevented UV indexes from being  reported.</p> <p>The driver for the LaCrosse WS-28XX weather series continues to evolve and mature. However, you should still consider it experimental.</p>"},{"location":"changes/#233-062113","title":"2.3.3 06/21/13","text":"<p>The option week_start now works.</p> <p>Updated WMR200 driver from Chris Manton.</p> <p>Fixed bug that prevented queries from being run against a MySQL database.</p>"},{"location":"changes/#232-061613","title":"2.3.2 06/16/13","text":"<p>Added support for the temperature-only sensor THWR800. Thanks to user fstuyk!</p> <p>Fixed bug that prevented overriding the FTP directory in section [[FTP]] of the configuration file.</p> <p>Day plots now show 24 hours instead of 27. If you want the old behavior, then change option \"time_length\" to 97200.</p> <p>Plots shorter than 24 hours are now possible. Thanks to user Andrew Tridgell.</p> <p>If one of the sections SummaryByMonth, SummaryByYear, or ToDate is missing, the report engine no longer crashes.</p> <p>If you live at a high latitude and the sun never sets, the Almanac now does the right thing.</p> <p>Fixed bug that caused the first day in the stats database to be left out of calculations of all-time stats.</p>"},{"location":"changes/#231-041513","title":"2.3.1 04/15/13","text":"<p>Fixed bug that prevented Fine Offset stations from downloading archive records if the archive database had no records in it.</p> <p>rsync should now work with Python 2.5 and 2.6 (not just 2.7)</p>"},{"location":"changes/#230-041013","title":"2.3.0 04/10/13","text":"<p>Davis Vantage stations can now produce station pressures (aka, \"absolute pressure\"), altimeter pressures, as well as sea-level pressure. These will be put in the archive database.</p> <p>Along the same line, 'altimeter' pressure is now reported to CWOP, rather than the 'barometer' pressure. If altimeter pressure is not available, no pressure is reported.</p> <p>Fixed bug in CWOP upload that put spaces in the upload string if the pressure was under 1000 millibars.</p> <p>A bad record archive type now causes a catch up to be abandoned, rather than program termination.</p> <p>Fixed bug in trends, when showing changes in temperature. NB: this fix will not work with explicit unit conversion. I.e., $trend.outTemp.degree_C will not work.</p> <p>Modified wee_config_vantage and wee_config_fousb so that the configuration file will be guessed if none is specified.</p> <p>Fixed wxformulas.heatindexC to handle arguments of None type.</p> <p>Fixed bug that causes Corrections to be applied twice to archive records if software record generation is used.</p> <p>rsync now allows a port to be specified.</p> <p>Fixed day/night transition bug.</p> <p>Added gradients to the day/night transitions.</p> <p>Numerous fixes to the WMR200 driver. Now has a \"watchdog\" thread.</p> <p>All of the device drivers have now been put in their own package 'weewx.drivers' to keep them together. Many have also had name changes to make them more consistent:     OLD                        NEW     VantagePro.py (Vantage)    vantage.py (Vantage)     WMR918.py     (WMR-918)    wmr9x8.py  (WMR9x8)     wmrx.py       (WMR-USB)    wmr100.py  (WMR100)</p> <pre><code>new (experimental) drivers:\nwmr200.py (WMR200)\nws28xx.py (WS28xx)\n</code></pre> <p>The interface to the device driver \"loader\" function has changed slightly. It now takes a second parameter, \"engine\". Details are in the Upgrading doc.</p> <p>The FineOffsetUSB driver now supports hardware archive record generation.</p> <p>When starting weewx, the FineOffsetUSB driver will now try to 'catch up' - it will read the console memory for any records that are not yet in the database.</p> <p>Added illuminance-to-radiation conversion in FineOffsetUSB driver.</p> <p>Added pressure calibration option to wee_config_fousb and explicit support for pressure calibration in FineOffsetUSB driver.</p> <p>Fixed windchill calculation in FineOffsetUSB driver.</p> <p>Fixed FineOffsetUSB driver to handle cases where the 'delay' is undefined, resulting in a TypeError that caused weewx to stop.</p> <p>The FineOffsetUSB driver now uses 'max_rain_rate' (measured in cm/hr) instead of 'max_sane_rain' (measured in mm) to filter spurious rain sensor readings. This is done in the driver instead of StdQC so that a single parameter can apply to both LOOP and ARCHIVE records.</p>"},{"location":"changes/#221-021513","title":"2.2.1 02/15/13","text":"<p>Added a function call to the Vantage driver that allows the lamp to be turned on and off. Added a corresponding option to wee_config_vantage.</p> <p>Fixed bug where an undefined wind direction caused an exception when using ordinal wind directions.</p>"},{"location":"changes/#220-021413","title":"2.2.0 02/14/13","text":"<p>Weewx can now be installed using Debian (DEB) or Redhat (RPM) packages, as well as with the old 'setup.py' method. Because they install things in different places, you should stick with one method or another. Don't mix and match. Thanks to Matthew Wall for putting this together!</p> <p>Added plot options line_gap_fraction and bar_gap_fraction, which control how gaps in the data are handled by the plots. Also, added more flexible control of plot colors, using a notation such as 0xBBGGRR, #RRGGBB, or the English name, such as 'yellow'. Finally, added day/night bands to the plots. All contributed by Matthew Wall. Thanks again, Matthew!</p> <p>Ordinal wind directions can now be shown, just by adding the tag suffix \".ordinal_compass\". For example, $current.windDir.ordinal_compass might show 'SSE' The abbreviations are set in the skin configuration file.</p> <p>Fixed bug that caused rain totals to be misreported to Weather Underground when using a metric database.</p> <p>Generalized the weewx machinery so it can be used for applications other than weather applications.</p> <p>Got rid of option stats_types in weewx.conf and put it in bin/user/schemas.py. See upgrading.html if you have a specialized stats database.</p> <p>The stats database now includes an internal table of participating observation types. This allows it to be easily combined with the archive database, should you choose to do so. The table is automatically created for older stats databases.</p> <p>Added rain rate calculation to FineOffsetUSB driver.  Added adaptive polling option to FineOffsetUSB driver.  Fixed barometric pressure calculation for FineOffsetUSB driver.</p> <p>Changed the name of the utilities, so they will be easier to find in /usr/bin:   weewxd.py          -&gt; weewxd   runreports.py      -&gt; wee_reports   config_database.py -&gt; wee_config_database   config_vp.py       -&gt; wee_config_vantage   config_fousb.py    -&gt; wee_config_fousb</p>"},{"location":"changes/#211-010213","title":"2.1.1 01/02/13","text":"<p>Fixed bug that shows itself when one of the variables is 'None' when calculating a trend.</p>"},{"location":"changes/#210-010213","title":"2.1.0 01/02/13","text":"<p>Now supports the Oregon Scientific WMR918/968 series, courtesy of user William Page. Thanks, William!!</p> <p>Now supports the Fine Offset series of weather stations, thanks to user Matthew Wall. Thanks, Matthew!!</p> <p>Now includes a Redhat init.d script, contributed by Mark Jenks. Thanks, Mark!!</p> <p>Added rsync report type as an alternative to the existing FTP report. Another thanks to William Page!</p> <p>Fill color for bar charts can now be specified separately from the outline color, resulting in much more attractive charts. Another thanks to Matthew Wall!!</p> <p>Added a tag for trends. The barometer trend can now be returned as $trend.barometer. Similar syntax for other observation types.</p> <p>config_vp.py now returns the console version number if available (older consoles do not offer this).</p> <p>Hardware dewpoint calculations with the WMR100 seem to be unreliable below about 20F, so these are now done in software. Thanks to user Mark Jenks for sleuthing this.</p>"},{"location":"changes/#202-112312","title":"2.0.2 11/23/12","text":"<p>Now allows both the archive and stats data to be held in the same database.</p> <p>Improved chances of weewx.Archive being reused by allowing optional table name to be specified.</p>"},{"location":"changes/#201-110512","title":"2.0.1 11/05/12","text":"<p>Fixed problem with reconfiguring databases to a new unit system.</p>"},{"location":"changes/#200-110412","title":"2.0.0 11/04/12","text":"<p>A big release with lots of changes. The two most important are the support of additional weather hardware, and the support of the MySQL database.</p> <p>All skin configurations are backwardly compatible, but the configuration file, weewx.conf, is not. The install utility setup.py will install a fresh version, which you will then have to edit by hand.</p> <p>If you have written a custom service, see the upgrade guide on how to port your service to the new architecture.</p> <p>Added the ability to generate archive records in software, thus opening the door for supporting weather stations that do not have a logger.</p> <p>Support for the Oregon Scientific WMR100, the cheapest weather station I could find, in order to demonstrate the above!</p> <p>Added a software weather station simulator.</p> <p>Introduced weedb, a database-independent Python wrapper around sqlite3 and MySQLdb, which fixes some of their flaws.</p> <p>Ported everything to use weedb, and thus MySQL (as well as sqlite)</p> <p>Internally, the databases can now use either Metric units, or US Customary. NB: you cannot switch systems in the middle of a database. You have to stick to one or other other. However, the utility config_database.py does have a reconfigure option that allows copying the data to a new database, performing the conversion along the way. See the Customization Guide.</p> <p>You can now use \"mmHg\" as a unit of pressure.</p> <p>Added new almanac information, such as first and last quarter moons, and civil twilight.</p> <p>Changed the engine architecture so it is more event driven. It now uses callbacks, making it easier to add new event types.</p> <p>Added utility config_vp.py, for configuring the VantagePro hardware.</p> <p>Added utility config_database.py, for configuring the databases.</p> <p>Made it easier to write custom RESTful protocols. Thanks to user Brad, for the idea and the use case!</p> <p>The stats type 'squarecount' now contains the number of valid wind directions that went into calculating 'xsum' and 'ysum'. It used to be the number of valid wind speeds. Wind direction is now calculated using 'squarecount' (instead of 'count').</p> <p>Simplified and reduced the memory requirements of the CRC16 calculations.</p> <p>Improved test suites.</p> <p>Lots of little nips and tucks here and there, mostly to reduce the coupling between different modules. In particular, now a service generally gets configured only using its section of weewx.conf.</p> <p>I also worked hard at making sure that cursors, connections, files, and lots of other bits and pieces get properly closed instead of relying on garbage collection. Hopefully, this will reduce the long-term growth of memory usage.</p>"},{"location":"changes/#1141-070612","title":"1.14.1 07/06/12","text":"<p>Hardened retry strategy for the WeatherLink IP. If the port fails to open at all, or a socket error occurs, it will thrown an exception (resulting in a retry in 60 seconds). If a socket returns an incomplete result, it will continue to retry until everything has been read.</p> <p>Fixed minor bug that causes the reporting thread to prematurely terminate if an exception is thrown while doing an FTP.</p>"},{"location":"changes/#1140-061812","title":"1.14.0 06/18/12","text":"<p>Added smartphone formatted mobile webpage, contributed by user Torbj\u00f6rn Einarsson. If you are doing a fresh install, then these pages will be generated automatically. If you are doing an upgrade, then see the upgrade guide on how to have these webpages generated. Thanks, Tobbe!</p> <p>Three changes suggested by user Charlie Spirakis: o Changed umask in daemon.py to 0022; o Allow location of process ID file to be specified on the command line of weewx; o Start script allows daemon to be run as a specific user. Thanks, Charlie!</p> <p>Corrected bug in humidity reports to CWOP that shows itself when the humidity is in the single digits.</p> <p>Now includes software in CWOP APRS equipment field.</p>"},{"location":"changes/#1132-050212","title":"1.13.2 05/02/12","text":"<p>Now allows CWOP stations with prefix 'EW'.</p> <p>Fixed bug that showed itself in the line color with plots with 3 or more lines.</p> <p>Changed debug message when reaching the end of memory in the VP2 to something slightly less alarming.</p>"},{"location":"changes/#1131-032512","title":"1.13.1 03/25/12","text":"<p>Added finer control over the line plots. Can now add optional markers. The marker_type can be 'none' (the default), 'cross', 'box', 'circle', or 'x'. Also, line_type can now either be 'solid' (the default) or 'none' (for scatter plots). Same day I'll add 'dashed', but not now. :-)</p> <p>Conditionally imports sqlite3. If it does not support the \"with\" statement, then imports pysqlite2 as sqlite3.</p>"},{"location":"changes/#1130-031312","title":"1.13.0 03/13/12","text":"<p>The binding to the SQL database to be used now happens much later when running reports. This allows more than one database to be used when running a report. Extra databases can be specified in the option list for a report. I use this to display broadband bandwidth information, which was collected by a separate program. Email me for details on how to do this. Introducing this feature changed the signature of a few functions. See the upgrade guide for details.</p>"},{"location":"changes/#1124-021312","title":"1.12.4 02/13/12","text":"<p>User Alf H\u00f8gemark found an error in the encoding of solar data for CWOP and sent me a fix. Thanks, Alf!</p> <p>Now always uses \"import sqlite3\", resulting in using the version of pysqlite that comes with Python. This means the install instructions have been simplified.</p> <p>Now doesn't choke when using the (rare) Python version of NameMapper used by Cheetah.</p>"},{"location":"changes/#1123-020912","title":"1.12.3 02/09/12","text":"<p>Added start script for FreeBSD, courtesy of user Fabian Abplanalp. Thanks, Fabian!</p> <p>Added the ability to respond to a \"status\" query to the Debian startup script.</p> <p>RESTful posts can now recover from more HTTP errors.</p> <p>Station serial port can now recover from a SerialException error (usually caused when there is a process competing for the serial port).</p> <p>Continue to fiddle with the retry logic when reading LOOP data.</p>"},{"location":"changes/#1122-011812","title":"1.12.2 01/18/12","text":"<p>Added check for FTP error code '521' to the list of possibilities if a directory already exists. Thanks to user Clyde!</p> <p>More complete information when unable to load a module file. Thanks, Jason!</p> <p>Added a few new unit types to the list of possible target units when using explicit conversion. Thanks, Antonio!</p> <p>Discovered and fixed problem caused by the Davis docs giving the wrong \"resend\" code (should be decimal 21, not hex 21).</p> <p>Improved robustness of VantagePro configuration utility.</p> <p>Fixed problem where an exception gets thrown when changing VP archive interval.</p> <p>Simplified some of the logic in the VP2 driver.</p>"},{"location":"changes/#1121-110311","title":"1.12.1 11/03/11","text":"<p>Now corrects for rain bucket size if it is something other than the standard 0.01 inch bucket.</p>"},{"location":"changes/#1120-102911","title":"1.12.0 10/29/11","text":"<p>Added the ability to change bucket type, rain year start, and barometer calibration data in the console using the utility configure.py. Added option \"--info\", which queries the console and returns information about EEPROM settings. Changed configure.py so it can do hardware-specific configurations, in anticipation of supporting hardware besides the Davis series.</p> <p>Reorganized the documentation.</p>"},{"location":"changes/#1110-100611","title":"1.11.0 10/06/11","text":"<p>Added support for the Davis WeatherLinkIP. Thanks, Peter Nock and Travis Pickle!</p> <p>Added support for older Rev A type archive records.</p> <p>Added patch from user Dan Haller that sends UV and radiation data to the WeatherUnderground if available. Thanks, Dan!</p> <p>Added patch from user Marijn Vriens that allows fallback to the version of pysqlite that comes with many versions of Python. Thanks, Marijn!</p> <p>Now does garbage collection after an archive record is obtained and before the main loop is restarted.</p>"},{"location":"changes/#1102-041411","title":"1.10.2 04/14/11","text":"<p>Added RA and declination for the Sun and Moon to the Daily Almanac. Equinox and solstice are now displayed in chronological order. Same with new and full moons.</p> <p>Examples alarm.py and lowBattery.py now include more error checks, allow an optional 'subject' line to the sent email, and allow a comma separated list of recipients.</p>"},{"location":"changes/#1101-033011","title":"1.10.1 03/30/11","text":"<p>Substitutes US Units if a user does not specify anything (instead of exception KeyError).</p> <p>Almanac uses default temperature and pressure if they are 'None'.</p> <p>Prettied up web page almanac data in the case where pyephem has not been installed.</p> <p>Fixed up malformed CSS script weewx.css.</p>"},{"location":"changes/#1100-032911","title":"1.10.0 03/29/11","text":"<p>Added extensive almanac information if the optional package 'pyephem' has been installed</p> <p>Added a weewx \"favorite icon\" favicon.ico that displays in your browser toolbar.</p> <p>Added a mobile formatted HTML page, courtesy of user Vince Skahan (thanks, Vince!!).</p> <p>Tags can now be ended with a unit type to convert to a new unit. For example, say your pressure group (\"group_pressure\") has been set to show inHg. The normal tag notation of \"$day.barometer.avg\" will show something like \"30.05 inHg\". However, the tag \"$day.barometer.avg.mbar\" will show \"1017.5 mbar\".</p> <p>Added special tag \"exists\" to test whether an observation type exists. Example \"$year.foo.exists\" will return False if there is no type \"foo\" in the statistical database.</p> <p>Added special tag \"has_data\" to test whether an observation type exists and has a non-zero number of data points over the aggregation period. For example, \"$year.soilMoist1.has_data\" will return \"True\" if soilMoist1 both exists in the stats database and contains some data (meaning, you have the hardware).</p> <p>Y-axis plot labels (such as \"\u00b0F\") can now be overridden in the plot configuration section of skin.conf by using option \"y_label\".</p> <p>Added executable module \"runreports.py\" for running report generation only.</p> <p>Added package \"user\", which can contain any user extensions. This package will not get overridden in the upgrade process.</p> <p>Added the ability to reconfigure the main database, i.e., add or drop data types. Along the same line, statistical types can also be added or dropped. Email me for details on how to do this.</p> <p>Now makes all of the LOOP and archive data available to services. This includes new keys:</p> <p>LOOP data: 'extraAlarm1' 'extraAlarm2' 'extraAlarm3' 'extraAlarm4' 'extraAlarm5' 'extraAlarm6' 'extraAlarm7' 'extraAlarm8' 'forecastIcon' 'forecastRule' 'insideAlarm' 'outsideAlarm1' 'outsideAlarm2' 'rainAlarm' 'soilLeafAlarm1' 'soilLeafAlarm2' 'soilLeafAlarm3' 'soilLeafAlarm4' 'sunrise' 'sunset'</p> <p>Archive data: 'forecastRule' 'highOutTemp' 'highRadiation' 'highUV' 'lowOutTemp'</p> <p>Started a more formal test suite. There are now tests for the report generators. These are not included in the normal distribution, but can be retrieved from SourceForge via svn.</p>"},{"location":"changes/#193-020411","title":"1.9.3 02/04/11","text":"<p>Now correctly decodes temperatures from LOOP packets as signed shorts (rather than unsigned).</p> <p>Now does a CRC check on LOOP data.</p> <p>Changed VantagePro.accumulateLoop to make it slightly more robust.</p>"},{"location":"changes/#192-112010","title":"1.9.2 11/20/10","text":"<p>Now catches exception of type OverflowError when calculating celsius dewpoint. (Despite the documentation indicating otherwise, math.log() can still throw an OverflowError)</p> <p>Fixed bug that causes crash in VantagePro.accumulateLoop() during fall DST transition in certain situations.</p> <p>VP2 does not store records during the one hour fall DST transition. Improved logic in dealing with this.</p> <p>Changed install so that it backs up the ./bin subdirectory, then overwrites the old one. Also, does not install the ./skins subdirectory at all if one already exists (thus preserving any user customization).</p>"},{"location":"changes/#191-090910","title":"1.9.1 09/09/10","text":"<p>Now catches exceptions of type httplib.BadStatusLine when doing RESTful posts.</p> <p>Added an extra decimal point of precision to dew point reports to the Weather Underground and PWS.</p>"},{"location":"changes/#190-070410","title":"1.9.0 07/04/10","text":"<p>Added a new service, StdQC, that offers a rudimentary data check.</p> <p>Corrected error in rain year total if rain year does not start in January.</p> <p>Moved option max_drift (the max amount of clock drift to tolerate) to section [Station].</p> <p>Added check for a bad storm start time.</p> <p>Added checks for bad dateTime.</p> <p>Simplified VantagePro module.</p>"},{"location":"changes/#184-060610","title":"1.8.4 06/06/10","text":"<p>Fixed problem that shows itself if weewx starts up at precisely the beginning of an archive interval. Symptom is max recursion depth exceeded.</p> <p>Units for UV in LOOP records corrected. Also, introduced new group for UV, group_uv_index. Thanks to user A. Burriel for this fix!</p>"},{"location":"changes/#183-052010","title":"1.8.3 05/20/10","text":"<p>Problem with configuring archive interval found and fixed by user A. Burriel (thanks, Antonio!)</p>"},{"location":"changes/#182-050910","title":"1.8.2 05/09/10","text":"<p>Added check to skip calibration for a type that doesn't exist in LOOP or archive records. This allows windSpeed and windGust to be calibrated separately.</p>"},{"location":"changes/#181-050110","title":"1.8.1 05/01/10","text":"<p>Ported to Cheetah V2.4.X</p>"},{"location":"changes/#180-042810","title":"1.8.0 04/28/10","text":"<p>Added CWOP support.</p> <p>Storage of LOOP and archive data into the SQL databases is now just another service, StdArchive.</p> <p>Added a calibration service, StdCalibrate, that can correct LOOP and archive data.</p> <p>Average console battery voltage is now calculated from LOOP data, and saved to the archive as 'consBatteryVoltage'.</p> <p>Transmitter battery status is now ORd together from LOOP data, and saved to the archive as 'txBatteryStatus'.</p> <p>Added stack tracebacks for unrecoverable exceptions.</p> <p>Added a wrapper to the serial port in the VantagePro code. When used in a Python \"with\" statement, it automatically releases the serial port if an exception happens, allowing a more orderly shutdown.</p> <p>Offered some hints in the documentation on how to automount your VP2 when using a USB connection.</p> <p>Corrected error in units. getTargetType() that showed itself with when the console memory was freshly cleared, then tried to graph something immediately.</p>"},{"location":"changes/#170-041510","title":"1.7.0 04/15/10","text":"<p>Big update.</p> <p>Reports now use skins for their \"look or feel.\" Options specific to the presentation layer have been moved out of the weewx configuration file 'weewx.conf' to a skin configuration file, 'skin.conf'. Other options have remained behind.</p> <p>Because the configuration file weewx.conf was split, the installation script setup.py will NOT merge your old configuration file into the new one. You will have to reedit weewx.conf to put in your customizations.</p> <p>FTP is treated as just another report, albeit with an unusual generator. You can have multiple FTP sessions, each to a different server, or uploading to or from a different area.</p> <p>Rewrote the FTP upload package so that it allows more than one FTP session to be active in the same local directory. This version also does fewer hits on the server, so it is significantly faster.</p> <p>The configuration files weewx.conf and skin.conf now expect UTF-8 characters throughout.</p> <p>The encoding for reports generated from templates can be chosen. By default, the day, week, month, and year HTML files are encoded using HTML entities; the NOAA reports encoded using 'strict ascii.' Optionally, reports can be encoded using UTF-8.</p> <p>Revamped the template formatting. No longer use class ModelView. Went to a simpler system built around classes ValueHelper and UnitInfo.</p> <p>Optional formatting was added to all tags in the templates. There are now optional endings: 'string': Use specified string for None value. 'formatted': No label. 'format': Format using specified string format. 'nolabel': Format using specified string format; no label. 'raw': return the underlying data with no string formatting or label.</p> <p>For the index, week, month, and year template files, added conditional to not include ISS extended types (UV, radiation, ET) unless they exist.</p> <p>Added an RSS feed.</p> <p>Added support for PWSweather.com</p> <p>Both WeatherUnderground and PWSweather posts are now retried up to 3 times before giving up.</p> <p>Now offer a section 'Extras' in the skin configuration file for including tags added by the user. As an example, the tag radar_url has been moved into here.</p> <p>Data files used in reports (such as weewx.css) are copied over to the HTML directory on program startup.</p> <p>Included an example of a low-battery alarm.</p> <p>Rearranged distribution directory structure so that it matches the install directory structure.</p> <p>Moved base temperature for heating and cooling degree days into skin.conf. They now also require a unit.</p> <p>Now require unit to be specified for 'altitude'.</p>"},{"location":"changes/#150-030710","title":"1.5.0 03/07/10","text":"<p>Added support for other units besides the U.S. Customary. Plots and HTML reports can be prepared using any arbitrary combination of units. For example, pressure could be in millibars, while everything else is in U.S. Customary.</p> <p>Because the configuration file weewx.conf changed significantly, the installation script setup.py will NOT merge your old configuration file into the new one. You will have to reedit weewx.conf to put in your customizations.</p> <p>Added an exception handler for exception OSError, which is typically thrown when another piece of software attempts to access the same device port. Weewx catches the exception, waits 10 seconds, then starts again from the top.</p>"},{"location":"changes/#140-022210","title":"1.4.0 02/22/10","text":"<p>Changed the architecture of stats.py to one that uses very late binding. The SQL statements are not run until template evaluation. This reduces the amount of memory required (by about 1/2), reduces memory fragmentation, as well as greatly simplifying the code (file stats.py shed over 150 lines of non-test code). Execution time is slightly slower for NOAA file generation, slightly faster for HTML file generation, the same for image generation, although your actual results will depend on your disk speed.</p> <p>Now possible to tell weewx to reread the configuration file without stopping it. Send signal HUP to the process.</p> <p>Added option week_start, for specifying which day a calendar week starts on. Default is 6 (Sunday).</p> <p>Fixed reporting bug when the reporting time falls on a calendar month or year boundary.</p>"},{"location":"changes/#134-020810","title":"1.3.4 02/08/10","text":"<p>Fixed problem when plotting data where all data points are bad (None).</p>"},{"location":"changes/#133-011010","title":"1.3.3 01/10/10","text":"<p>Fixed reporting bug that shows itself if rain year does not start in January.</p>"},{"location":"changes/#132-122609","title":"1.3.2 12/26/09","text":"<p>LOOP data added to stats database.</p>"},{"location":"changes/#131-122209","title":"1.3.1 12/22/09","text":"<p>Added a call to syslog.openlog() that inadvertently got left out when switching to the engine driven architecture.</p>"},{"location":"changes/#130-122109","title":"1.3.0 12/21/09","text":"<p>Moved to a very different architecture to drive weewx. Consists of an engine, that manages a list of 'services.' At key events, each service is given a chance to participate. Services are easy to add, to allow easy customization. An example is offered of an 'alarm' service.</p> <p>Checking the clock of the weather station for drift is now a service, so the option clock_check was moved from the station specific [VantagePro] section to the more general [Station] section.</p> <p>Added an example service 'MyAlarm', which sends out an email should the outside temperature drop below 40 degrees.</p> <p>In a similar manner, all generated files, images, and reports are the product of a report engine, which can run any number of reports. New reports are easily added.</p> <p>Moved the compass rose used in progressive vector plots into the interior of the plot.</p> <p>Install now deletes public_html/#upstream.last, thus forcing all files to be uploaded to the web server at the next opportunity.</p>"},{"location":"changes/#120-112209","title":"1.2.0 11/22/09","text":"<p>Added progressive vector plots for wind data.</p> <p>Improved axis scaling. The automatic axis scaling routine now does a better job for ranges less than 1.0. The user can also hardwire in min and max values, as well as specify a minimum increment, through parameter 'yscale' in section [Images] in the configuration file.</p> <p>Now allows the same SQL type to be used more than once in a plot. This allows, say, instantaneous and average wind speed to be shown in the same plot.</p> <p>Rain year is now parameterized in file templates/year.tmpl (instead of being hardwired in).</p> <p>Now does LOOP caching by default.</p> <p>When doing backfilling to the stats database, configure now creates the stats database if it doesn't already exist.</p> <p>setup.py now more robust to upgrading the FTP and Wunderground sections</p>"},{"location":"changes/#110-111409","title":"1.1.0 11/14/09","text":"<p>Added the ability to cache LOOP data. This can dramatically reduce the number of writes to the stats database, reducing wear on solid-state disk stores.</p> <p>Introduced module weewx.mainloop. Introduced class weewx.mainloop.MainLoop This class offers many opportunities to customize weewx through subclassing, then overriding an appropriate member function.</p> <p>Refactored module weewx.wunderground so it more closely resembles the (better) logic in wunderfixer.</p> <p>setup.py no longer installs a daemon startup script to /etc/init.d. It must now be done by hand.</p> <p>setup.py now uses the 'home' value in setup.cfg to set WEEWX_ROOT in weewx.conf and in the daemon start up scripts</p> <p>Now uses FTP passive mode by default.</p>"},{"location":"changes/#101-110909","title":"1.0.1 11/09/09","text":"<p>Fixed bug that prevented backfilling the stats database after modifying the main archive.</p>"},{"location":"changes/#100-102609","title":"1.0.0 10/26/09","text":"<p>Took the module weewx.factory back out, as it was too complicated and hard to understand.</p> <p>Added support for generating NOAA monthly and yearly reports. Completely rewrote the filegenerator.py module, to allow easy subclassing and specialization.</p> <p>Completely rewrote the stats.py module. All aggregate quantities are now calculated dynamically.</p> <p>Labels for HTML generation are now held separately from labels used for image generation. This allows entities such as '\u00b0' to be used for the former.</p> <p>LOOP mode now requests only 200 LOOP records (instead of the old 2000). It then renews the request should it run out. This was to get around an (undocumented) limitation in the VP2 that limits the number of LOOP records that can be requested to something like 220. This was a problem when supporting VP2s that use long archive intervals.</p> <p>Cut down the amount of computing that went on before the processing thread was spawned, thus allowing the main thread to get back into LOOP mode more quickly.</p> <p>Added type 'rainRate' to the types decoded from a Davis archive record. For some reason it was left out.</p> <p>Added retries when doing FTP uploads. It will now attempt the upload several times before giving up.</p> <p>Much more extensive DEBUG analysis.</p> <p>Nipped and tucked here and there, trying to simplify.</p>"},{"location":"changes/#065-101109","title":"0.6.5 10/11/09","text":"<p>Ported to Cheetah V2.2.X. Mostly, this is making sure that all strings that cannot be converted with the 'ascii' codec are converted to Unicode first before feeding to Cheetah.</p>"},{"location":"changes/#064-092209","title":"0.6.4 09/22/09","text":"<p>Fixed an error in the calculation of heat index.</p>"},{"location":"changes/#063-082509","title":"0.6.3 08/25/09","text":"<p>FTP transfers now default to ACTIVE mode, but a configuration file option allows PASSIVE mode. This was necessary to support Microsoft FTP servers.</p>"},{"location":"changes/#062-080109","title":"0.6.2 08/01/09","text":"<p>Exception handling in weewx/ftpdata.py used socket.error but failed to declare it. Added 'import socket' to fix.</p> <p>Added more complete check for unused pages in weewx/VantagePro.py. Now the entire record must be filled with 0xff, not just the time field. This fixes a bug where certain time stamps could look like unused records.</p>"},{"location":"changes/#061-062209","title":"0.6.1 06/22/09","text":"<p>Fixed minor ftp bug.</p>"},{"location":"changes/#060-052009","title":"0.6.0 05/20/09","text":"<p>Changed the file, imaging, ftping functions into objects, so they can be more easily specialized by the user.</p> <p>Introduced a StationData object.</p> <p>Introduced module weewx.factory that produces these things, so the user has a place to inject his/her new types.</p>"},{"location":"changes/#051-051309","title":"0.5.1 05/13/09","text":"<ol> <li> <p>Weather Underground thread now run as daemon thread, allowing the program to exit even if it is running.</p> </li> <li> <p>WU queue now hold an instance of archive and the time to be published, rather than a record. This allows dailyrain to be published as well.</p> </li> <li> <p>WU date is now given in the format \"2009-05-13+12%3A35%3A00\" rather than \"2009-05-13 12:35:00\". Seems to be more reliable. But, maybe I'm imagining things...</p> </li> </ol>"},{"location":"copyright/","title":"WeeWX Copyright","text":"<p>Copyright 2009-2023 by Thomas Keffer (tkeffer@gmail.com), Matthew Wall, and Gary Roderick.</p> <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p> <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p> <p>http://www.gnu.org/licenses</p> <p>The WMR9x8 driver is Copyright Will Page.</p> <p>The FineOffsetUSB driver is Copyright Matthew Wall, based on the open source pywws by Jim Easterbrook.</p> <p>The WS23xx driver is Copyright Matthew Wall, including significant portions from ws2300 by Russel Stuart.</p> <p>The WS28xx driver is Copyright Matthew Wall, based on the original Python implementation by Eddi de Pieri and with significant contributions by LJM Heijst.</p> <p>The TE923 driver is Copyright Matthew Wall with significant contributions from Andrew Miles.</p> <p>The CC3000 driver is Copyright Matthew Wall, thanks to hardware contributed by Annie Brox.</p> <p>The WS1 driver is Copyright Matthew Wall.</p> <p>The Ultimeter driver is Copyright Matthew Wall and Nate Bargmann.</p> <p>The Acurite driver is Copyright Matthew Wall.</p> <p>The WMR300 driver is Copyright Matthew Wall, thanks to hardware contributed by EricG.</p> <p>Some icons are Copyright Tatice (http://tatice.deviantart.com), licensed under the terms of Creative Commons Attribution-NonCommercial-NoDerivs 3.0.</p> <p>The debian, redhat, and suse packaging configurations are Copyright Matthew Wall, licensed under the terms of GNU Public License 3.</p>"},{"location":"devnotes/","title":"Notes for WeeWX developers","text":"<p>This guide is intended for developers contributing to the open source project WeeWX.</p>"},{"location":"devnotes/#goals","title":"Goals","text":"<p>The primary design goals of WeeWX are:</p> <ul> <li> <p>Architectural simplicity. No semaphores, no named pipes, no     inter-process communications, no complex multi-threading to manage.</p> </li> <li> <p>Extensibility. Make it easy for the user to add new features or to     modify existing features.</p> </li> <li> <p>Fast enough In any design decision, architectural simplicity and     elegance trump speed.</p> </li> <li> <p>One code base. A single code base should be used for all platforms,     all weather stations, all reports, and any combination of features.     Ample configuration and customization options should be provided so     the user does not feel tempted to start hacking code. At worse, the     user may have to subclass, which is much easier to port to newer     versions of the code base, than customizing the base code.</p> </li> <li> <p>Minimal dependencies. The code should rely on a minimal number of     external packages, so the user does not have to go chase them down     all over the Web before getting started.</p> </li> <li> <p>Simple data model. The implementation should use a very simple data     model that is likely to support many different types of hardware.</p> </li> <li> <p>A pythonic code base. The code should be written in a style that     others will recognize.</p> </li> </ul>"},{"location":"devnotes/#strategies","title":"Strategies","text":"<p>To meet these goals, the following strategies were used:</p> <ul> <li> <p>A micro-kernel design. The WeeWX engine actually does very     little. Its primary job is to load and run services at runtime,     making it easy for users to add or subtract features.</p> </li> <li> <p>A largely stateless design style. For example, many of the     processing routines read the data they need directly from the     database, rather than caching it and sharing with other routines.     While this means the same data may be read multiple times, it also     means the only point of possible cache incoherence is through the     database, where transactions are easily controlled. This greatly     reduces the chances of corrupting the data, making it much easier to     understand and modify the code base.</p> </li> <li> <p>Isolated data collection and archiving. The code for collecting and     archiving data run in a single thread that is simple enough that it     is unlikely to crash. The report processing is where most mistakes     are likely to happen, so isolate that in a separate thread. If it     crashes, it will not affect the main data thread.</p> </li> <li> <p>A powerful configuration parser. The     ConfigObj module, by Michael     Foord and Nicola Larosa, was chosen to read the configuration file.     This allows many options that might otherwise have to go in the     code, to be in a configuration file.</p> </li> <li> <p>A powerful templating engine. The     Cheetah module was chosen for     generating html and other types of files from templates. Cheetah     allows search list extensions to be defined, making it easy to     extend WeeWX with new template tags.</p> </li> <li> <p>Pure Python. The code base is 100% Python \u2014 no underlying C     libraries need be built to install WeeWX. This also means no     Makefiles are needed.</p> </li> </ul> <p>While WeeWX is nowhere near as fast at generating images and HTML as its predecessor, wview (this is partially because WeeWX uses fancier fonts and a much more powerful templating engine), it is fast enough for all platforms but the slowest. I run it regularly on a 500 MHz machine where generating the 9 images used in the Current Conditions page takes just under 2 seconds (compared with 0.4 seconds for wview).</p> <p>All writes to the databases are protected by transactions. You can kill the program at any time without fear of corrupting the databases.</p> <p>The code makes ample use of exceptions to insure graceful recovery from problems such as network outages. It also monitors socket and console timeouts, restarting whatever it was working on several times before giving up. In the case of an unrecoverable console error (such as the console not responding at all), the program waits 60 seconds then restarts the program from the top.</p> <p>Any hard exceptions, that is those that do not involve network and console timeouts and are most likely due to a logic error, are logged, reraised, and ultimately cause thread termination. If this happens in the main thread (not likely due to its simplicity), then this causes program termination. If it happens in the report processing thread (much more likely), then only the generation of reports will be affected \u2014 the main thread will continue downloading data off the instrument and putting them in the database.</p>"},{"location":"devnotes/#units","title":"Units","text":"<p>In general, there are three different areas where the unit system makes a difference:</p> <ol> <li> <p>On the weather station hardware. Different manufacturers use     different unit systems for their hardware. The Davis Vantage series     use U.S. Customary units exclusively, Fine Offset and LaCrosse     stations use metric, while Oregon Scientific, Peet Bros, and Hideki     stations use a mishmash of US and metric.</p> </li> <li> <p>In the database. Either US or Metric can be used.</p> </li> <li> <p>In the presentation (i.e., html and image files).</p> </li> </ol> <p>The general strategy is that measurements are converted by service <code>StdConvert</code> as they come off the weather station into a target unit system, then stored internally in the database in that unit system. Then, as they come off the database to be used for a report, they are converted into a target unit, specified by a combination of the configuration file <code>weewx.conf</code> and the skin configuration file <code>skin.conf</code>.</p>"},{"location":"devnotes/#value-none","title":"Value <code>None</code>","text":"<p>The Python special value <code>None</code> is used throughout to signal an invalid or bad data point. All functions must be written to expect it.</p> <p>Device drivers should be written to emit <code>None</code> if a data value is bad (perhaps because of a failed checksum). If the hardware simply doesn't support a data type, then the driver should not emit a value at all.</p> <p>The same rule applies to derived values. If the input data for a derived value are missing, then no derived value should be emitted. However, if the input values are present, but have value <code>None</code>, then the derived value should be set to <code>None</code>.</p> <p>However, the time value must never be <code>None</code>. This is because it is used as the primary key in the SQL database.</p>"},{"location":"devnotes/#time","title":"Time","text":"<p>WeeWX stores all data in UTC (roughly, Greenwich or Zulu) time. However, usually one is interested in weather events in local time and want image and HTML generation to reflect that. Furthermore, most weather stations are configured in local time. This requires that many data times be converted back and forth between UTC and local time. To avoid tripping up over time zones and daylight savings time, WeeWX generally uses Python routines to do this conversion. Nowhere in the code base is there any explicit recognition of DST. Instead, its presence is implicit in the conversions. At times, this can cause the code to be relatively inefficient.</p> <p>For example, if one wanted to plot something every 3 hours in UTC time, it would be very simple: to get the next plot point, just add 10,800 to the epoch time:</p> <pre><code>next_ts = last_ts + 10800 \n</code></pre> <p>But, if one wanted to plot something for every 3 hours in local time (that is, at 0000, 0300, 0600, etc.), despite a possible DST change in the middle, then things get a bit more complicated. One could modify the above to recognize whether a DST transition occurs sometime between <code>last_ts</code> and the next three hours and, if so, make the necessary adjustments. This is generally what <code>wview</code> does. WeeWX takes a different approach and converts from UTC to local, does the arithmetic, then converts back. This is inefficient, but bulletproof against changes in DST algorithms, etc.:</p> <pre><code>time_dt = datetime.datetime.fromtimestamp(last_ts)\ndelta = datetime.timedelta(seconds=10800)\nnext_dt = time_dt + delta\nnext_ts = int(time.mktime(next_dt.timetuple()))\n</code></pre> <p>Other time conversion problems are handled in a similar manner.</p> <p>For astronomical calculations, WeeWX uses the latitude and longitude specified in the configuration file. If that location does not correspond to the computer's local time, reports with astronomical times will probably be incorrect.</p>"},{"location":"devnotes/#archive-records","title":"Archive records","text":"<p>An archive record's timestamp, whether in software or in the database, represents the end time of the record. For example, a record timestamped 05-Feb-2016 09:35, includes data from an instant after 09:30, through 09:35. Another way to think of it is that it is exclusive on the left, inclusive on the right. Schematically:</p> <pre><code>09:30 &lt; dateTime &lt;= 09:35\n</code></pre> <p>Database queries should reflect this. For example, to find the maximum temperature for the hour between timestamps 1454691600 and 1454695200, the query would be:</p> <pre><code>SELECT MAX(outTemp) FROM archive \n  WHERE dateTime &gt; 1454691600 and dateTime &lt;= 1454695200;\n</code></pre> <p>This ensures that the record at the beginning of the hour (1454691600) does not get included (it belongs to the previous hour), while the record at the end of the hour (1454695200) does.</p> <p>One must be constantly be aware of this convention when working with timestamped data records.</p> <p>Better yet, if you need this kind of information, use an xtypes call:</p> <pre><code>max_temp = weewx.xtypes.get_aggregate('outTemp',\n                                      (1454691600, 1454695200),\n                                      'max',\n                                      db_manager)\n</code></pre> <p>It will not only make sure the limits of the query are correct, but will also decide whether the daily summary optimization can be used (details below). If not, it will use the regular archive table.</p>"},{"location":"devnotes/#internationalization","title":"Internationalization","text":"<p>Generally, WeeWX is locale aware. It will emit reports using the local formatting conventions for date, times, and values.</p>"},{"location":"devnotes/#exceptions","title":"Exceptions","text":"<p>In general, your code should not simply swallow an exception. For example, this is bad form:</p> <pre><code>    try:\n        os.rename(oldname, newname)\n    except:\n        pass\n</code></pre> <p>While the odds are that if an exception happens it will be because the file <code>oldname</code> does not exist, that is not guaranteed. It could be because of a keyboard interrupt, or a corrupted file system, or something else. Instead, you should test explicitly for any expected exception, and let the rest go by:</p> <pre><code>    try:\n        os.rename(oldname, newname)\n    except OSError:\n        pass\n</code></pre> <p>WeeWX has a few specialized exception types, used to rationalize all the different types of exceptions that could be thrown by the underlying libraries. In particular, low-level I/O code can raise a myriad of exceptions, such as USB errors, serial errors, network connectivity errors, etc. All device drivers should catch these exceptions and convert them into an exception of type <code>WeeWxIOError</code> or one of its subclasses.</p>"},{"location":"devnotes/#naming-conventions","title":"Naming conventions","text":"<p>How you name variables makes a big difference in code readability. In general, long names are preferable to short names. Instead of this,</p> <pre><code>p = 990.1\n</code></pre> <p>use this,</p> <pre><code>pressure = 990.1\n</code></pre> <p>or, even better, this:</p> <pre><code>pressure_mbar = 990.1\n</code></pre> <p>WeeWX uses a number of conventions to signal the variable type, although they are not used consistently.</p> Variable suffix conventions Suffix Example Description _ts first_ts Variable is a timestamp in unix epoch time. _dt start_dt Variable is an instance of datetime.datetime, usually in local time. _d end_d Variable is an instance of datetime.date, usually in local time. _tt sod_tt Variable is an instance of time.struct_time (a time tuple), usually in local time. _vh pressure_vh Variable is an instance of weewx.units.ValueHelper. _vt speed_vt Variable is an instance of weewx.units.ValueTuple."},{"location":"devnotes/#code-style","title":"Code style","text":"<p>Generally, we try to follow the PEP 8 style guide, but there are many exceptions. In particular, many older WeeWX function names use camelCase, but PEP 8 calls for snake_case. Please use snake_case for new code.</p> <p>Most modern code editors, such as Eclipse, or PyCharm, have the ability to automatically format code. Resist the temptation and don't use this feature! Two reasons:</p> <ul> <li> <p>Unless all developers use the same tool, using the same settings, we     will just thrash back and forth between slightly different versions.</p> </li> <li> <p>Automatic formatters play a useful role, but some of what they do     are really trivial changes, such as removing spaces in otherwise     blank lines. Now if someone is trying to figure out what real,     syntactic, changes you have made, s/he will have to wade through all     those extraneous changed lines, trying to find the important     stuff.</p> </li> </ul> <p>If you are working with a file where the formatting is so ragged that you really must do a reformat, then do it as a separate commit. This allows the formatting changes to be clearly distinguished from more functional changes.</p> <p>When invoking functions or instantiating classes, use the fully qualified name. Don't do this:</p> <pre><code>from datetime import datetime\nnow = datetime()\n</code></pre> <p>Instead, do this:</p> <pre><code>import datetime\nnow = datetime.datetime()\n</code></pre>"},{"location":"devnotes/#git-work-flow","title":"Git work flow","text":"<p>We use Git as the source control system. If Git is still mysterious to you, bookmark this: Pro Git, then read the chapter Git Basics. Also recommended is the article How to Write a Git Commit Message.</p> <p>The code is hosted on GitHub. Their documentation is very extensive and helpful.</p> <p>We generally follow Vincent Driessen's branching model. Ignore the complicated diagram at the beginning of the article, and just focus on the text. In this model, there are two key branches:</p> <ul> <li> <p>'master'. Fixes go into this branch. We tend to use fewer     hot fix branches and, instead, just incorporate any fixes     directly into the branch. Releases are tagged relative to this     branch.</p> </li> <li> <p>'development' (called <code>develop</code> in Vince's article).     This is where new features go. Before a release, they will be merged     into the <code>master</code> branch.</p> </li> </ul> <p>What this means to you is that if you submit a pull request that includes a new feature, make sure you commit your changes relative to the development branch. If it is just a bug fix, it should be committed against the <code>master</code> branch.</p>"},{"location":"devnotes/#forking-the-repository","title":"Forking the repository","text":"<p>The WeeWX GitHub repository is configured to use  GitHub Actions to run Continuous Integration (CI) workflows automatically if certain <code>git</code> operations are done on branches under active development.</p> <p>This means that CI workflows will also be run on any forks that you may have made if the configured <code>git</code> action is done. This can be confusing if you get an email from GitHub if these tasks fail for some reason on your fork.</p> <p>To control GitHub Actions for your fork, see the recommended solutions in this GitHub discussion on this topic.</p>"},{"location":"devnotes/#tools","title":"Tools","text":""},{"location":"devnotes/#python","title":"Python","text":"<p>JetBrain's PyCharm is exellent, and now there's a free Community Edition. It has many advanced features, yet is structured that you need not be exposed to them until you need them. Highly recommended.</p>"},{"location":"devnotes/#html-and-javascript","title":"HTML and Javascript","text":"<p>For Javascript, JetBrain's WebStorm is excellent, particularly if you will be using a framework such as Node.js or Express.js.</p>"},{"location":"devnotes/#daily-summaries","title":"Daily summaries","text":"<p>This section builds on the discussion The database in the Customization Guide. Read it first.</p> <p>The big flat table in the database (usually called table <code>archive</code>) is the definitive table of record. While it includes a lot of information, querying it can be slow. For example, to find the maximum temperature of the year would require scanning the entire table, which might include 100,000 or more records. To speed things up, WeeWX includes daily summaries in the database as an optimization.</p> <p>In the daily summaries, each observation type gets its own table, which holds a statistical summary for the day. For example, for outside temperature observation type <code>outTemp</code>, this table would be named <code>archive_day_outTemp</code>. This is what it would look like:</p> Structure of the archive_day_outTemp daily summary dateTime min mintime max maxtime sum count wsum sumtime 1652425200 44.7 1652511600 56.0 1652477640 38297.0 763 2297820.0 45780 1652511600 44.1 1652531280 66.7 1652572500 76674.4 1433 4600464.0 85980 1652598000 50.3 1652615220 59.8 1652674320 32903.0 611 1974180.0 36660 ... ... ... ... ... ... ... ... ... <p>This is what the table columns mean:</p> Name Meaning dateTime The time of the start of day in unix epoch time. This is the primary key in the database. It must be unique, and it cannot be null. min The minimum temperature seen for the day. The unit is whatever unit system the main archive table uses (generally given by the first record in the table). mintime The time in unix epoch time of the minimum temperature. max The maximum temperature seen for the day. The unit is whatever unit system the main archive table uses (generally given by the first record in the table). maxtime The time in unix epoch time of the maximum temperature. sum The sum of all the temperatures for the day. count The number of records in the day. wsum The weighted sum of all the temperatures for the day. The weight is the         archive interval in seconds. That is, for each record, the temperature         is multiplied by the length of the archive record in seconds, then          summed up. sumtime The sum of all the archive intervals for the day in seconds. If the          archive interval didn't change during the day, then this number would         be interval * 60 * count. <p>Note how the average temperature for the day can be calculated as <code>wsum / sumtime</code>. This will be true even if the archive interval changes during the day.</p> <p>Now consider an extensive variable such as <code>rain</code>. The total rainfall for the day will be given by the field <code>sum</code>. So, calculating the total rainfall for the year can be done by scanning and summing only 365 records, instead of potentially tens, or even hundreds, of thousands of records. This results in a dramatic speed up for report generation, particularly on slower machines such as the Raspberry Pi, working off an SD card.</p>"},{"location":"devnotes/#wind-summaries","title":"Wind summaries","text":"<p>The daily summary for wind includes six additional fields. This is what they mean:</p> Name Meaning max_dir The direction of the maximum wind seen for the day. xsum The sum of the x-component (east-west) of the wind for the day. ysum The sum of the y-component (north-south) of the wind for the day. dirsumtime The sum of all the archive intervals for the day in seconds,         which contributed to xsum          and ysum. squaresum The sum of the wind speed squared for the day. wsquaresum The sum of the weighted wind speed squared for the day. That is the         wind speed is squared, then multiplied by the archive interval in          seconds, then summed for the day. This is useful for calculating         RMS wind speed. <p>Note that the RMS wind speed can be calculated as</p> <pre><code>math.sqrt(wsquaresum / sumtime)\n</code></pre>"},{"location":"devnotes/#glossary","title":"Glossary","text":"<p>This is a glossary of terminology used throughout the code.</p> Terminology used in WeeWX Name Description archive interval  WeeWX does not store the raw data that comes off a weather station. Instead, it aggregates the data over a length of time, the archive interval, and then stores that.      archive record  While packets are raw data that comes off the weather station, records are data aggregated by time. For example, temperature may be the average temperature over an archive interval. These are the data stored in the SQL database      config_dict  All configuration information used by WeeWX is stored in the configuration file, usually with the name weewx.conf. By convention, when this file is read into the program, it is called  config_dict, an instance of the class configobj.ConfigObj.      datetime  An instance of the Python object datetime.datetime. Variables of type datetime usually have a suffix _dt.      db_dict  A dictionary with all the data necessary to bind to a database. An example for SQLite would be <pre>\n{\n  'driver':'db.sqlite',\n  'SQLITE_ROOT':'/home/weewx/archive',\n  'database_name':'weewx.sdb'\n }</pre>  An example for MySQL would be  <pre>\n {\n   'driver':'db.mysql',\n   'host':'localhost',\n   'user':'weewx',\n   'password':'mypassword',\n   'database_name':'weewx'\n }</pre> epoch time  Sometimes referred to as \"unix time,\" or \"unix epoch time.\" The number of seconds since the epoch, which is 1 Jan 1970 00:00:00 UTC. Hence, it always represents UTC (well... after adding a few leap seconds... but, close enough). This is the time used in the databases and appears as type dateTime in the SQL schema, perhaps an unfortunate name because of the similarity to the completely unrelated Python type datetime. Very easy to manipulate, but it is a big opaque number.      LOOP packet  The real-time data coming off the weather station. The terminology \"LOOP\" comes from the Davis series of weather stations. A LOOP packet can contain all observation types, or it may contain only some of them (\"Partial packet\").      observation\u00a0type  A physical quantity measured by a weather station (e.g., outTemp) or something derived from it (e.g., dewpoint).      skin_dict  All configuration information used by a particular skin is stored in the skin configuration file, usually with the name skin.conf. By convention, when this file is read into the program, it is called skin_dict, an instance of the class configobj.ConfigObj.      SQL type  A type that appears in the SQL database. This usually looks something like outTemp, barometer, extraTemp1, and so on.      standard unit system  A complete set of units used together. Either US, METRIC, or METRICWX.      time stamp  A variable in unix epoch time. Always in UTC. Variables carrying a time stamp usually have a suffix _ts.      tuple-time  An instance of the Python object   time.struct_time. This is a 9-way tuple that represent a time. It could be in either local time or UTC, though usually the former. See module time for more information. Variables carrying tuple time usually have a suffix _tt.      value tuple  A 3-way tuple. First element is a value, second element the unit type the value is in, the third the unit group. An example would be (21.2, 'degree_C', 'group_temperature')."},{"location":"upgrade/","title":"Upgrade guide","text":"<p>Warning</p> <p>You must use the same upgrade technique as your initial install! For example, if you used pip to install WeeWX, then you should use pip to upgrade. If you used a DEB or RPM package to install, then you should upgrade using the same package type.</p> <p>Warning</p> <p>If you are upgrading from an old <code>setup.py</code> installation, see the instructions Migrating setup.py installs to Version 5.0.</p> <p>The instructions for upgrading WeeWX are in the quick start guides:</p> <ul> <li>Upgrading using Debian DEB</li> <li>Upgrading using Redhat RPM</li> <li>Upgrading using SUSE RPM</li> <li>Upgrading using pip</li> <li>Upgrading using git</li> </ul> <p>The rest of this document describes the changes in each WeeWX release.</p>"},{"location":"upgrade/#upgrading-the-weewx-configuration-file","title":"Upgrading the WeeWX configuration file","text":"<p>It does not happen very often, but occasionally a new release will require changes to the WeeWX configuration file. When this happens, the installer takes care of upgrading the file, and you do not need to worry about it.</p> <p>However, there are some occasions when you may need to upgrade the file yourself. In particular, this happens when you run several instances of <code>weewxd</code> on the same machine, each with its own configuration file. The configuration file named <code>weewx.conf</code> will get upgraded, but what about the others?</p> <p>The answer is to use <code>weectl station upgrade</code> with the <code>--config</code> option pointing to the configuration file to be upgraded. For example, this would upgrade the configuration file <code>/etc/weewx/other.conf</code>:</p> <pre><code>sudo weectl station upgrade --config=/etc/weewx/other.conf\n</code></pre>"},{"location":"upgrade/#upgrading-to-v50","title":"Upgrading to V5.0","text":""},{"location":"upgrade/#python-27-no-longer-supported","title":"Python 2.7 no longer supported","text":"<p>It has now been over 3 years since the end-of-life for Python 2.7. It's time to move on. WeeWX V5.x requires Python 3.7 or greater. These days, all but the most ancient of operating systems offer Python 3, although you may have to install it.</p>"},{"location":"upgrade/#setuppy-installs-no-longer-possible","title":"setup.py installs no longer possible","text":"<p>The package <code>distutils</code>, and the imperative approach on which the WeeWX <code>setup.py</code> install method depends, has been deprecated and will ultimately be removed. The future is clearly pip installs using <code>pyproject.toml</code>. See the wiki article on Version 5 for the technical reasons why.</p>"},{"location":"upgrade/#pip-installs-to-new-location","title":"pip installs to new location","text":"<p>The default location for a <code>setup.py</code> install was <code>/home/weewx</code>. The new pip install method installs to a directory called <code>weewx-data</code> in home directory of the user doing the install. However, old installations can continue to use <code>/home/weewx</code> by following the guide Migrating setup.py installs to Version 5.0.</p>"},{"location":"upgrade/#new-location-for-user-directory","title":"New location for <code>user</code> directory","text":"<p>This affects users who are using a package installer (such as from Debian or RPM packages). Users who used a <code>setup.py</code> install are not affected.</p> <p>The package installers for previous versions of WeeWX would install any Python code used by extensions alongside other code, usually in <code>/usr/share/weewx/user</code>.</p> <p>However, Version 5 strives to keep user data separate from code. The <code>user</code> directory is now located with other user data in <code>/etc/weewx/</code>, specifically in <code>/etc/weewx/bin/user</code>. You will have to either reinstall any extensions, or manually copy over the <code>user</code> directory. For example,</p> <pre><code>sudo mkdir /etc/weewx/bin\ncp -r /usr/share/weewx/user/ /etc/weewx/bin/\n</code></pre>"},{"location":"upgrade/#new-utilities","title":"New utilities","text":"<p>Most of the old utilities have been collected and put under one master utility, <code>weectl</code>. This make it easy to use the <code>--help</code> option to see which one you want.</p> Old utility New utility <code>wee_database</code> <code>weectl database</code> <code>wee_debug</code> <code>weectl debug</code> <code>wee_device</code> <code>weectl device</code> <code>wee_extension</code> <code>weectl extension</code> <code>wee_config</code> <code>weectl station</code> <p>The utilities <code>wee_reports</code> and <code>wee_import</code> have not been changed and should still be invoked under their own names.</p>"},{"location":"upgrade/#utility-wunderfixer-has-been-removed","title":"Utility <code>wunderfixer</code> has been removed.","text":"<p>The Weather Underground no longer allows past-dated posts, so the utility is no longer useful.</p>"},{"location":"upgrade/#sqlite_root-is-now-relative-to-weewx_root","title":"<code>SQLITE_ROOT</code> is now relative to <code>WEEWX_ROOT</code>","text":"<p>Previously, <code>SQLITE_ROOT</code> was expected to be an absolute path, but now relative paths are accepted. A relative path is considered relative to <code>WEEWX_ROOT</code>. Because this is less restrictive, it is not expected to affect any users.</p>"},{"location":"upgrade/#class-weewxunitsunknowntype-has-been-renamed","title":"Class <code>weewx.units.UnknownType</code> has been renamed","text":"<p>Its name was too similar to <code>weewx.UnknownType</code>, so it has been renamed to <code>weewx.units.UnknownObsType</code>. It is very unlikely any users would be affected by this.</p>"},{"location":"upgrade/#upgrading-to-v410","title":"Upgrading to V4.10","text":""},{"location":"upgrade/#breaking-changes-for-skins-that-use-delta-times","title":"Breaking changes for skins that use delta times","text":"<p>A \"delta time\" is the difference between two times, for example the amount of uptime (difference between start and current time), or the amount of daylight (difference between sunrise and sunset). In previous versions, delta times were treated as a special case, which limited their flexibility. With PR #807, a delta time is treated like any other scalar, which gives you access to all the regular formatting tools. However, a side effect is that if you want to format the time in the \"long form\", that is, so the results look like 4 hours, 15 minutes, rather than 15300 seconds, then you will have to say so explicitly.</p> <p>If you use the Seasons skin, you will have to make these four changes. Add the text in green:</p> V4.9 and earlier Seasons skin 4.10 Seasons skin Seasons/about.inc starting at         line 31        <pre>\n      &lt;tr&gt;\n      &lt;td class=\"label\"&gt;$gettext(\"Server uptime\")&lt;/td&gt;\n      &lt;td class=\"data\"&gt;$station.os_uptime&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n      &lt;td class=\"label\"&gt;$gettext(\"WeeWX uptime\")&lt;/td&gt;\n      &lt;td class=\"data\"&gt;$station.uptime&lt;/td&gt;\n      &lt;/tr&gt;\n        </pre> <pre>\n      &lt;tr&gt;\n      &lt;td class=\"label\"&gt;$gettext(\"Server uptime\")&lt;/td&gt;\n      &lt;td class=\"data\"&gt;$station.os_uptime.long_form&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n      &lt;td class=\"label\"&gt;$gettext(\"WeeWX uptime\")&lt;/td&gt;\n      &lt;td class=\"data\"&gt;$station.uptime.long_form&lt;/td&gt;\n      &lt;/tr&gt;\n        </pre> Seasons/celestial.inc         starting at line 94        <pre>\n      &lt;tr&gt;\n      &lt;td class=\"label\"&gt;$gettext(\"Total daylight\")&lt;/td&gt;\n      &lt;td class=\"data\"&gt;$almanac.sun.visible&lt;br/&gt;$sun_visible_change $change_str&lt;/td&gt;\n      &lt;/tr&gt;\n        </pre> <pre>\n      &lt;tr&gt;\n      &lt;td class=\"label\"&gt;$gettext(\"Total daylight\")&lt;/td&gt;\n      &lt;td class=\"data\"&gt;$almanac.sun.visible.long_form&lt;br/&gt;$sun_visible_change.long_form $change_str&lt;/td&gt;\n      &lt;/tr&gt;\n        </pre> <p>   In a similar manner, if you use the Standard skin, you will have to   make these two changes.  </p> V4.9 and earlier Standard skin 4.10 Standard skin Standard/index.html.tmpl         starting at line 309        <pre>\n          &lt;p&gt;$gettext(\"WeeWX uptime\"):  $station.uptime&lt;br/&gt;\n          $gettext(\"Server uptime\"): $station.os_uptime&lt;br/&gt;\n        </pre> <pre>\n          &lt;p&gt;$gettext(\"WeeWX uptime\"):  $station.uptime.long_form&lt;br/&gt;\n          $gettext(\"Server uptime\"): $station.os_uptime.long_form&lt;br/&gt;\n        </pre> <p>   In both cases, the new formatting directive .long_form   has been used to explicitly request that the delta time be formatted into its   constituent components. The advantage of this approach is that the delta time   can be treated like any other scalar. Here are some examples:  </p> Tag Results        $almanac.sun.visible             45000 seconds             $almanac.sun.visible.hour             12.5 hours             $almanac.sun.visible.hour.format(\"%.2f\")             12.50 hours             $almanac.sun.visible.long_form             12 hours, 30 minutes, 0 seconds"},{"location":"upgrade/#changes-for-custom-delta-time-formats","title":"Changes for custom delta time formats","text":"<p>   Fixing issue #808   required introducing a separate dictionary for members of group group_deltatime. This means that if you specified custom   formats under [Units]/[[TimeFormats]], then you will   have to move them to the new section [Units]/[[DeltaTimeFormats]]. Very few users should be   affected by this change because the ability to set custom delta time formats is   an undocumented feature.  </p> <p>   The good news is that the contexts they now use have more standard names. The    table below summarizes: </p> V4.9 and earlier 4.10 <pre>\n      [[TimeFormats]]\n          ...\n          current     = %x %X\n          ephem_day   = %X\n          ephem_year  = %x %X\n          brief_delta = \"%(minute)d%(minute_label)s, %(second)d%(second_label)s\"\n          short_delta = \"%(hour)d%(hour_label)s, %(minute)d%(minute_label)s, %(second)d%(second_label)s\"\n          long_delta  = \"%(day)d%(day_label)s, %(hour)d%(hour_label)s, %(minute)d%(minute_label)s\"\n          delta_time  = \"%(day)d%(day_label)s, %(hour)d%(hour_label)s, %(minute)d%(minute_label)s\"\n        </pre> <pre>\n      [[TimeFormats]]\n          ...\n          current     = %x %X\n          ephem_day   = %X\n          ephem_year  = %x %X\n\n          [[DeltaTimeFormats]]\n          current = \"%(minute)d%(minute_label)s, %(second)d%(second_label)s\"\n          hour    = \"%(minute)d%(minute_label)s, %(second)d%(second_label)s\"\n          day     = \"%(hour)d%(hour_label)s, %(minute)d%(minute_label)s, %(second)d%(second_label)s\"\n          week    = \"%(day)d%(day_label)s, %(hour)d%(hour_label)s, %(minute)d%(minute_label)s\"\n          month   = \"%(day)d%(day_label)s, %(hour)d%(hour_label)s, %(minute)d%(minute_label)s\"\n          year    = \"%(day)d%(day_label)s, %(hour)d%(hour_label)s, %(minute)d%(minute_label)s\"\n        </pre> Elapsed time calls may have to be changed <p>   The fix for Issue #808 also affects the API. </p> V4.9 and earlier 4.10 <pre>\n    # Create an elapsed time of 1655 seconds\n    vt = ValueTuple(1655, 'second', 'group_deltatime')\n    vh = ValueHelper(vt,\n        formatter=self.generator.formatter,\n        converter=self.generator.converter,\n        context='short_delta')\n      </pre> <pre>\n    # Create an elapsed time of 1655 seconds\n    vt = ValueTuple(1655, 'second', 'group_deltatime')\n    vh = ValueHelper(vt,\n        formatter=self.generator.formatter,\n        converter=self.generator.converter,\n        context='day')\n      </pre> <p>   In summary, because group_deltatime now uses the same context names as any other   time, you will have to change the call to use one of the conventional contexts. </p>"},{"location":"upgrade/#upgrading-to-v49","title":"Upgrading to V4.9","text":""},{"location":"upgrade/#wee_reports-may-require-epoch-option","title":"wee_reports may require --epoch option.","text":"<p>   In previous versions, the utility wee_reports could take an optional position   argument that specified the reporting time in unix epoch time. For example, </p> <pre>wee_reports /home/weewx/weewx.conf 1645131600</pre> <p>   would specify that the reporting time should be 1645131600, or 17-Feb-2022 13:00 PST. </p> <p>   Starting with V4.9, the unix epoch time must be specified using the --epoch flag,   so the command becomes </p> <pre>wee_reports /home/weewx/weewx.conf --epoch=1645131600</pre> <p>   Alternatively, the reporting time can be specified by using --date and --time flags: </p> <pre>wee_reports /home/weewx/weewx.conf --date=2022-02-17 --time=13:00</pre>"},{"location":"upgrade/#init-function-of-class-wxxtypes-has-changed","title":"Init function of class WXXTypes has changed","text":"<p>   In earlier versions, ET was calculated in class WXXTypes. Now it has its own   class, ETXType. As a result, some initialization parameters are no longer needed   and have been removed. </p> <p>   Note also that the parameter heat_index_algo was changed to heatindex_algo   in keeping with the rest of the code. </p> <p>   Unless you have been writing specialized code that required direct access to WXXTypes you are very unlikely to be affected. </p> V4.8 and earlier 4.9 <pre>\n    def __init__(self, altitude_vt, latitude_f, longitude_f,\n        et_period=3600,\n        atc=0.8,\n        nfac=2,\n        wind_height=2.0,\n        force_null=True,\n        maxSolarRad_algo='rs',\n        heat_index_algo='new')\n      </pre> <pre>\n    def __init__(self, altitude_vt, latitude_f, longitude_f,\n        atc=0.8,\n        nfac=2,\n        force_null=True,\n        maxSolarRad_algo='rs',\n        heatindex_algo='new')\n      </pre>"},{"location":"upgrade/#calling-signature-of-some-archive-span-functions-has-changed","title":"Calling signature of some archive span functions has changed","text":"<p>   The calling signature of the following functions has changed. In general, the parameter grace   has been removed in favor of a more robust method for figuring out which time span a timestamp belongs to. </p> V4.8 and earlier 4.9 <pre>\n    def archiveHoursAgoSpan(time_ts, hours_ago=0, grace=1)\n      </pre> <pre>\n    def archiveHoursAgoSpan(time_ts, hours_ago=0)\n      </pre> <pre>\n    def archiveDaySpan(time_ts, grace=1, days_ago=0)\n      </pre> <pre>\n    def archiveDaySpan(time_ts, days_ago=0)\n      </pre> <pre>\n    def archiveWeekSpan(time_ts, startOfWeek=6, grace=1, weeks_ago=0)\n      </pre> <pre>\n    def archiveWeekSpan(time_ts, startOfWeek=6, weeks_ago=0)\n      </pre> <pre>\n    def archiveMonthSpan(time_ts, grace=1, months_ago=0)\n      </pre> <pre>\n    def archiveMonthSpan(time_ts, months_ago=0)\n      </pre> <pre>\n    def archiveYearSpan(time_ts, grace=1, years_ago=0)\n      </pre> <pre>\n    def archiveYearSpan(time_ts, years_ago=0)\n      </pre> <pre>\n    def archiveRainYearSpan(time_ts, sory_mon, grace=1)\n      </pre> <pre>\n    def archiveRainYearSpan(time_ts, sory_mon)\n      </pre>"},{"location":"upgrade/#upgrading-to-v46","title":"Upgrading to V4.6","text":""},{"location":"upgrade/#ordering-of-search-list-changed","title":"Ordering of search list changed","text":"<p>   In previous versions, user-supplied search list extensions were appended to the search list.   Starting with V4.6, they are now prepended to the list. This means that when Cheetah is evaluating   the list, looking for a tag, it will encounter user-supplied extensions first, allowing extensions to   override the built-in tags and change their behavior. </p>"},{"location":"upgrade/#tag-alltime","title":"Tag $alltime","text":"<p>   The tag $alltime, formerly included as an example, is now a part of the core of   WeeWX. This means you may no longer need to include the \"stats\" example as a Cheetah search list extension,   although leaving it in will do no harm. </p>"},{"location":"upgrade/#upgrading-to-v45","title":"Upgrading to V4.5","text":"<p>   Version 4.5 changes are unlikely to affect anyone, except extension writers who are deep in the internals of   WeeWX. </p>"},{"location":"upgrade/#api-changes","title":"API changes","text":"<p>   There have been a number of changes in the WeeWX API. None of them are likely to affect end users. Overall,   the biggest change is that the data held internally in class ValueHelper is now   held in the target unit system, rather than being converted at time of use. </p> Defaults for ValueHelper have changed <p>   Before, when constructing a new ValueHelper, if no converter was included in the   constructor, a default converter, which converts to US Units, was supplied. Now, if no converter is included   in the constructor, no default converter at all is supplied, and the data remain in the original units. This   is unlikely to affect most extension writers because the usual case is to supply a converter to the ValueHelper constructor. </p> Function as_value_tuple() may raise KeyError <p>   Previously, if the function as_value_tuple() was asked to return a ValueTuple of a non-existent type, it returned a ValueTuple   with values (None, None, None). Now it raises a KeyError   exception. </p>"},{"location":"upgrade/#upgrading-to-v44","title":"Upgrading to V4.4","text":""},{"location":"upgrade/#auto-patch-of-daily-summaries","title":"Auto patch of daily summaries","text":"<p>   The V4.2 daily summary patch inadvertently introduced a bug which caused the wind   daily summary to be incorrectly weighted. See issue #642. V4.4 includes a patch to automatically fix the   defective daily summary. It is run only once on the first use of a database (usually by weewxd)   and takes only a few seconds. </p>"},{"location":"upgrade/#upgrading-to-v43","title":"Upgrading to V4.3","text":""},{"location":"upgrade/#auto-patch-of-daily-summaries_1","title":"Auto patch of daily summaries","text":"<p>   Version 4.2 inadvertently introduced a bug, which prevented the sums that are kept in the daily summaries   from being weighted by the archive interval. See issue #623.   V4.3 includes a patch, which will fix any defective daily summaries automatically. It is run only once on   the first use of a database (usually by weewxd) and takes only a few seconds. </p>"},{"location":"upgrade/#option-ignore_zero_wind-has-been-renamed-and-moved","title":"Option ignore_zero_wind has been renamed and moved","text":"<p>   Normally, WeeWX sets wind direction to undefined when wind speed is zero. While it was never documented,   some users used option ignore_zero_wind to prevent this: if set to False, wind direction will not be set to undefined when wind speed is zero. However, the   option's location and name has changed. It is now called force_null, and it is now   located under [StdWXCalculate] / [[WXXTypes]] / [[[windDir]]]. The old name and   location has been deprecated, but still honored. </p> V4.2 and earlier 4.3 <pre>\n    [StdWXCalculate]\n    ignore_zero_wind = False\n    [[Calculations]]\n        ...\n      </pre> <pre>\n    [StdWXCalculate]\n    [[Calculations]]\n        ...\n    [[WXXTypes]]\n        [[[windDir]]]\n        force_null = False\n      </pre>"},{"location":"upgrade/#option-log_failure-set-to-true","title":"Option log_failure set to True","text":"<p>   The option log_failure under [StdReport] controls   whether to log failures into the system log. It was previously set to False. The   upgrade process will set it to True, so that users can better see failure modes. </p> V4.2 and earlier 4.3 <pre>\n    [StdReport]\n    ...\n    log_failure = False\n    ...\n      </pre> <pre>\n    [StdReport]\n    ...\n    log_failure = True\n    ...\n      </pre>"},{"location":"upgrade/#upgrading-to-v42","title":"Upgrading to V4.2","text":"<p>   For the most part, V4.2 is backwards compatible with previous versions. There is one small exception. </p>"},{"location":"upgrade/#type-beaufort-deprecated","title":"Type beaufort deprecated","text":"<p>   The type beaufort has been deprecated, although there are no immediate plans to   remove it \u2014 using it will put a warning in the log. Instead, it has become a new unit, which can be   used as part of group_speed. Here's an example: </p> V4.1 and earlier 4.2 <pre>&lt;p&gt;\n    The current wind speed is $current.windSpeed,\n    which is $current.beaufort on the beaufort scale.\n    &lt;/p&gt;\n      </pre> <pre>&lt;p&gt;\n    The current wind speed is $current.windSpeed,\n    which is $current.windSpeed.beaufort on the beaufort scale.\n    &lt;/p&gt;\n      </pre>"},{"location":"upgrade/#upgrading-to-v40","title":"Upgrading to V4.0","text":"<p>   For the most part, V4.0 is backwards compatible with previous versions. </p>"},{"location":"upgrade/#python-25-and-26","title":"Python 2.5 and 2.6","text":"<p>   Support for Python 2.5 and 2.6 has been dropped. It has now been well over 10 years since these versions   were introduced, and 6+ years since they were supported by the Python Software Foundation. If you are using   Python 2.5 or 2.6, then you should either upgrade your copy of Python, or stay with your old version of   WeeWX. </p>"},{"location":"upgrade/#stdwxcalculate","title":"[StdWXCalculate]","text":"<p>   In earlier versions of WeeWX, many derived types were calculated by default by the service StdWXCalculate. By contrast, in WeeWX V4, no derived types are calculated by default   \u2014 all desired types must be explicitly listed in weewx.conf. For most users,   this will not cause a problem because most types were already listed in weewx.conf.   However if you deleted one of the following types in the clause [StdWXCalculate],   and started to depend on the default calculations, then the type will no longer be calculated in V4. </p> pressure barometer altimeter windchill heatindex dewpoint inDewpoint rainRate <p>   In this case, you should add the type to [StdWXCalculate]. For example, if for   some reason you deleted dewpoint, then you would need to add the following </p> <pre>\n  [StdWXCalculate]\n  [[Calculations]]\n  ...\n  dewpoint = prefer_hardware\n</pre>"},{"location":"upgrade/#upgrading-to-v39","title":"Upgrading to V3.9","text":""},{"location":"upgrade/#new-skins","title":"New skins","text":"<p>   Version 3.9 introduces and installs a new skin, Seasons, and promotes two old skins,   Mobile and Smartphone, previously part of Standard, to first-class, independent,   skins. </p> <ul> <li>     If you are installing fresh (not an upgrade), then all four skins, Seasons, Standard,     Mobile, and Smartphone will be installed, but only Seasons will be activated.   </li> <li>     If you are upgrading, then the three new skins, Seasons, Mobile, and     Smartphone will be installed, but none will be activated. Your existing Standard will     be left untouched and activated. For most people, your website will continue to look as expected (the     exception is explained below in section Do you need to change anything?).   </li> </ul> <p>   If you are upgrading, and you wish to try the new skin Seasons, then activate it, but be sure     to deactivate Standard. Otherwise, both will get generated, and they will compete with each other for   placement in your HTML directory. </p>"},{"location":"upgrade/#skin-defaults","title":"Skin defaults","text":"<p>   Version 3.9 introduces a new section, [StdReport]/[[Defaults]] in weewx.conf. Options in this section apply to all reports. For example, if you   set a unit group here, it will be applied everywhere. This makes it easy to set the units across all   reports, or to ensure that the labels for observations are the same in every report. </p> <p>   It also adds a file defaults.py, in which the fallback values for every report   parameter are specified. Although the defaults file is currently useful only to developers, in the future it   may be extended to facilitate translations and localization. </p>"},{"location":"upgrade/#do-you-need-to-change-anything","title":"Do you need to change anything?","text":"<p>   The introduction of the new section, [StdReport]/[[Defaults]] in weewx.conf, can change which units are applied to reports   because it has a higher precedence than what is in skin.conf. See the section How to specify options for   details of the ordering in which an option is considered.  </p> <p>   Most users will be unaffected by these changes because they depend on specific report overrides. There is,   however, one exception: </p> <p>   If your installation does not use overrides, and you changed to metric units in your skin.conf   file, you will be affected. </p> <p>   Your reports will start appearing in U.S. Customary units. The reason is that   the new section, [StdReport]/[[Defaults]] has higher   priority than options in skin.conf, and thus will   start asserting itself. </p> <p>   The fix is simple: modify the [StdReport]/[[Defaults]] to suit your preferences. </p> <p>   However, users who specified what unit system to use as part of the automated install using a package   installer or setup.py, will have an override section, and therefore will be   unaffected. This is because the override section has the highest priority. </p>"},{"location":"upgrade/#upgrading-to-v37","title":"Upgrading to V3.7","text":""},{"location":"upgrade/#changes-to-daily-summaries","title":"Changes to daily summaries","text":"<p>Perhaps the most significant change in V3.7 is a fix for how daily summary values are calculated and stored. </p> <p>Daily summaries were introduced in V3.0 (December 2014), to speed up certain kinds of aggregation   calculations. They were designed to \"weight\" values depending on the time length of the archive record that   contributed them. For example, shorter intervals contributed less than longer intervals. This was intended   to enable changes to the length of the archive interval. </p> <p>Unfortunately, a bug caused the weightings to all be one (1), regardless of what the actual archive interval   length might be. This means all archive records, long and short, contribute the same amount, instead of   being weighted by their length. So, if the archive interval were to change, averages would be calculated   incorrectly. </p> <p>   This bug will only affect you if you have changed the length of your archive interval, or if you plan to. If   you have not changed your archive interval length, and have no plans to do so, then there is nothing you   need to do. </p> <p>   Your archive may have interval values of different sizes if...  ... you have imported data using   wee_import.  ... your hardware has a data logger, your configuration   uses record_generation=software, and the archive_interval is different from that in the hardware.  ... your archive   contains data from more than one type of hardware. </p> <p>The weectl database update utility can fix this problem by recalculating the weights in the daily summary, on the basis of the actual archive interval lengths. On a Raspberry Pi 1, model B, it takes about 10 minutes to fix a database with 10 years of data. On faster machines, it takes much less time. </p> <pre>weectl database update</pre> <p>   If you have multiple databases, consider recalculating the weights in each database. Interval weighting will   only need to be applied to databases that have daily summaries, i.e., the binding uses </p> <pre>manager = weewx.wxmanager.WXDaySummaryManager</pre> <p>   To apply interval weighting to a database other than the default wx_binding, use   the --binding=BINDING_NAME option. </p> <pre>weectl database update --binding=cmon_binding</pre>"},{"location":"upgrade/#recalculation-of-windspeed-maximum-values","title":"Recalculation of windSpeed maximum values","text":"<p>Version 3.7 changes how maximum windSpeed is calculated for aggregations of a day   or more. Previously, if option use_hilo was set to True   (the usual case), maximum windSpeed for a day was set to the maximum value seen in   the LOOP packets for the day. In practice this is the same value as windGust. That   is, these two tags would supply the same value: </p> <pre>$day.windSpeed.max\n  $day.windGust.max</pre> <p> In Version 3.7, this has been changed so the maximum windSpeed is now set to the   maximum archive value seen during the day \u2014 usually a slightly smaller number. However, older   daily max values will still contain the max LOOP packet values. If you wish to update your older values and   have them use the max archive record value, use the utility weectl   database update . </p>"},{"location":"upgrade/#change-in-the-name-and-locations-of-examples","title":"Change in the name and locations of examples","text":"<p>   In earlier versions, examples were located with the WeeWX code base, and packaged as a Python module. This   is categorically and semantically incorrect. </p> <p>   The examples now live in their own directory, whose location     is dependent on the installation method. If you use an example, you should copy it to the user subdirectory, modify it if necessary, then use it there. Your copy will be retained   across version upgrades. </p> 3.6 3.7 <pre>examples.alarm.MyAlarm\n      examples.lowBattery.MyAlarm\n      examples.xsearch.MyXSearch</pre> <pre>user.alarm.MyAlarm\n      user.lowBattery.BatteryAlarm\n      user.stats.MyStats</pre> <p>Finally, note that the name of one example has been changed:</p> 3.6 3.7 <pre>xsearch.py</pre> <pre>stats.py</pre>"},{"location":"upgrade/#changes-to-sensor-mapping","title":"Changes to sensor mapping","text":"<p>   The mapping of sensors to database fields was formalized in Version 3.7, resulting in changes to the   configuration for some of the drivers, including cc3000, te923, wmr100, wmr200, wmr300, and wmr9x8. </p> <p>   For the wmr200 driver, until Version 3.6, the fields extraTemp1 and extraHumid1   were not usable. Version 3.6.1 shifted the extraTemp and extraHumid mappings down one channel, so that   extraTemp1 corresponded to channel 2, extraTemp2 corresponded to channel 3, and so on. The mappings can now   be modified by a change to the configuration file, and the default mappings are as follows: </p> 3.6 3.7 <pre>** hard-coded in the driver **\n\n    outTemp = temperature_1\n    # extraTemp1 is not usable\n    extraTemp2 = temperature_2\n    extraTemp3 = temperature_3\n    extraTemp4 = temperature_4\n    extraTemp5 = temperature_5\n    extraTemp6 = temperature_6\n    extraTemp7 = temperature_7\n    extraTemp8 = temperature_8\n    outHumidity = humidity_1\n    # extraHumid1 is not usable\n    extraHumid2 = humidity_2\n    extraHumid3 = humidity_3\n    extraHumid4 = humidity_4\n    extraHumid5 = humidity_5\n    extraHumid6 = humidity_6\n    extraHumid7 = humidity_7\n    extraHumid8 = humidity_8</pre> <pre>[WMR200]\n    [[sensor_map]]\n          altimeter = altimeter\n          pressure = pressure\n          windSpeed = wind_speed\n          windDir = wind_dir\n          windGust = wind_gust\n          windBatteryStatus = battery_status_wind\n          inTemp = temperature_0\n          outTemp = temperature_1\n          extraTemp1 = temperature_2\n          extraTemp2 = temperature_3\n          extraTemp3 = temperature_4\n          extraTemp4 = temperature_5\n          extraTemp5 = temperature_6\n          extraTemp6 = temperature_7\n          extraTemp7 = temperature_8\n          inHumidity = humidity_0\n          outHumidity = humidity_1\n          extraHumid1 = humidity_2\n          extraHumid2 = humidity_3\n          extraHumid3 = humidity_4\n          extraHumid4 = humidity_5\n          extraHumid5 = humidity_6\n          extraHumid6 = humidity_7\n          extraHumid7 = humidity_8\n          outTempBatteryStatus = battery_status_out\n          rain = rain\n          rainTotal = rain_total\n          rainRate = rain_rate\n          hourRain = rain_hour\n          rain24 = rain_24\n          rainBatteryStatus = battery_status_rain\n          UV = uv\n          uvBatteryStatus = battery_status_uv\n          windchill = windchill\n          heatindex = heatindex\n          forecastIcon = forecast_icon\n          outTempFault = out_fault\n          windFault = wind_fault\n          uvFault = uv_fault\n          rainFault = rain_fault\n          clockUnsynchronized = clock_unsynchronized\n      </pre> <p>   For the te923 driver: </p> 3.6 3.7 <pre>[TE923]\n    [[map]]\n          link_wind = windLinkStatus\n          bat_wind = windBatteryStatus\n          link_rain = rainLinkStatus\n          bat_rain = rainBatteryStatus\n          link_uv = uvLinkStatus\n          bat_uv = uvBatteryStatus\n          uv = UV\n          t_in = inTemp\n          h_in = inHumidity\n          t_1 = outTemp\n          h_1 = outHumidity\n          bat_1 = outBatteryStatus\n          link_1 = outLinkStatus\n          t_2 = extraTemp1\n          h_2 = extraHumid1\n          bat_2 = extraBatteryStatus1\n          link_2 = extraLinkStatus1\n          t_3 = extraTemp2\n          h_3 = extraHumid3\n          bat_3 = extraBatteryStatus2\n          link_3 = extraLinkStatus2\n          t_4 = extraTemp3\n          h_4 = extraHumid3\n          bat_4 = extraBatteryStatus3\n          link_4 = extraLinkStatus3\n          t_5 = extraTemp4\n          h_5 = extraHumid4\n          bat_5 = extraBatteryStatus4\n          link_5 = extraLinkStatus4</pre> <pre>[TE923]\n    [[sensor_map]]\n          windLinkStatus = link_wind\n          windBatteryStatus = bat_wind\n          rainLinkStatus = link_rain\n          rainBatteryStatus = bat_rain\n          uvLinkStatus = link_uv\n          uvBatteryStatus = bat_uv\n          inTemp = t_in\n          inHumidity = h_in\n          outTemp = t_1\n          outHumidity = h_1\n          outTempBatteryStatus = bat_1\n          outLinkStatus = link_1\n          extraTemp1 = t_2\n          extraHumid1 = h_2\n          extraBatteryStatus1 = bat_2\n          extraLinkStatus1 = link_2\n          extraTemp2 = t_3\n          extraHumid2 = h_3\n          extraBatteryStatus2 = bat_3\n          extraLinkStatus2 = link_3\n          extraTemp3 = t_4\n          extraHumid3 = h_4\n          extraBatteryStatus3 = bat_4\n          extraLinkStatus3 = link_4\n          extraTemp4 = t_5\n          extraHumid4 = h_5\n          extraBatteryStatus4 = bat_5\n          extraLinkStatus4 = link_5\n\n      </pre>"},{"location":"upgrade/#upgrading-to-v36","title":"Upgrading to V3.6","text":""},{"location":"upgrade/#changes-to-weewxconf","title":"Changes to weewx.conf","text":"<p>   In Version 3.6, the list of options that describe how derived variables are to be calculated have been moved   to a new subsection called [[Calculations]]. The upgrade process will   automatically make this change for you. </p> 3.5 3.6 <pre>[StdWXCalculate]\n    pressure = prefer_hardware\n    barometer = prefer_hardware\n    altimeter = prefer_hardware\n    windchill = prefer_hardware\n    heatindex = prefer_hardware\n    dewpoint = prefer_hardware\n    inDewpoint = prefer_hardware\n    rainRate = prefer_hardware\n\n      </pre> <pre>[StdWXCalculate]\n    [[Calculations]]\n        pressure = prefer_hardware\n        barometer = prefer_hardware\n        altimeter = prefer_hardware\n        windchill = prefer_hardware\n        heatindex = prefer_hardware\n        dewpoint = prefer_hardware\n        inDewpoint = prefer_hardware\n        rainRate = prefer_hardware</pre>"},{"location":"upgrade/#upgrading-to-v32","title":"Upgrading to V3.2","text":""},{"location":"upgrade/#new-utilities_1","title":"New utilities","text":"<p>   Version 3.2 includes new utilities to facilitate configuration. </p> 3.2 3.1 and earlier wee_config Change driver or other station parameters wee_extension setup.py or wee_setup Install, list, and remove extensions wee_database wee_config_database Manipulate the database wee_device wee_config_device Get and set parameters on the hardware wee_reports wee_reports Run reports"},{"location":"upgrade/#changes-to-weewxconf_1","title":"Changes to weewx.conf","text":"<p>Release 3.2 introduces a new section [DatabaseTypes]. This section defines the   default settings for each type of database. For example, the host, user, and password for MySQL databases   can be specified once in the DatabaseTypes section instead of repeating in each   Database section. The defaults in DatabaseTypes can be   overridden in each Database section as needed. </p> 3.1 3.2 <pre>[DataBindings]\n    [[wx_binding]]\n        database = archive_sqlite\n        manager = weewx.wxmanager.WXDaySummaryManager\n        table_name = archive\n        schema = schemas.wview.schema\n    [Databases]\n    [[archive_sqlite]]\n            root = %(WEEWX_ROOT)s\n          database = archive/weewx.sdb\n          driver = weedb.sqlite\n    [[archive_mysql]]\n            host = localhost\n          user = weewx\n          password = weewx\n          database = weewx\n          driver = weedb.mysql\n\n\n\n\n\n\n\n\n\n      </pre> <pre>[DataBindings]\n    [[wx_binding]]\n        database = archive_sqlite\n        manager = weewx.wxmanager.WXDaySummaryManager\n        table_name = archive\n        schema = schemas.wview.schema\n    [Databases]\n    [[archive_sqlite]]\n            database_name = weewx.sdb\n          database_type = SQLite\n\n    [[archive_mysql]]\n            database_name = weewx\n          database_type = MySQL\n\n\n\n    [DatabaseTypes]\n      [[SQLite]]\n          driver = weedb.sqlite\n          SQLITE_ROOT = %(WEEWX_ROOT)s/archive\n      [[MySQL]]\n          driver = weedb.mysql\n          host = localhost\n          user = weewx\n          password = weewx</pre>"},{"location":"upgrade/#upgrading-to-v30","title":"Upgrading to V3.0","text":""},{"location":"upgrade/#overview","title":"Overview","text":"<p>While a lot has changed with Version 3, the upgrade process should take care of most changes for most users.   However, if you have installed an extension or, especially, if you have written a custom service, search   list extension, or uploader, you will have to make some changes. </p>"},{"location":"upgrade/#database-contents","title":"Database contents","text":"<p>   With Version 3, there is no longer a separate \"stats\" database. Instead, \"daily summaries\" have been   included in the same database as the archive data \u2014 everything is under one name. For example, if you   are using sqlite, both the archive data and the daily summaries will be inside file weewx.sdb.   With MySQL, everything is inside the database weewx. This makes it easier to keep   all data together when working with multiple databases. </p> <p>This change in database structure should be transparent to you. On startup, WeeWX will automatically backfill   the new internal daily summaries from the archive data. Your old \"stats\" database will no longer be used and   may safely set aside or even deleted. </p>"},{"location":"upgrade/#pressure-calibration","title":"Pressure calibration","text":"<p>   Since the new StdWXCalculate service is applied after the StdCalibrate   services, the pressure_offset parameter is no longer necessary; pressure   calibration can be applied just like any other calibration. If your pressure was calibrated using the pressure_offset parameter, move the calibration to the [StdCalibrate] section. This applies only to CC3000, FineOffsetUSB, Ultimeter, WS1,   WS23xx, and WS28xx hardware. </p>"},{"location":"upgrade/#weewxconf","title":"weewx.conf","text":"<p>   A version 2.X weewx.conf file is not compatible with Version 3.X. However, the   upgrade process should automatically update the file. Nevertheless, the changes are documented below: </p> 2.7 3.0 <pre>[StdReport]\n        data_binding = wx_binding</pre> <pre>[StdArchive]\n        archive_database = archive_sqlite\n      stats_database = stats_sqlite\n      archive_schema = user.schemas.defaultArchiveSchema\n      stats_schema = user.schemas.defaultStatsSchema</pre> <pre>[StdArchive]\n        data_binding = wx_binding</pre> <pre>[DataBindings]\n      [[wx_binding]]\n          database = archive_sqlite\n          manager = weewx.wxmanager.WXDaySummaryManager\n          table_name = archive\n          schema = schemas.wview.schema</pre> <pre>[Databases]\n    [[archive_sqlite]]\n        root = %(WEEWX_ROOT)s\n        database = archive/weewx.sdb\n        driver = weedb.sqlite\n        [[stats_sqlite]]\n          root = %(WEEWX_ROOT)s\n          database = archive/stats.sdb\n          driver = weedb.sqlite\n    [[archive_mysql]]\n        host = localhost\n        user = weewx\n        password = weewx\n        database = weewx\n        driver = weedb.mysql\n        [[stats_mysql]]\n          host = localhost\n          user = weewx\n          password = weewx\n          database = stats\n          driver = weedb.mysql</pre> <pre>[Databases]\n    [[archive_sqlite]]\n        root = %(WEEWX_ROOT)s\n        database_name = archive/weewx.sdb\n        driver = weedb.sqlite\n\n\n\n\n    [[archive_mysql]]\n        host = localhost\n        user = weewx\n        password = weewx\n        database_name = weewx\n        driver = weedb.mysql\n\n\n\n\n\n\n      </pre> <pre>[Engines]\n    [[WxEngine]]\n        prep_services = \\\n    weewx.wxengine.StdTimeSynch\n        process_services = \\\n    weewx.wxengine.StdConvert, \\\n    weewx.wxengine.StdCalibrate, \\\n    weewx.wxengine.StdQC\n\n        archive_services = \\\n    weewx.wxengine.StdArchive\n        restful_services = \\\n    weewx.restx.StdStationRegistry, \\\n    weewx.restx.StdWunderground, \\\n    weewx.restx.StdPWSweather, \\\n    weewx.restx.StdCWOP, \\\n    weewx.restx.StdWOW, \\\n    weewx.restx.StdAWEKAS\n        report_services = \\\n    weewx.wxengine.StdPrint, \\\n    weewx.wxengine.StdReport</pre> <pre>[Engine]\n    [[Services]]\n        prep_services = \\\n    weewx.engine.StdTimeSynch\n        process_services = \\\n    weewx.engine.StdConvert, \\\n    weewx.engine.StdCalibrate, \\\n    weewx.engine.StdQC, \\\n      weewx.wxservices.StdWXCalculate\n        archive_services = \\\n    weewx.engine.StdArchive\n        restful_services = \\\n    weewx.restx.StdStationRegistry, \\\n    weewx.restx.StdWunderground, \\\n    weewx.restx.StdPWSweather, \\\n    weewx.restx.StdCWOP, \\\n    weewx.restx.StdWOW, \\\n    weewx.restx.StdAWEKAS\n        report_services = \\\n    weewx.engine.StdPrint, \\\n    weewx.engine.StdReport</pre>"},{"location":"upgrade/#custom-data-sources-in-skins","title":"Custom data sources in skins","text":"<p>The mechanism for specifying non-default data sources in skins has changed. If you modified the Standard   skin, or created or used other skins that draw data from a database other than the weather database, you   must change how the other sources are specified. </p> <p>For example, in the cmon extension:</p> 2.7 3.0 <pre>[ImageGenerator]\n    ...\n    [[day_images]]\n        ...\n        [[[daycpu]]]\n        archive_database = cmon_sqlite\n        [[[cpu_user]]]\n        [[[cpu_idle]]]\n        [[[cpu_system]]]</pre> <pre>[ImageGenerator]\n    ...\n    [[day_images]]\n        ...\n        [[[daycpu]]]\n        data_binding = cmon_binding\n        [[[cpu_user]]]\n        [[[cpu_idle]]]\n        [[[cpu_system]]]</pre>"},{"location":"upgrade/#extensions","title":"Extensions","text":"<p>   Many skins will work in v3 with no modification required. However, every search list extension will have to   be upgraded, every restful extension must be upgraded, and some other services must be upgraded. </p> <p>   There is no automated upgrade system for extensions; if an extension must be upgraded, you must do it   manually. If the extension has any python code, this will mean replacing any v2-compatible code with   v3-compatible code. In some cases parts of the configuration file weewx.conf must   be modified. </p> <p>   For example, to update the pmon extension, replace bin/user/pmon.py   with the v3-compatible pmon.py and modify weewx.conf as   shown in this table: </p> 2.7 3.0 <pre>[ProcessMonitor]\n    database = pmon_sqlite</pre> <pre>[ProcessMonitor]\n    data_binding = pmon_binding</pre> <pre>[DataBindings]\n      [[pmon_binding]]\n          database = pmon_sqlite\n          manager = weewx.manager.DaySummaryManager\n          table_name = archive\n          schema = user.pmon.schema</pre> <pre>[Databases]\n    [[pmon_sqlite]]\n        root = %(WEEWX_ROOT)s\n        database = archive/pmon.sdb\n        driver = weedb.sqlite</pre> <pre>[Databases]\n    [[pmon_sqlite]]\n        root = %(WEEWX_ROOT)s\n        database_name = archive/pmon.sdb\n        driver = weedb.sqlite</pre> <p>   For other extensions, see the extension's documentation or contact the author of the extension. </p>"},{"location":"upgrade/#search-list-extensions","title":"Search list extensions","text":"<p>   The introduction of data bindings has meant a change in the calling signature of search list     extensions. By way of example, here's the example from the document Writing       search list extensions, but with the differences highlighted. </p> 2.7 3.0 <pre>def get_extension(self, timespan, archivedb, statsdb):\n\n      all_stats = TimeSpanStats(\n          timespan,\n          statsdb,\n          formatter=self.generator.formatter,\n          converter=self.generator.converter)\n      week_dt = datetime.date.fromtimestamp(timespan.stop) - \\\n          datetime.timedelta(weeks=1)\n      week_ts = time.mktime(week_dt.timetuple())\n      seven_day_stats = TimeSpanStats(\n          TimeSpan(week_ts, timespan.stop),\n          statsdb,\n          formatter=self.generator.formatter,\n          converter=self.generator.converter)\n\n      search_list_extension = {'alltime'   : all_stats,\n          'seven_day' : seven_day_stats}\n\n      return search_list_extension</pre> <pre>def get_extension_list(self, timespan, db_lookup):\n\n      all_stats = TimespanBinder(\n          timespan, \n          db_lookup,\n          formatter=self.generator.formatter,\n          converter=self.generator.converter)\n      week_dt = datetime.date.fromtimestamp(timespan.stop) - \\\n          datetime.timedelta(weeks=1)\n      week_ts = time.mktime(week_dt.timetuple())\n      seven_day_stats = TimespanBinder(\n          TimeSpan(week_ts, timespan.stop),\n          db_lookup,\n          formatter=self.generator.formatter,\n          converter=self.generator.converter)\n\n      search_list_extension = {'alltime'   : all_stats,\n          'seven_day' : seven_day_stats}\n\n      return [search_list_extension]</pre> <p>A few things to note:</p> <ul> <li>The name of the extension function has changed from get_extension to get_extension_list.   </li> <li>The calling signature has changed. Instead of an archive database and a stats database being passed in,     a single database lookup function is passed in.   </li> <li>The name of the top-level class in the tag chain has changed from TimeSpanStats to TimespanBinder. See the Customizing       Guide for details.   </li> <li>Instead of returning a single search list extension, the function should now return a Python list of extensions. The list will be searched in order.   </li> </ul>"},{"location":"upgrade/#derived-quantities","title":"Derived quantities","text":"<p>Some calculations that were done in drivers or in hardware are now done consistently by the new   StdWXCalculate service. Drivers should no longer calculate derived quantities such as windchill, heatindex,   dewpoint, or rain rate. </p>"},{"location":"upgrade/#driver-apis","title":"Driver APIs","text":"<p>The base class for drivers has been renamed, and new, optional, methods have been defined to provide hooks   for configuring hardware and producing default and upgraded configuration stanzas. </p> <p>These changes affect only those who have written custom drivers.</p> 2.7 3.0 <pre>import weewx.abstractstation\n\n    class ACME960(weewx.abstractstation.AbstractStation):\n    ...</pre> <pre>import weewx.drivers\n\n    class ACME960(weewx.drivers.AbstractDevice):\n    ...</pre>"},{"location":"upgrade/#service-apis","title":"Service APIs","text":"<p>The base class for services has moved.</p> <p>This affects only those who have written custom services.</p> 2.7 3.0 <pre>import weewx.wxengine\n\n    class BetterMousetrapService(weewx.wxengine.StdService):\n    ...</pre> <pre>import weewx.engine\n\n    class BetterMousetrapService(weewx.engine.StdService):\n    ...</pre>"},{"location":"upgrade/#restful-apis","title":"RESTful APIs","text":"<p>Some of the methods internal to RESTful services have changed, specifically those that relate to getting   configuration options from weewx.conf and configuring databases. </p> <p>This affects only those who have written custom RESTful services.</p> <p>Here is an example of obtaining the database dictionary for use in the RESTful service thread.</p> 2.7 3.0 <pre>site_dict = weewx.restx.get_dict(config_dict, 'Uploader')\n    db_name = config_dict['StdArchive']['archive_database']\n    db_dict = config_dict['Databases'][db_name]\n    site_dict.setdefault('database_dict', db_dict)</pre> <pre>site_dict = config_dict['StdRESTful']['Uploader']\n    site_dict = accumulateLeaves(site_dict, max_level=1)\n    manager_dict = weewx.manager.open_manager_with_config(\n    config_dict, 'wx_binding')</pre>"},{"location":"upgrade/#database-apis","title":"Database APIs","text":"<p>The methods for obtaining, opening, and querying databases have changed. This affects only those who have   written code that accesses databases. </p> <p>   The class Manager and its subclasses have replaced the old Archive   class. The table name is no longer hard-coded, so developers should use the table name from the database   binding. There is no longer a separate StatsDb class, its functions having been   subsumed into the Manager class and its subclasses. </p> <p>   A new class DBBinder is the preferred way of getting a Manager class, as it will automatically take care of instantiating the right class, as   well as caching instances of Manager. An instance of DBBinder is held by the engine as attribute db_binder. Here's   an example of making a simple query. </p> 2.7 3.0 <pre>db = config_dict['StdArchive']['archive_database']\n    self.database_dict = config_dict['Databases'][db]\n    with weewx.archive.Archive.open(self.database_dict) as archive:\n    val = archive.getSql(\"SELECT AVG(windSpeed) FROM archive\"\n        \" WHERE dateTime&gt;? AND dateTime&lt;=?\",\n        (start_ts, end_ts))</pre> <pre>with self.engine.db_binder.get_manager('wx_binding') as mgr:\n    val = mgr.getSql(\"SELECT AVG(windSpeed) FROM %s\"\n        \" WHERE dateTime&gt;? AND dateTime&lt;=?\" %\n        mgr.table_name, (start_ts, end_ts))</pre>"},{"location":"upgrade/#generator-apis","title":"Generator APIs","text":"<p>   The base class for report generators has changed. The old class CachedReportGenerator no longer exists; its functionality has been replaced by an   instance of DBBinder, held by the generator superclass. This affects only those   who have written customer generators. </p> <p>Here's an example:</p> 2.7 3.0 <pre>class GaugeGenerator(weewx.reportengine.CachedReportGenerator)\n    def run(self):\n        archive_name = self.config_dict['GaugeGenerator']['archive_name']\n        archive = self._getArchive(archive_name)\n        results = archive.getSql(...)</pre> <pre>class GaugeGenerator(weewx.reportengine.ReportGenerator)\n    def run(self):\n        mgr = self.generator.db_binder.get_manager()\n        results = mgr.getSql(...)</pre>"},{"location":"upgrade/#extension-installer","title":"Extension installer","text":"<p>The setup.py utility is now included in the installation; it is no longer necessary   to keep a copy of the WeeWX source tree just for the setup.py utility. </p> <p>For .deb and .rpm installations, the command wee_setup is a symlink to setup.py. </p> <p>The options for installing extensions changed slightly to be more consistent with the rest of the options to   setup.py. </p> 2.7 3.0 <pre>setup.py --extension --install extensions/basic\n    setup.py --extension --install basic.tar.gz\n    setup.py --extension --uninstall basic\n    setup.py --extension --list\n    setup.py --extension --install basic.tar.gz --dryrun</pre> <pre>setup.py install --extension extensions/basic\n    setup.py install --extension basic.tar.gz\n    setup.py uninstall --extension basic\n    setup.py list-extensions\n    setup.py install --extension basic.tar.gz --dry-run</pre>"},{"location":"upgrade/#upgrading-to-v27","title":"Upgrading to V2.7","text":"<p>Version 2.7 is backwards compatible with earlier versions with one minor exception.</p> <p> It now includes the ability to localize the WeeWX and server uptimes. Previously, the labels days, hours, and minutes were hardcoded in a Python utility. There was no way of changing them. Now, like any other labels, they are taken from the skin configuration file, skin.conf, section [[Labels]]. Older configuration files had a definition for hour, but none for day, and minute. Also, the old definition for hour used an abbreviation hrs instead of hours. </p> <p>If you do nothing, your WeeWX and station uptimes will look like:</p> <pre>Weewx uptime:  1 day, 1 hrs, 41 minutes\nServer uptime: 2 days, 10 hrs, 22 minutes</pre> <p> Note how the label for hours is abbreviated and always uses the plural. If you want the previous behavior, or if you want to localize the labels, you should update your skin configuration file. Remove the old entries for hour and second and replace them with: </p> <pre>day               = \" day\",    \" days\"\nhour              = \" hour\",   \" hours\"\nminute            = \" minute\", \" minutes\"\nsecond            = \" second\", \" seconds\"</pre> <p>The first item is the singular spelling, the second the plural. This will result in the desired</p> <pre>Weewx uptime:  1 day, 1 hour, 41 minutes\nServer uptime: 2 days, 10 hours, 22 minutes</pre>"},{"location":"upgrade/#upgrading-to-v26","title":"Upgrading to V2.6","text":"<p>Version 2.6 is backwards compatible with earlier versions, with a couple of small exceptions.</p> <ul> <li>If you have written a custom WeeWX service, the install routine will try to insert its name into an     appropriate place in one of the five new lists of services to be run. You should check section [Engines][[WxEngine]] to make sure it made a reasonable guess.   </li> <li>If you have written a custom RESTful service, the architecture for these services has completely     changed. They are now first class services, and are treated like any other WeeWX service. There are some     guides to writing RESTful services using the new architecture at the top of the file bin/weewx/restx.py.     I can also help you with the transition.   </li> <li>Option interval in the CWOP configuration section has become option post_interval. This change should be done automatically by the install routine.   </li> <li>The mechanism for specifying RESTful services has changed. To activate a RESTful service, put the driver     in the restful_services list in [Engines][[WxEngine]]. The driver parameter is no     longer necessary in the RESTful service's configuration stanza. These changes should be done     automatically by the install routine.   </li> </ul>"},{"location":"upgrade/#upgrading-to-v24","title":"Upgrading to V2.4","text":"<p>The option time_length will now be the exact length of the resultant plot. Before,   a plot with time_length equal to 24 hours would result in a plot of 27 hours, now   it's 24 hours. If you want the old behavior, set it equal to 27 hours. To do this, change your section in   skin.conf from </p> <pre>[[day_images]]\n  x_label_format = %H:%M\n  bottom_label_format = %m/%d/%y %H:%M\n  time_length = 86400 # == 24 hours</pre> <p>to</p> <pre>[[day_images]]\n  x_label_format = %H:%M\n  bottom_label_format = %m/%d/%y %H:%M\n  time_length = 97200 # == 27 hours</pre> <p>The service StdTimeSync now synchronizes the console's onboard clock on startup.   This is nice because if the clock failed, perhaps because the battery was taken out, the time is corrected   first before data is downloaded from the logger's memory. To take advantage of this, you can move   service StdTimeSync to the front of the list of services to be run. For example: </p> <pre>[[WxEngine]]\n  # The list of services the main weewx engine should run:\n  service_list = weewx.wxengine.StdTimeSynch, weewx.wxengine.StdConvert,\n  weewx.wxengine.StdCalibrate, weewx.wxengine.StdQC, weewx.wxengine.StdArchive, weewx.wxengine.StdPrint,\n  weewx.wxengine.StdRESTful, weewx.wxengine.StdReport</pre>"},{"location":"upgrade/#upgrading-to-v23","title":"Upgrading to V2.3","text":"<p>The signature of the function \"loader\", used to return an instance of the station   device driver, has changed slightly. It has changed from </p> <pre>loader(config_dict)</pre> <p>to</p> <pre>loader(config_dict, engine)</pre> <p>That is, a second parameter, engine, has been added. This is a reference to the   WeeWX engine. </p> <p>This change will affect only those who have written their own device driver.</p>"},{"location":"upgrade/#upgrading-to-v22","title":"Upgrading to V2.2","text":"<p>Version 2.2 introduces a schema, found in      bin/user/schemas.py, for the stats database. This schema is used only when initially creating the   database. If you have a specialized stats database, that is, one that saves types other than the default   that comes with WeeWX, you should edit this file to reflect your changes before attempting to rebuild the   database. </p>"},{"location":"upgrade/#upgrading-to-v20","title":"Upgrading to V2.0","text":"<p>Version 2.0 introduces many new features, including a revamped internal engine. There are two changes that   are not backwards compatible: </p> <ul> <li>The configuration file, weewx.conf. When upgrading from V1.X, the setup     utility will install a new, fresh copy of weewx.conf, which you will then have     to edit by hand. Thereafter, V2.X upgrades should be automatic.   </li> <li>Custom services. If you have written a custom service, it will have to be updated to use the new engine.     The overall architecture is very similar, except that functions must be bound to events, rather     than get called implicitly. See the sections Customizing       a Service and Adding a Service in the Customization Guide for details on how to do this.   </li> </ul> <p>All skins should be completely backwards compatible, so you should not have to change your templates or skin   configuration file, skin.conf. </p> <p>If you have written a custom report generator it should also be backwards compatible.</p>"},{"location":"upgrade/#upgrading-to-v114","title":"Upgrading to V1.14","text":"<p>Version 1.14 introduces some new webpages that have been expressly formatted for the smartphone by using jQuery. </p> <p>The skins shipped with the distribution take advantage of these features. If you do nothing, your old skins   will continue to work, but you will not be taking advantage of these new webpages. </p> <p>If you want them, then you have two choices:</p> <ol> <li>Rename your old skin directory (call it \"skins.old\") then do the install. This will install the new skin distribution. You can then modify it to reflect any changes you have made, referring to  skins.old for guidance. If you have not changed many things, this approach will be the easiest.   </li> <li>Alternatively, change the contents of your existing skin directory to include the new webpages. If you take this approach, you will need to copy over the contents of the subdirectory  skins/Standard/smartphone from the distribution into your skins/Standard directory. You will then need to modify your skin.conf.     <p>After the section that looks like</p> <pre>[[[Mobile]]]\n      template = mobile.html.tmpl</pre> <p>add the following directives:</p> <pre>[[[MobileSmartphone]]]\n      template = smartphone/index.html.tmpl\n      [[[MobileTempOutside]]]\n      template = smartphone/temp_outside.html.tmpl\n      [[[MobileRain]]]\n      template = smartphone/rain.html.tmpl\n      [[[MobileBarometer]]]\n      template = smartphone/barometer.html.tmpl\n      [[[MobileWind]]]\n      template = smartphone/wind.html.tmpl\n      [[[MobileRadar]]]\n      template = smartphone/radar.html.tmpl</pre> <p>Then modify section [CopyGenerator] to add the highlighted files:     </p> <pre>[CopyGenerator]\n      #\n      # This section is used by the generator CopyGenerator\n      #\n\n      # List of files that are to be copied at the first invocation of the generator only\n      copy_once = backgrounds/*, weewx.css, mobile.css, favicon.ico, smartphone/icons/*, smartphone/custom.js</pre> </li> </ol> <p>Whichever approach you chose, the generated files will appear in public_html/smartphone. The start of the document root will be at public_html/smartphone/index.html. You may want to add a link to this in the template for your main index page skins/Standard/index.html.tmpl. </p>"},{"location":"upgrade/#upgrading-to-v113","title":"Upgrading to V1.13","text":"<p>Version 1.13 changed the way binding happens to the databases used in reports so that it happens much later. The upshot is that the signature of a few functions changed. Most you are unlikely to encounter. The exception is if you have written custom template search lists, as described in the Customizing weewx guide. This section has been updated to reflect the new function signatures. As a side effect, the illustrated example actually has become much simpler! </p> <p>No changes to skins.</p>"},{"location":"upgrade/#upgrading-to-v110","title":"Upgrading to V1.10","text":"<p>Version 1.10 introduced several new features.</p>"},{"location":"upgrade/#new-almanac-features-icon-and-mobile-template","title":"New almanac features, icon, and mobile template","text":"<p>Version 1.10 introduces some extra almanac features, such as the azimuth and elevation of the sun and moon, or when the next solstice will be. It also includes a template formatted for smartphones, as well as an icon (\"favicon.ico\") that displays in your browser toolbar. The skins shipped with the distribution take advantage of these features. If you do nothing, your old skins will continue to work, but you will not take advantage of these new features. </p> <p>If you want these new features then you have two choices:</p> <ol> <li>Rename your old skin directory (call it \"skin.old\") then do the install. This will install the new skin distribution. You can modify it to reflect any changes you have made, referring to skin.old for guidance.   </li> <li>Alternatively, change the contents of your existing skin directory to take advantage of the new features. If you take this approach, you will need to copy over files favicon.ico, mobile.css, and mobile.html.tmpl from the distribution into your skin/Standard directory. Modify skins/Standard/index.html.tmpl to take advantage of the new almanac features, using the version shipped with the distribution for guidance. You will then need to modify your skin.conf.     <p>Add a new [[[Mobile]]] section:</p> <pre>[FileGenerator]\n      ...\n      [[ToDate]]\n      ...\n      [[[Mobile]]]\n      template = mobile.html.tmpl</pre> <p>Then add mobile.css and  favicon.ico to the list of files to be copied on report generation:     </p> <pre>[CopyGenerator]\n      copy_once = backgrounds/*, weewx.css, mobile.css, favicon.ico</pre> </li> </ol> <p>Which approach you should take will depend on how extensively you have modified the stock skin distribution. If the modifications are slight, approach #1 will be easier, otherwise use approach #2. </p>"},{"location":"upgrade/#backwards-compatibility","title":"Backwards compatibility","text":"<p>With the introduction of explicit control of output units in the templates such as</p> <pre>$day.outTemp.max.degree_C</pre> <p>the calling signature of the following two Python classes was changed</p> <ul> <li>weewx.stats.TaggedStats</li> <li>weewx.stats.TimeSpanStats</li> </ul> <p>The example of writing a custom generator MyFileGenerator (which produced \"all time\" statistics) has been changed to reflect the new signatures. </p> <p>This will only affect you if you have written a custom generator.</p>"},{"location":"upgrade/#upgrading-to-v18","title":"Upgrading to V1.8","text":"<p>With the introduction of a standard archiving service,  StdArchive, the names of some events have changed. This will not affect you unless you have written a custom service. </p>"},{"location":"upgrade/#upgrading-to-v17","title":"Upgrading to V1.7","text":"<p>V1.7 introduces skins. The skins live in subdirectory skins. They are not compatible with the old template subdirectory --- you can't simply rename templates to skins. </p> <p>The part of the configuration file dealing with the presentation layer has been split off into a separate file skin.conf. Hence, once again, the installation script setup.py will NOT merge your old  weewx.conf configuration file into the new one. You will have to re-edit weewx.conf to put in your customizations. You may also have to edit  skin.conf for whatever skin you choose (right now, only one skin, Standard, comes with the distribution). </p> <p>However, a reinstall of V1.7 will merge your changes for weewx.conf. It will also merge any changes you have made to skin.conf as well. </p> <p>Please check the following:</p> <ul> <li>Option \"altitude\" in section [Station] now takes a unit. Hence, it should look something like:     <pre>altitude = 120, meter</pre> </li> <li>In a similar manner, options heating_base and cooling_base in skin.conf also take units:     <pre>heating_base = 65, degree_F\ncooling_base = 65, degree_F</pre> </li> </ul> <p>The directory 'templates' is no longer used; it has been replaced with directory 'skins'. You may delete it if you wish: </p> <pre>rm -r templates</pre>"},{"location":"upgrade/#upgrading-to-v15","title":"Upgrading to V1.5","text":"<p>Because the configuration file weewx.conf changed significantly going from V1.4 to V1.5, the installation script setup.py will NOT merge your old configuration file into the new one. You will have to re-edit weewx.conf to put in your customizations. </p>"},{"location":"upgrade/#upgrading-to-v14","title":"Upgrading to V1.4","text":"<p>Option clock_check, previously found in the [VantagePro] section, is now found in the [Station] section. The install program will put a default value in the new place, but it will not delete nor move your old value over. If you have changed this value or if you cannot stand the thought of clock_check appearing in two different places, you should delete the old one found under [VantagePro] and make sure the new value, found under [Station] is correct. </p> <p>Two Python files are no longer used, so they may be deleted from your installation if you wish:</p> <pre>rm bin/weewx/processdata.py\nrm bin/weewx/mainloop.py</pre> <p>In addition, file readme.htm has been moved to subdirectory docs, so the old one can be deleted: </p> <pre>rm readme.htm</pre>"},{"location":"custom/cheetah-generator/","title":"The Cheetah generator","text":"<p>File generation is done using the Cheetah templating engine, which processes a template, replacing any symbolic tags, then produces an output file. Typically, it runs after each new archive record (usually about every five minutes), but it can also run on demand using the utility <code>wee_reports</code>.</p> <p>The Cheetah engine is very powerful, essentially letting you have the full semantics of Python available in your templates. As this would make the templates incomprehensible to anyone but a Python programmer, WeeWX adopts a very small subset of its power.</p> <p>The Cheetah generator is controlled by the configuration options in the section <code>[CheetahGenerator]</code> of the skin configuration file.</p> <p>Let's take a look at how this works.</p>"},{"location":"custom/cheetah-generator/#which-files-get-processed","title":"Which files get processed?","text":"<p>Each template file is named something like <code>D/F.E.tmpl</code>, where <code>D</code> is the (optional) directory the template sits in and will also be the directory the results will be put in, and <code>F.E</code> is the generated file name. So, given a template file with name <code>Acme/index.html.tmpl</code>, the results will be put in <code>HTML_ROOT/Acme/index.html</code>.</p> <p>The configuration for a group of templates will look something like this:</p> <pre><code>[CheetahGenerator]\n    [[index]]\n        template = index.html.tmpl\n    [[textfile]]\n        template = filename.txt.tmpl\n    [[xmlfile]]\n        template = filename.xml.tmpl\n</code></pre> <p>There can be only one template in each block. In most cases, the block name does not matter \u2014 it is used only to isolate each template. However, there are four block names that have special meaning: <code>SummaryByDay</code>, <code>SummaryByMonth</code>, <code>SummaryByYear</code>, and <code>ToDate</code>.</p>"},{"location":"custom/cheetah-generator/#specifying-template-files","title":"Specifying template files","text":"<p>By way of example, here is the <code>[CheetahGenerator]</code> section from the <code>skin.conf</code> for the skin <code>Seasons</code>.</p> <pre><code>[CheetahGenerator]\n    # The CheetahGenerator creates files from templates.  This section\n    # specifies which files will be generated from which template.\n\n    # Possible encodings include 'html_entities', 'strict_ascii', 'normalized_ascii',\n    # as well as those listed in https://docs.python.org/3/library/codecs.html#standard-encodings\n    encoding = html_entities\n\n    [[SummaryByMonth]]\n        # Reports that summarize \"by month\"\n        [[[NOAA_month]]]\n            encoding = normalized_ascii\n            template = NOAA/NOAA-%Y-%m.txt.tmpl\n\n    [[SummaryByYear]]\n        # Reports that summarize \"by year\"\n        [[[NOAA_year]]]\n            encoding = normalized_ascii\n            template = NOAA/NOAA-%Y.txt.tmpl\n\n    [[ToDate]]\n        # Reports that show statistics \"to date\", such as day-to-date,\n        # week-to-date, month-to-date, etc.\n        [[[index]]]\n            template = index.html.tmpl\n        [[[statistics]]]\n            template = statistics.html.tmpl\n        [[[telemetry]]]\n            template = telemetry.html.tmpl\n        [[[tabular]]]\n            template = tabular.html.tmpl\n        [[[celestial]]]\n            template = celestial.html.tmpl\n            # Uncomment the following to have WeeWX generate a celestial page only once an hour:\n            # stale_age = 3600\n        [[[RSS]]]\n            template = rss.xml.tmpl\n</code></pre> <p>The skin contains three different kinds of generated output:</p> <ol> <li> <p>Summary by Month (line 9). The skin uses <code>SummaryByMonth</code> to produce NOAA   summaries, one for each month, as a simple text file.</p> </li> <li> <p>Summary by Year (line 15). The skin uses <code>SummaryByYear</code> to produce NOAA   summaries, one for each year, as a simple text file.</p> </li> <li> <p>Section \"To Date\" (line 21). The skin produces an HTML <code>index.html</code> page,   as well as HTML files for detailed statistics, telemetry, and celestial   information. It also includes a master page (<code>tabular.html</code>) in which NOAA   information is displayed. All these files are HTML.</p> </li> </ol> <p>Because the option</p> <pre><code>encoding = html_entities\n</code></pre> <p>appears directly under <code>[CheetahGenerator]</code>, this will be the default encoding of the generated files unless explicitly overridden. We see an example of this under <code>[SummaryByMonth]</code> and <code>[SummaryByYear]</code>, which override the default by specifying option <code>normalized_ascii</code> (which replaces accented characters with a  non-accented analog).</p> <p>Other than <code>SummaryByMonth</code> and <code>SummaryByYear</code>, the section names are arbitrary. The section <code>[[ToDate]]</code> could just as well have been called <code>[[files_to_date]]</code>, and the sections <code>[[[index]]]</code>, <code>[[[statistics]]]</code>, and <code>[[[telemetry]]]</code> could just as well have been called <code>[[[tom]]]</code>, <code>[[[dick]]]</code>, and <code>[[[harry]]]</code>.</p>"},{"location":"custom/cheetah-generator/#summarybyyear","title":"[[SummaryByYear]]","text":"<p>Use <code>SummaryByYear</code> to generate a set of files, one file per year. The name of the template file should contain a strftime() code for the year; this will be replaced with the year of the data in the file.</p> <pre><code>[CheetahGenerator]\n[[SummaryByYear]]\n# Reports that summarize \"by year\"\n[[[NOAA_year]]]\nencoding = normalized_ascii\ntemplate = NOAA/NOAA-%Y.txt.tmpl\n</code></pre> <p>The template <code>NOAA/NOAA-%Y.txt.tmpl</code> might look something like this:</p> <pre><code>           SUMMARY FOR YEAR $year.dateTime\n\nMONTHLY TEMPERATURES AND HUMIDITIES:\n#for $record in $year.records\n$record.dateTime $record.outTemp $record.outHumidity\n#end for\n</code></pre>"},{"location":"custom/cheetah-generator/#summarybymonth","title":"[[SummaryByMonth]]","text":"<p>Use <code>SummaryByMonth</code> to generate a set of files, one file per month. The name of the template file should contain a strftime() code for year and month; these will be replaced with the year and month of the data in the file.</p> <pre><code>[CheetahGenerator]\n[[SummaryByMonth]]\n# Reports that summarize \"by month\"\n[[[NOAA_month]]]\nencoding = normalized_ascii\ntemplate = NOAA/NOAA-%Y-%m.txt.tmpl\n</code></pre> <p>The template <code>NOAA/NOAA-%Y-%m.txt.tmpl</code> might look something like this:</p> <pre><code>           SUMMARY FOR MONTH $month.dateTime\n\nDAILY TEMPERATURES AND HUMIDITIES:\n#for $record in $month.records\n$record.dateTime $record.outTemp $record.outHumidity\n#end for\n</code></pre>"},{"location":"custom/cheetah-generator/#summarybyday","title":"[[SummaryByDay]]","text":"<p>While the Seasons skin does not make use of it, there is also a <code>SummaryByDay</code> capability. As the name suggests, this results in one file per day. The name of the template file should contain a strftime() code for the year, month and day; these will be replaced with the year, month, and day of the data in the file.</p> <pre><code>[CheetahGenerator]\n[[SummaryByDay]]\n# Reports that summarize \"by day\"\n[[[NOAA_day]]]\nencoding = normalized_ascii\ntemplate = NOAA/NOAA-%Y-%m-%d.txt.tmpl\n</code></pre> <p>The template <code>NOAA/NOAA-%Y-%m-%d.txt.tmpl</code> might look something like this:</p> <pre><code>           SUMMARY FOR DAY $day.dateTime\n\nHOURLY TEMPERATURES AND HUMIDITIES:\n#for $record in $day.records\n$record.dateTime $record.outTemp $record.outHumidity\n#end for\n</code></pre> <p>Note</p> <p>This can create a lot of files \u2014 one per day. If you have 3 years of records, this would be more than 1,000 files!</p>"},{"location":"custom/cheetah-generator/#tags","title":"Tags","text":"<p>If you look inside a template, you will see it makes heavy use of tags. As the Cheetah generator processes the template, it replaces each tag with an appropriate value and, sometimes, a label. This section discusses the details of how that happens.</p> <p>If there is a tag error during template generation, the error will show up in the log file. Many errors are obvious \u2014 Cheetah will display a line number and list the template file in which the error occurred. Unfortunately, in other cases, the error message can be very cryptic and not very useful. So make small changes and test often. Use the utility wee_reports to speed up the process.</p> <p>Here are some examples of tags:</p> <pre><code>$current.outTemp\n$month.outTemp.max\n$month.outTemp.maxtime\n</code></pre> <p>These code the current outside temperature, the maximum outside temperature for the month, and the time that maximum occurred, respectively. So a template file that contains:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Current conditions&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;Current temperature = $current.outTemp&lt;/p&gt;\n        &lt;p&gt;Max for the month is $month.outTemp.max, which occurred at $month.outTemp.maxtime&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>would be all you need for a very simple HTML page that would display the text (assuming that the unit group for temperature is <code>degree_F</code>):</p> <p> Current temperature = 51.0\u00b0F Max for the month is 68.8\u00b0F, which occurred at 07-Oct-2009 15:15 </p> <p>The format that was used to format the temperature (<code>51.0</code>) is specified in section <code>[Units][[StringFormat]]</code>. The unit label <code>\u00b0F</code> is from section <code>[Units][[Labels]]</code>, while the time format is from <code>[Units][[TimeFormats]]</code>.</p> <p>As we saw above, the tags can be very simple:</p> <pre><code># Output max outside temperature using an appropriate format and label:\n$month.outTemp.max\n</code></pre> <p>Most of the time, tags will \"do the right thing\" and are all you will need. However, WeeWX offers extensive customization of the tags for specialized applications such as XML RSS feeds, or rigidly formatted reports (such as the NOAA reports). This section specifies the various tag options available.</p> <p>There are two different versions of the tags, depending on whether the data is \"current\", or an aggregation over time. However, both versions are similar.</p>"},{"location":"custom/cheetah-generator/#time-period-current","title":"Time period <code>$current</code>","text":"<p>Time period <code>$current</code> represents a current observation. An example would be the current barometric pressure:</p> <pre><code>$current.barometer\n</code></pre> <p>Formally, for current observations, WeeWX first looks for the observation type in the record emitted by the <code>NEW_ARCHIVE_RECORD</code> event. This is generally the data emitted by the station console, augmented by any derived variables (e.g., wind chill) that you might have specified. If the observation type cannot be found there, the most recent record in the database will be searched. If it still cannot be found, WeeWX will attempt to calculate it using the xtypes system.</p> <p>The most general tag for a \"current\" observation looks like:</p> <pre><code>$current(timestamp=some_time, max_delta=delta_t,data_binding=binding_name)\n    .obstype\n    [.unit_conversion]\n    [.rounding]\n    [.formatting]\n</code></pre> <p>Where:</p> <p><code>timestamp</code> is a timestamp that you want to display in unix epoch time. It is optional, The default is to display the value for the current time.</p> <p><code>max_delta</code> is the largest acceptable time difference (in seconds) between the time specified by <code>timestamp</code> and a record's timestamp in the database. By default, it is zero, which means there must be an exact match with a specified time for a record to be retrieved. If it were <code>30</code>, then a record up to 30 seconds away would be acceptable.</p> <p><code>data_binding</code> is a binding name to a database. An example would be <code>wx_binding</code>. See the section Binding names for more details.</p> <p><code>obstype</code> is an observation type, such as <code>barometer</code>. This type must appear either in the current record, as a field in the database, or can be derived from some combination of the two as an  XType.</p> <p><code>unit_conversion</code> is an optional unit conversion tag. If provided, the results will be converted into the specified units, otherwise the default units specified in the skin configuration file (in section <code>[Units][[Groups]]</code>) will be used. See the section Unit conversion options.</p> <p><code>rounding</code> is an optional rounding tag.  If provided, it rounds the result to a fixed number of decimal digits. See the section Rounding options.</p> <p><code>formatting</code> is an optional formatting tag. If provided, it controls how the value will appear. See the section Formatting options.</p>"},{"location":"custom/cheetah-generator/#time-period-latest","title":"Time period $latest","text":"<p>Time period <code>$latest</code> is very similar to <code>$current</code>, except that it uses the last available timestamp in a database. Usually, <code>$current</code> and <code>$latest</code> are the same, but if a data binding points to a remote database, they may not be. See the section Using multiple bindings for an example where this happened.</p>"},{"location":"custom/cheetah-generator/#aggregation-periods","title":"Aggregation periods","text":"<p>Aggregation periods is the other kind of tag. For example,</p> <pre><code>$week.rain.sum\n</code></pre> <p>represents an aggregation over time, using a certain aggregation type. In this example, the aggregation time is a week, and the aggregation type is summation. So, this tag represents the total rainfall over a week.</p> <p>The most general tag for an aggregation over time looks like:</p> <pre><code>$period(data_binding=binding_name[, ago=delta])\n    .obstype\n    .aggregation\n    [.unit_conversion]\n    [.rounding]\n    [.formatting]\n</code></pre> <p>Where:</p> <p><code>period</code> is the aggregation period over which the aggregation is to be done. Possible choices are listed in the aggregation periods table.</p> <p><code>data_binding</code> is a binding name to a database. An example would be <code>wx_binding</code>. See the section Binding names for more details.</p> <p><code>ago</code> is a keyword that depends on the aggregation period. For example, for week, it would be <code>weeks_ago</code>, for day, it would be <code>days_ago</code>, etc.</p> <p><code>delta</code> is an integer indicating which aggregation period is desired. For example <code>$week(weeks_ago=1)</code> indicates last week, <code>$day(days_ago=2)</code> would be the day-before-yesterday, etc. The default is zero: that is, this aggregation period.</p> <p><code>obstype</code> is an observation type. This is generally any observation type that appears in the database (such as <code>outTemp</code> or <code>windSpeed</code>), as well a most XTypes. However, not all aggregations are supported for all types.</p> <p><code>aggregation</code> is an aggregation type. If you ask for <code>$month.outTemp.avg</code> you are asking for the average outside temperature for the month. Possible aggregation types are given in the reference Aggregation types.</p> <p><code>unit_conversion</code> is an optional unit conversion tag. If provided, the results will be converted into the specified units, otherwise the default units specified in the skin configuration file (in section <code>[Units][[Groups]]</code>) will be used. See the section Unit conversion options.</p> <p><code>rounding</code> is an optional rounding tag.  If provided, it rounds the result to a fixed number of decimal digits. See the section Rounding options.</p> <p><code>formatting</code> is an optional formatting tag. If provided, it controls how the value will appear. See the section Formatting options.</p> <p>There are several aggregation periods that can be used:</p> Aggregation periods Aggregation period Meaning Example Meaning of example $hour This hour. $hour.outTemp.maxtime The time of the max temperature this hour. $day Today (since midnight). $day.outTemp.max The max temperature since midnight $yesterday Yesterday. Synonym for $day($days_ago=1).          $yesterday.outTemp.maxtime The time of the max temperature yesterday. $week This week. The start of the week is set by option week_start.          $week.outTemp.max The max temperature this week. $month This month (since the first of the month). $month.outTemp.min The minimum temperature this month. $year This year (since 1-Jan). $year.outTemp.max The max temperature since the start of the year. $rainyear This rain year. The start of the rain year is set by option rain_year_start.          $rainyear.rain.sum The total rainfall for this rain year.  $alltime              All records in the database given by binding_name.          $alltime.outTemp.max              The maximum outside temperature in the default database.          <p>The \"<code>ago</code>\" parameters can be useful for statistics farther in the past. Here are some examples:</p> Aggregation period Example Meaning $hour(hours_ago=h)          $hour(hours_ago=1).outTemp.avg The average temperature last hour (1 hour ago). $day(days_ago=d)          $day(days_ago=2).outTemp.avg The average temperature day before yesterday (2 days ago).          $week(weeks_ago=w)          $week(weeks_ago=1).outTemp.max The maximum temperature last week. $month(months_ago=m)          $month(months_ago=1).outTemp.max The maximum temperature last month. $year(years_ago=y)          $year(years_ago=1).outTemp.max The maximum temperature last year."},{"location":"custom/cheetah-generator/#unit-conversion-options","title":"Unit conversion options","text":"<p>The option <code>unit_conversion</code> can be used with either current observations or with aggregations. If supplied, the results will be converted to the specified units. For example, if you have set <code>group_pressure</code> to inches of mercury (<code>inHg</code>), then the tag</p> <pre><code>Today's average pressure=$day.barometer.avg\n</code></pre> <p>would normally give a result such as</p>  Today's average pressure=30.05 inHg  <p>However, if you add <code>mbar</code> to the end of the tag,</p> <pre><code>Today's average pressure=$day.barometer.avg.mbar\n</code></pre> <p>then the results will be in millibars:</p>  Today's average pressure=1017.5 mbar  <p>If an inappropriate or nonsense conversion is asked for, e.g.,</p> <pre><code>Today's minimum pressure in mbars: $day.barometer.min.mbar\nor in degrees C: $day.barometer.min.degree_C\nor in foobar units: $day.barometer.min.foobar\n</code></pre> <p>then the offending tag(s) will be put in the output:</p>  Today's minimum pressure in mbars: 1015.3   or in degrees C: $day.barometer.min.degree_C   or in foobar units: $day.barometer.min.foobar"},{"location":"custom/cheetah-generator/#rounding-options","title":"Rounding options","text":"<p>The data in the resultant tag can be optionally rounded to a fixed number of decimal digits. This is useful when emitting raw data or JSON strings. It should not be used with formatted data. In that case, using a <code>format string</code> would be a better choice.</p> <p>The structure of the option is</p> <pre><code>.round(ndigits=None)\n</code></pre> <p>where <code>ndigits</code> is the number of decimal digits to retain. If <code>None</code> (the default), then all digits will be retained.</p>"},{"location":"custom/cheetah-generator/#formatting-options","title":"Formatting options","text":"<p>A variety of options are available to you to customize the formatting of the final observation value. They can be used whenever a tag results in a <code>ValueHelper</code>, which is almost all the time. This table summarizes the options:</p> Formatting options Formatting option Comment .format(args)              Format the value as a string, according to a set of optional         args.          .long_form(args)              Format delta times in the \"long form\", according to a         set of optional args.          .ordinal_compass Format the value as a compass ordinals (e.g., \"SW\"), useful     for wind directions. The ordinal abbreviations are set by option     directions     in the skin configuration file.          .json              Format the value as a         JSON string.          .raw        Return the value \"as is\", without being converted to a string and       without any formatting applied. This can be useful for doing       arithmetic directly within the templates. You must be prepared       to deal with a potential value of None."},{"location":"custom/cheetah-generator/#format","title":"format()","text":"<p>The results of a tag can be optionally formatted using option <code>format()</code>. It has the formal structure:</p> <pre><code>format(format_string=None, None_string=None, add_label=True, localize=True)\n</code></pre> <p>Here is the meaning of each of the optional arguments:</p> Optional arguments for format() Optional argument Comment format_string  If set, use the supplied string to format the value. Otherwise, if set to None, then an appropriate value from [Units][[StringFormats]] will be used.      None_string  Should the observation value be NONE, then use the supplied string (typically, something like \"N/A\"). If None_string is set to None, then the value for NONE in [Units][[StringFormats]] will be used.          add_label  If set to True (the default), then a unit label (e.g., \u00b0F) from skin.conf will be attached to the end. Otherwise, it will be left out.          localize  If set to True (the default), then localize the results. Otherwise, do not.          <p>If you're willing to honor the ordering of the arguments, the argument name can be omitted.</p>"},{"location":"custom/cheetah-generator/#long_form","title":"long_form()","text":"<p>The option <code>long_form()</code>, can be used to format delta times. A delta time is the difference between two times, for example, the amount of uptime (the difference between start up and the current time). By default, this will be formatted as the number of elapsed seconds. For example, a template with the following</p> <pre><code>&lt;p&gt;WeeWX has been up $station.uptime&lt;/p&gt;\n</code></pre> <p>will result in</p>  WeeWX has been up 101100 seconds  <p>The \"long form\" breaks the time down into constituent time elements. For example,</p> <pre><code>&lt;p&gt;WeeWX has been up $station.uptime.long_form&lt;/p&gt;\n</code></pre> <p>results in</p>  WeeWX has been up 1 day, 4 hours, 5 minutes  <p>The option <code>long_form()</code> has the formal structure</p> <pre><code>long_form(format_string=None, None_string=None)\n</code></pre> <p>Here is the meaning of each of the optional arguments:</p> Optional arguments for long_form() Optional argument Comment format_string              Use the supplied string to format the value.          None_string              Should the observation value be NONE,         then use the supplied string to format the value (typically,         something like \"N/A\").          <p>The argument <code>format_string</code> uses special symbols to represent its constitutent components. Here's what they mean:</p> Symbol Meaning <code>day</code> The number of days <code>hour</code> The number of hours <code>minute</code> The number of minutes <code>second</code> The number of seconds <code>day_label</code> The label used for days <code>hour_label</code> The label used for hours <code>minute_label</code> The label used for minutes <code>second_label</code> The label used for seconds <p>Putting this together, the example above could be written</p> <pre><code>&lt;p&gt;WeeWX has been up $station.uptime.long_form(format_string=\"%(day)d%(day_label)s, %(hour)d%(hour_label)s, %(minute)d%(minute_label)s\")&lt;/p&gt;\n</code></pre>"},{"location":"custom/cheetah-generator/#formatting-examples","title":"Formatting examples","text":"<p>This section gives a number of example tags, and their expected output. The following values are assumed:</p> Values used in the formatting examples Observation Value              outTemp          45.2\u00b0F              UV          None              windDir          138\u00b0              dateTime          1270250700              uptime          101100 seconds <p>Here are the examples:</p> Formatting options with expected results Tag Result Resulttype Comment $current.outTemp 45.2\u00b0F str  String formatting from [Units][[StringFormats]]. Label from [Units][[Labels]].          $current.outTemp.format 45.2\u00b0F str              Same as the $current.outTemp.          $current.outTemp.format() 45.2\u00b0F str              Same as the $current.outTemp.          $current.outTemp.format(format_string=\"%.3f\") 45.200\u00b0F str              Specified string format used; label from [Units][[Labels]].          $current.outTemp.format(\"%.3f\") 45.200\u00b0F str              As above, except a positional argument, instead of the named argument, is being used.          $current.outTemp.format(add_label=False) 45.2 str              No label. The string formatting is from [Units][[StringFormats]].          $current.UV N/A str              The string specified by option NONE in  [Units][[StringFormats]].          $current.UV.format(None_string=\"No UV\") No UV str              Specified None_string is used.          $current.windDir 138\u00b0 str              Formatting is from option degree_compass in  [Units][[StringFormats]].          $current.windDir.ordinal_compass SW str              Ordinal direction from section [Units][[Ordinates]] is being substituted.          $current.dateTime 02-Apr-2010\u00a016:25 str              Time formatting from [Units][[TimeFormats]] is being used.          $current.dateTime.format(format_string=\"%H:%M\") 16:25 str              Specified time format used.          $current.dateTime.format(\"%H:%M\") 16:25 str              As above, except a positional argument, instead of the named         argument, is being used.          $current.dateTime.raw 1270250700 int              Raw Unix epoch time. The result is an integer.          $current.outTemp.raw 45.2 float              Raw float value. The result is a float.          $current.outTemp.degree_C.raw 7.33333333 float              Raw float value in degrees Celsius. The result is a float.          $current.outTemp.degree_C.json 7.33333333 str              Value in degrees Celsius, converted to a JSON string.          $current.outTemp.degree_C.round(2).json 7.33 str              Value in degrees Celsius, rounded to two decimal digits, then         converted to a JSON string.          $station.uptime 101100 seconds str              WeeWX uptime.          $station.uptime.hour 28.1 hours str              WeeWX uptime, with unit conversion to hours.          $station.uptime.long_form 1 day, 4 hours, 5 minutes str              WeeWX uptime with \"long form\" formatting."},{"location":"custom/cheetah-generator/#start-end-and-datetime","title":"start, end, and dateTime","text":"<p>While not an observation type, in many ways the time of an observation, <code>dateTime</code>, can be treated as one. A tag such as</p> <pre><code>$current.dateTime\n</code></pre> <p>represents the current time (more properly, the time as of the end of the last archive interval) and would produce something like</p>  01/09/2010 12:30:00  <p>Like true observation types, explicit formats can be specified, except that they require a strftime() time format , rather than a string format.</p> <p>For example, adding a format descriptor like this:</p> <pre><code>$current.dateTime.format(\"%d-%b-%Y %H:%M\")\n</code></pre> <p>produces</p>  09-Jan-2010 12:30  <p>For aggregation periods, such as <code>$month</code>, you can request the start, end, or length of the period, by using suffixes <code>.start</code>, <code>.end</code>, or <code>.length</code>, respectively. For example,</p> <pre><code>The current month runs from $month.start to $month.end and has $month.length.format(\"%(day)d %(day_label)s\").\n</code></pre> <p>results in</p>  The current month runs from 01/01/2010 12:00:00 AM to 02/01/2010 12:00:00 AM and has 31 days.  <p>The returned string values will always be in local time. However, if you ask for the raw value</p> <pre><code>$current.dateTime.raw\n</code></pre> <p>the returned value will be in Unix Epoch Time (number of seconds since 00:00:00 UTC 1 Jan 1970, i.e., a large number), which you must convert yourself. It is guaranteed to never be <code>None</code>, so you don't worry have to worry about handling a <code>None</code> value.</p>"},{"location":"custom/cheetah-generator/#tag-trend","title":"Tag $trend","text":"<p>The tag <code>$trend</code> is available for time trends, such as changes in barometric pressure. Here are some examples:</p> Tag Results <code>$trend.barometer</code> -.05 inHg <code>$trend(time_delta=3600).barometer</code> -.02 inHg <code>$trend.outTemp</code> 1.1 \u00b0C <code>$trend.time_delta</code> 10800 secs <code>$trend.time_delta.hour</code> 3 hrs <p>Note how you can explicitly specify a time interval in the tag itself (2nd row in the table above). If you do not specify a value, then a default time interval, set by option <code>time_delta</code> in the skin configuration file, will be used. This value can be retrieved by using the syntax <code>$trend.time_delta</code> (4th row in the table).</p> <p>For example, the template expression</p> <pre><code>The barometer trend over $trend.time_delta.hour is $trend.barometer.format(\"%+.2f\")\n</code></pre> <p>would result in</p>  The barometer trend over 3 hrs is +.03 inHg."},{"location":"custom/cheetah-generator/#tag-span","title":"Tag $span","text":"<p>The tag <code>$span</code> allows aggregation over a user defined period up to and including the current time. Its most general form looks like:</p> <pre><code>$span([data_binding=binding_name][,delta=delta][,boundary=(None|'midnight')])\n    .obstype\n    .aggregation\n    [.unit_conversion]\n    [.formatting]\n</code></pre> <p>Where:</p> <p><code>data_binding</code> is a binding name to a database. An example would be <code>wx_binding</code>. See the section Binding names for more details.</p> <p><code>delta</code> is one or more comma separated delta settings from the table below. If more than one delta setting is included then the period used for the aggregate is the sum of the individual delta settings. If no delta setting is included, or all included delta settings are zero, the returned aggregate is based on the current obstype only.</p> <p><code>boundary</code> is an optional specifier that can force the starting time to a time boundary. If set to 'midnight', then the starting time will be at the previous midnight. If left out, then the start time will be the sum of the optional deltas.</p> <p><code>obstype</code> is an observation type, such as <code>outTemp</code>.</p> <p><code>aggregation</code> is an aggregation type. If you ask for <code>$month.outTemp.avg</code> you are asking for the average outside temperature for the month. Possible aggregation types are given in the reference Aggregation types.</p> <p><code>unit_conversion</code> is an optional unit conversion tag. If provided, the results will be converted into the specified units, otherwise the default units specified in the skin configuration file (in section <code>[Units][[Groups]]</code>) will be used. See the section Unit conversion options.</p> <p><code>formatting</code> is an optional formatting tag. If provided, it controls how the value will appear. See the section Formatting options.</p> <p>There are several delta settings that can be used:</p> Delta Setting Example Meaning time_delta=seconds $span(time_delta=1800).outTemp.avg The average temperature over the last immediate 30 minutes (1800 seconds).          hour_delta=hours $span(hour_delta=6).outTemp.avg The average temperature over the last immediate 6 hours.          day_delta=days $span(day_delta=1).rain.sum The total rainfall over the last immediate 24 hours.          week_delta=weeks $span(week_delta=2).barometer.max The maximum barometric pressure over the last immediate 2 weeks.          <p>For example, the template expressions</p> <pre><code>The total rainfall over the last 30 hours is $span($hour_delta=30).rain.sum\n</code></pre> <p>and</p> <pre><code>The total rainfall over the last 30 hours is $span($hour_delta=6, $day_delta=1).rain.sum\n</code></pre> <p>would both result in</p>  The total rainfall over the last 30 hours is 1.24 in"},{"location":"custom/cheetah-generator/#tag-unit","title":"Tag $unit","text":"<p>The type, label, and string formats for all units are also available, allowing you to do highly customized labels:</p> Tag Results <code>$unit.unit_type.outTemp</code> <code>degree_C</code> <code>$unit.label.outTemp</code> \u00b0C <code>$unit.format.outTemp</code> <code>%.1f</code> <p>For example, the tag</p> <pre><code>$day.outTemp.max.format(add_label=False)$unit.label.outTemp\n</code></pre> <p>would result in</p>  21.2\u00b0C  <p>(assuming metric values have been specified for <code>group_temperature</code>), essentially reproducing the results of the simpler tag <code>$day.outTemp.max</code>.</p>"},{"location":"custom/cheetah-generator/#tag-obs","title":"Tag $obs","text":"<p>The labels used for the various observation types are available using tag <code>$obs</code>. These are basically the values given in the skin dictionary, section <code>[Labels][[Generic]]</code>.</p> Tag Results <code>$obs.label.outTemp</code> Outside Temperature <code>$obs.label.UV</code> UV Index"},{"location":"custom/cheetah-generator/#iteration","title":"Iteration","text":"<p>It is possible to iterate over the following:</p> Tag suffix Results .records Iterate over every record .hours Iterate by hours .days Iterate by days .months Iterate by months .years Iterate by years .spans(interval=seconds)                     Iterate by custom length spans. The default interval is 10800           seconds (3 hours). The spans will           align to local time boundaries.          <p>The following template uses a Cheetah for loop to iterate over all months in a year, printing out each month's min and max temperature. The iteration loop is highlighted.</p> <pre><code>Min, max temperatures by month\n#for $month in $year.months\n$month.dateTime.format(\"%B\"): Min, max temperatures: $month.outTemp.min $month.outTemp.max\n#end for\n</code></pre> <p>The result is:</p> <pre><code>Min, max temperatures by month\nJanuary: Min, max temperatures: 30.1\u00b0F 51.5\u00b0F  \nFebruary: Min, max temperatures: 24.4\u00b0F 58.6\u00b0F  \nMarch: Min, max temperatures: 27.3\u00b0F 64.1\u00b0F  \nApril: Min, max temperatures: 33.2\u00b0F 52.5\u00b0F  \nMay: Min, max temperatures: N/A N/A  \nJune: Min, max temperatures: N/A N/A  \nJuly: Min, max temperatures: N/A N/A  \nAugust: Min, max temperatures: N/A N/A  \nSeptember: Min, max temperatures: N/A N/A  \nOctober: Min, max temperatures: N/A N/A  \nNovember: Min, max temperatures: N/A N/A  \nDecember: Min, max temperatures: N/A N/A\n</code></pre> <p>The following template again uses a Cheetah <code>for</code> loop, this time to iterate over 3-hour spans over the last 24 hours, displaying the averages in each span. The iteration loop is highlighted.</p> <pre><code>&lt;p&gt;3 hour averages over the last 24 hours&lt;/p&gt;\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Date/time&lt;/td&gt;&lt;td&gt;outTemp&lt;/td&gt;&lt;td&gt;outHumidity&lt;/td&gt;\n  &lt;/tr&gt;\n#for $time_band in $span($day_delta=1).spans(interval=10800)\n  &lt;tr&gt;\n    &lt;td&gt;$time_band.start.format(\"%d/%m %H:%M\")&lt;/td&gt;\n    &lt;td&gt;$time_band.outTemp.avg&lt;/td&gt;\n    &lt;td&gt;$time_band.outHumidity.avg&lt;/td&gt;\n  &lt;/tr&gt;\n#end for\n&lt;/table&gt;\n</code></pre> <p>The result is:</p> <p>3 hour averages over the last 24 hours</p> Date/time outTemp outHumidity 21/01 18:50 33.4\u00b0F 95% 21/01 21:50 32.8\u00b0F 96% 22/01 00:50 33.2\u00b0F 96% 22/01 03:50 33.2\u00b0F 96% 22/01 06:50 33.8\u00b0F 96% 22/01 09:50 36.8\u00b0F 95% 22/01 12:50 39.4\u00b0F 91% 22/01 15:50 35.4\u00b0F 93% <p>See the NOAA template files <code>NOAA/NOAA-YYYY.txt.tmpl</code> and <code>NOAA/NOAA-YYYY-MM.txt.tmpl</code>, both included in the Seasons skin, for other examples using iteration and explicit formatting.</p>"},{"location":"custom/cheetah-generator/#comprehensive-example","title":"Comprehensive example","text":"<p>This example is designed to put together a lot of the elements described above, including iteration, aggregation period starts and ends, formatting, and overriding units. Click here for the results.</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\ntd { border: 1px solid #cccccc; padding: 5px; }\n&lt;/style&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;table border=1 style=\"border-collapse:collapse;\"&gt;\n      &lt;tr style=\"font-weight:bold\"&gt;\n        &lt;td&gt;Time interval&lt;/td&gt;\n        &lt;td&gt;Max temperature&lt;/td&gt;\n        &lt;td&gt;Time&lt;/td&gt;\n      &lt;/tr&gt;\n#for $hour in $day($days_ago=1).hours\n      &lt;tr&gt;\n        &lt;td&gt;$hour.start.format(\"%H:%M\")-$hour.end.format(\"%H:%M\")&lt;/td&gt;\n        &lt;td&gt;$hour.outTemp.max ($hour.outTemp.max.degree_C)&lt;/td&gt;\n        &lt;td&gt;$hour.outTemp.maxtime.format(\"%H:%M\")&lt;/td&gt;\n      &lt;/tr&gt;\n#end for\n      &lt;caption&gt;\n        &lt;p&gt;\n          Hourly max temperatures yesterday&lt;br/&gt;\n          $day($days_ago=1).start.format(\"%d-%b-%Y\")\n        &lt;/p&gt;\n      &lt;/caption&gt;\n    &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"custom/cheetah-generator/#support-for-series","title":"Support for series","text":"<p>Note</p> <p>This is an experimental API that could change.</p> <p>WeeWX V4.5 introduced some experimental tags for producing series of data, possibly aggregated. This can be useful for creating the JSON data needed for JavaScript plotting packages, such as HighCharts, Google Charts, or C3.js.</p> <p>For example, suppose you need the maximum temperature for each day of the month. This tag</p> <pre><code>$month.outTemp.series(aggregate_type='max', aggregate_interval='1d', time_series='start').json\n</code></pre> <p>would produce the following:</p> <pre><code>[[1614585600, 58.2], [1614672000, 55.8], [1614758400, 59.6], [1614844800, 57.8], ... ]\n</code></pre> <p>This is a list of (time, temperature) for each day of the month, in JSON, easily consumed by many of these plotting packages.</p> <p>Many other combinations are possible. See the Wiki article Tags for series.</p>"},{"location":"custom/cheetah-generator/#helper-functions","title":"Helper functions","text":"<p>WeeWX includes a number of helper functions that may be useful when writing templates.</p>"},{"location":"custom/cheetah-generator/#rndx-ndigitsnone","title":"$rnd(x, ndigits=None)","text":"<p>Round <code>x</code> to <code>ndigits</code> decimal digits. The argument <code>x</code> can be a <code>float</code> or a list of <code>floats</code>. Values of <code>None</code> are passed through.</p>"},{"location":"custom/cheetah-generator/#jsonizeseq","title":"$jsonize(seq)","text":"<p>Convert the iterable <code>seq</code> to a JSON string.</p>"},{"location":"custom/cheetah-generator/#to_intx","title":"$to_int(x)","text":"<p>Convert <code>x</code> to an integer. The argument <code>x</code> can be of type <code>float</code> or <code>str</code>. Values of <code>None</code> are passed through.</p>"},{"location":"custom/cheetah-generator/#to_boolx","title":"$to_bool(x)","text":"<p>Convert <code>x</code> to a boolean. The argument <code>x</code> can be of type <code>int</code>, <code>float</code>, or <code>str</code>. If lowercase <code>x</code> is 'true', 'yes', or 'y' the function returns <code>True</code>. If it is 'false', 'no', or 'n' it returns <code>False</code>. Other string values raise a <code>ValueError</code>. In case of a numeric argument, 0 means <code>False</code>, all other values <code>True</code>.</p>"},{"location":"custom/cheetah-generator/#to_listx","title":"$to_list(x)","text":"<p>Convert <code>x</code> to a list. If <code>x</code> is already a list, nothing changes. If it is a single value it is converted to a list with this value as the only list element. Values of <code>None</code> are passed through.</p>"},{"location":"custom/cheetah-generator/#getobsplot_name","title":"$getobs(plot_name)","text":"<p>For a given plot name, this function will return the set of all observation types used by the plot.</p> <p>For example, consider a plot that is defined in <code>[ImageGenerator]</code> as</p> <pre><code>[[[daytempleaf]]]\n[[[[leafTemp1]]]]\n[[[[leafTemp2]]]]\n[[[[temperature]]]]\ndata_type = outTemp\n</code></pre> <p>The tag <code>$getobs('daytempleaf')</code> would return the set <code>{'leafTemp1', 'leafTemp2', 'outTemp'}</code>.</p>"},{"location":"custom/cheetah-generator/#general-tags","title":"General tags","text":"<p>There are some general tags that do not reflect observation data, but technical information about the template files. They are frequently useful in <code>#if</code> expressions to control how Cheetah processes the template.</p>"},{"location":"custom/cheetah-generator/#encoding","title":"$encoding","text":"<p>Character encoding, to which the file is converted after creation. Possible values are <code>html_entities</code>, <code>strict_ascii</code>, <code>normalized_ascii</code>, and <code>utf-8</code>.</p>"},{"location":"custom/cheetah-generator/#filename","title":"$filename","text":"<p>Name of the file to be created including relative path. Can be used to set the canonical URL for search engines.</p> <pre><code>&lt;link rel=\"canonical\" href=\"$station.station_url/$filename\" /&gt;\n</code></pre>"},{"location":"custom/cheetah-generator/#lang","title":"$lang","text":"<p>Language code set by the <code>lang</code> option for the report. For example, <code>fr</code>, or <code>gr</code>.</p>"},{"location":"custom/cheetah-generator/#month_name","title":"$month_name","text":"<p>For templates listed under <code>SummaryByMonth</code>, this will contain the localized month name (e.g., \"Sep\").</p>"},{"location":"custom/cheetah-generator/#page","title":"$page","text":"<p>The section name from <code>skin.conf</code> where the template is described.</p>"},{"location":"custom/cheetah-generator/#skin","title":"$skin","text":"<p>The value of option <code>skin</code> in <code>weewx.conf</code>.</p>"},{"location":"custom/cheetah-generator/#skin_name","title":"$SKIN_NAME","text":"<p>All skin included with WeeWX, version 4.6 or later, include the tag <code>$SKIN_NAME</code>. For example, for the Seasons skin, <code>$SKIN_NAME</code> would return <code>Seasons</code>.</p>"},{"location":"custom/cheetah-generator/#skin_version","title":"$SKIN_VERSION","text":"<p>All skin included with WeeWX, version 4.6 or later, include the tag <code>$SKIN_VERSION</code>, which returns the WeeWX version number of when the skin was installed. Because skins are not touched during the upgrade process, this shows the origin of the skin.</p>"},{"location":"custom/cheetah-generator/#summarybyday_1","title":"$SummaryByDay","text":"<p>A list of year-month-day strings (e.g., <code>[\"2018-12-31\", \"2019-01-01\"]</code>) for which a summary-by-day has been generated. The <code>[[SummaryByDay]]</code> section must have been processed before this tag will be valid, otherwise it will be empty.</p>"},{"location":"custom/cheetah-generator/#summarybymonth_1","title":"$SummaryByMonth","text":"<p>A list of year-month strings (e.g., <code>[\"2018-12\", \"2019-01\"]</code>) for which a summary-by-month has been generated. The <code>[[SummaryByMonth]]</code> section must have been processed before this tag will be valid, otherwise it will be empty.</p>"},{"location":"custom/cheetah-generator/#summarybyyear_1","title":"$SummaryByYear","text":"<p>A list of year strings (e.g., <code>[\"2018\", \"2019\"]</code>) for which a summary-by-year has been generated. The <code>[[SummaryByYear]]</code> section must have been processed before this tag will be valid, otherwise it will be empty.</p>"},{"location":"custom/cheetah-generator/#year_name","title":"$year_name","text":"<p>For templates listed under <code>SummaryByMonth</code> or <code>SummaryByYear</code>, this will contain the year (e.g., \"2018\").</p>"},{"location":"custom/cheetah-generator/#gettext-internationalization","title":"<code>$gettext</code> - Internationalization","text":"<p>Pages generated by WeeWX not only contain observation data, but also static text. The WeeWX tag <code>$gettext</code> provides internationalization support for these kinds of texts. It is structured very similarly to the GNU gettext facility, but its implementation is very different. To support internationalization of your template, do not use static text in your templates, but rather use <code>$gettext</code>. Here's how.</p> <p>Suppose you write a skin called \"YourSkin\", and you want to include a headline labelled \"Current Conditions\" in English, \"aktuelle Werte\" in German, \"Conditions actuelles\" in French, etc. Then the template file could contain:</p> <pre><code>&lt;h1&gt;$gettext(\"Current Conditions\")&lt;/h1&gt;\n</code></pre> <p>The section of <code>weewx.conf</code> configuring your skin would look something like this:</p> <pre><code>[StdReport]\n    [[YourSkinReport]]\n        skin = YourSkin\n        lang = fr\n</code></pre> <p>With <code>lang = fr</code> the report is in French. To get it in English, replace the language code <code>fr</code> by the code for English <code>en</code>. And to get it in German use <code>de</code>.</p> <p>To make this all work, a language file has to be created for each supported language. The language files reside in the <code>lang</code> subdirectory of the skin directory that is defined by the skin option. The file name of the language file is the language code appended by <code>.conf</code>, for example <code>en.conf</code>, <code>de.conf</code>, or <code>fr.conf</code>.</p> <p>The language file has the same layout as <code>skin.conf</code>, i.e. you can put language specific versions of the labels there. Additionally, a section <code>[Texts]</code> can be defined to hold the static texts used in the skin. For the example above the language files would contain the following:</p> <p><code>en.conf</code></p> <pre><code>[Texts]\n    \"Current Conditions\" = Current Conditions\n</code></pre> <p><code>de.conf</code></p> <pre><code>[Texts]\n    \"Current Conditions\" = Aktuelle Werte\n</code></pre> <p><code>fr.conf</code></p> <pre><code>[Texts]\n    \"Current Conditions\" = Conditions actuelles\n</code></pre> <p>While it is not technically necessary, we recommend using the whole English text for the key. This makes the template easier to read, and easier for the translator. In the absence of a translation, it will also be the default, so the skin will still be usable, even if a translation is not available.</p> <p>See the subdirectory <code>SKIN_ROOT/Seasons/lang</code> for examples of language files.</p>"},{"location":"custom/cheetah-generator/#pgettext-context-sensitive-lookups","title":"$pgettext - Context sensitive lookups","text":"<p>A common problem is that the same string may have different translations, depending on its context. For example, in English, the word \"Altitude\" is used to mean both height above sea level, and the angle of a heavenly body from the horizon, but that's not necessarily true in other languages. For example, in Thai, \"\u0e23\u0e30\u0e14\u0e31\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e39\u0e07\" is used to mean the former, \"\u0e2d\u0e31\u0e25\u0e15\u0e34\u0e08\u0e39\u0e14\" the latter. The function <code>pgettext()</code> (the \"p\" stands for particular) allows you to distinguish between the two. Its semantics are very similar to the GNU and Python versions of the function.</p> <p>Here's an example:</p> <pre><code>&lt;p&gt;$pgettext(\"Geographical\",\"Altitude\"): $station.altitude&lt;/p&gt;\n&lt;p&gt;$pgettext(\"Astronomical\",\"Altitude\"): $almanac.moon.alt&lt;/p&gt;\n</code></pre> <p>The <code>[Texts]</code> section of the language file should then contain a subsection for each context. For example, the Thai language file would include:</p> <p><code>th.conf</code></p> <pre><code>[Texts]\n    [[Geographical]]\n        \"Altitude\" = \"\u0e23\u0e30\u0e14\u0e31\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e39\u0e07\"    # As in height above sea level\n    [[Astronomical]]\n        \"Altitude\" = \"\u0e2d\u0e31\u0e25\u0e15\u0e34\u0e08\u0e39\u0e14\"         # As in angle above the horizon\n</code></pre>"},{"location":"custom/cheetah-generator/#almanac","title":"Almanac","text":"<p>If module <code>ephem</code> has been installed, then WeeWX can generate extensive almanac information for the Sun, Moon, Venus, Mars, Jupiter, and other heavenly bodies, including their rise, transit and set times, as well as their azimuth and altitude. Other information is also available.</p> <p>Here is an example template:</p> <pre><code>Current time is $current.dateTime\n#if $almanac.hasExtras\n    Sunrise, transit, sunset: $almanac.sun.rise $almanac.sun.transit $almanac.sun.set\n    Moonrise, transit, moonset: $almanac.moon.rise $almanac.moon.transit $almanac.moon.set\n    Mars rise, transit, set: $almanac.mars.rise $almanac.mars.transit $almanac.mars.set\n    Azimuth, altitude of Mars: $almanac.mars.azimuth $almanac.mars.altitude\n    Next new, full moon: $almanac.next_new_moon; $almanac.next_full_moon\n    Next summer, winter solstice: $almanac.next_summer_solstice; $almanac.next_winter_solstice\n#else\n    Sunrise, sunset: $almanac.sunrise $almanac.sunset\n#end if\n</code></pre> <p>If <code>ephem</code> is installed this would result in:</p>  Current time is 03-Sep-2010 11:00     Sunrise, transit, sunset: 06:29 13:05 19:40     Moonrise, transit, moonset: 00:29 08:37 16:39     Mars rise, transit, set: 10:12 15:38 21:04     Azimuth, altitude of Mars: 111\u00b0 08\u00b0     Next new, full moon: 08-Sep-2010 03:29; 23-Sep-2010 02:17     Next summer, winter solstice: 21-Jun-2011 10:16; 21-Dec-2010 15:38  <p>Otherwise, a fallback of basic calculations is used, resulting in:</p>  Current time is 29-Mar-2011 09:20   Sunrise, sunset: 06:51 19:30  <p>As shown in the example, you can test whether this extended almanac information is available with the value <code>$almanac.hasExtras</code>.</p> <p>The almanac information falls into three categories:</p> <ul> <li>Calendar events</li> <li>Heavenly bodies</li> <li>Functions</li> </ul> <p>We will cover each of these separately.</p>"},{"location":"custom/cheetah-generator/#calendar-events","title":"Calendar events","text":"<p>\"Calendar events\" do not require a heavenly body. They cover things such as the time of the next solstice or next first quarter moon, or the sidereal time. The syntax is:</p> <pre><code>$almanac.next_solstice\n</code></pre> <p>or</p> <pre><code>$almanac.next_first_quarter_moon\n</code></pre> <p>or</p> <pre><code>$almanac.sidereal_angle\n</code></pre> <p>Here is a table of the information that falls into this category:</p> Calendar events previous_equinox next_equinox previous_solstice next_solstice previous_autumnal_equinox next_autumnal_equinox previous_vernal_equinox next_vernal_equinox previous_winter_solstice next_winter_solstice previous_summer_solstice next_summer_solstice previous_new_moon next_new_moon previous_first_quarter_moon next_first_quarter_moon previous_full_moon next_full_moon previous_last_quarter_moon next_last_quarter_moon sidereal_angle <p>Note</p> <p>The tag <code>$almanac.sidereal_angle</code> returns a value in decimal degrees rather than a more customary value from 0 to 24 hours.</p>"},{"location":"custom/cheetah-generator/#heavenly-bodies","title":"Heavenly bodies","text":"<p>The second category does require a heavenly body. This covers queries such as, \"When does Jupiter rise?\" or, \"When does the sun transit?\" Examples are</p> <pre><code>$almanac.jupiter.rise\n</code></pre> <p>or</p> <pre><code>$almanac.sun.transit\n</code></pre> <p>To accurately calculate these times, WeeWX automatically uses the present temperature and pressure to calculate refraction effects. However, you can override these values, which will be necessary if you wish to match the almanac times published by the Naval Observatory as explained in the PyEphem documentation. For example, to match the sunrise time as published by the Observatory, instead of</p> <pre><code>$almanac.sun.rise\n</code></pre> <p>use</p> <pre><code>$almanac(pressure=0, horizon=-34.0/60.0).sun.rise\n</code></pre> <p>By setting pressure to zero we are bypassing the refraction calculations and manually setting the horizon to be 34 arcminutes lower than the normal horizon. This is what the Navy uses.</p> <p>If you wish to calculate the start of civil twilight, you can set the horizon to -6 degrees, and also tell WeeWX to use the center of the sun (instead of the upper limb, which it normally uses) to do the calcuation:</p> <pre><code>$almanac(pressure=0, horizon=-6).sun(use_center=1).rise\n</code></pre> <p>The general syntax is:</p> <pre><code>$almanac(almanac_time=time,            ## Unix epoch time\n         lat=latitude, lon=longitude,  ## degrees\n         altitude=altitude,            ## meters\n         pressure=pressure,            ## mbars\n         horizon=horizon,              ## degrees\n         temperature=temperature_C     ## degrees C\n       ).heavenly_body(use_center=[01]).attribute\n</code></pre> <p>As you can see, many other properties can be overridden besides pressure and the horizon angle.</p> <p>PyEphem offers an extensive list of objects that can be used for the <code>heavenly_body</code> tag. All the planets and many stars are in the list.</p> <p>The possible values for the <code>attribute</code> tag are listed in the following table, along with the corresponding name used in the PyEphem documentation.</p> Attributes that can be used with heavenly bodies WeeWX name PyEphem name Meaning azimuth az Azimuth altitude alt Altitude astro_ra a_ra Astrometric geocentric right ascension astro_dec a_dec Astrometric geocentric declination geo_ra g_ra Apparent geocentric right ascension topo_ra ra Apparent topocentric right ascension geo_dec g_dec Apparent geocentric declination topo_dec dec Apparent topocentric declination elongation elong Angle with sun radius_size radius Size as an angle hlongitude hlon Astrometric heliocentric longitude hlatitude hlat Astrometric heliocentric latitude sublatitude sublat Geocentric latitude sublongitude sublon Geocentric longitude next_rising next_rising Time body will rise next next_setting next_setting Time body will set next next_transit next_transit Time body will transit next next_antitransit next_antitransit Time body will anti-transit next previous_rising previous_rising Previous time the body rose previous_setting previous_setting Previous time the body sat previous_transit previous_transit Previous time the body transited previous_antitransit previous_antitransit Previous time the body anti-transited rise next_rising Time body will rise next set next_setting Time body will set next transit next_transit Time body will transit next visible N/A How long body will be visible visible_change N/A Change in visibility from previous day <p>Note</p> <p>The tags <code>topo_ra</code>, <code>astro__ra</code> and <code>geo_ra</code> return values in decimal degrees rather than customary values from 0 to 24 hours.</p>"},{"location":"custom/cheetah-generator/#functions","title":"Functions","text":"<p>There is actually one function in this category: <code>separation</code>. It returns the angular separation between two heavenly bodies. For example, to calculate the angular separation between Venus and Mars you would use:</p> <pre><code>&lt;p&gt;The separation between Venus and Mars is\n      $almanac.separation(($almanac.venus.alt,$almanac.venus.az), ($almanac.mars.alt,$almanac.mars.az))&lt;/p&gt;\n</code></pre> <p>This would result in:</p>  The separation between Venus and Mars is 55:55:31.8"},{"location":"custom/cheetah-generator/#adding-new-bodies","title":"Adding new bodies","text":"<p>It is possible to extend the WeeWX almanac, adding new bodies that it was not previously aware of. For example, say we wanted to add 433 Eros, the first asteroid visited by a spacecraft. Here is the process:</p> <ol> <li> <p>Put the following in the file <code>user/extensions.py</code>:</p> <pre><code>import ephem\neros = ephem.readdb(\"433 Eros,e,10.8276,304.3222,178.8165,1.457940,0.5598795,0.22258902,71.2803,09/04.0/2017,2000,H11.16,0.46\")\nephem.Eros = eros\n</code></pre> <p>This does two things: it adds orbital information about 433 Eros to the internal PyEphem database, and it makes that data available under the name <code>Eros</code> (note the capital letter).</p> </li> <li> <p>You can then use 433 Eros like any other body in your templates.     For example, to display when it will rise above the horizon:</p> <pre><code>$almanac.eros.rise\n</code></pre> </li> </ol>"},{"location":"custom/cheetah-generator/#wind","title":"Wind","text":"<p>Wind deserves a few comments because it is stored in the database in two different ways: as a set of scalars, and as a vector of speed and direction. Here are the four wind-related scalars stored in the main archive database:</p> Archive type Meaning Valid contexts windSpeed The average wind speed seen during the archive period.                       $current, $latest, $hour, $day, $week, $month, $year, $rainyear          windDir        If software record generation is used, this is the vector average           over the archive period. If hardware record generation is used, the           value is hardware dependent.          windGust The maximum (gust) wind speed seen during the archive period. windGustDir The direction of the wind when the gust was observed. <p>Some wind aggregation types, notably <code>vecdir</code> and <code>vecavg</code>, require wind speed and direction. For these, WeeWX provides a composite observation type called <code>wind</code>. It is stored directly in the daily summaries, but synthesized for aggregations other than multiples of a day.</p> Daily summary type Meaning Valid contexts wind A vector composite of the wind. <code>$hour</code>, <code>$day</code>, <code>$week</code>, <code>$month</code>, <code>$year</code>, <code>$rainyear</code> <p>Any of these can be used in your tags. Here are some examples:</p> Tag Meaning $current.windSpeed The average wind speed over the most recent archive interval.          $current.windDir  If software record generation is used, this is the vector average over the archive interval. If hardware record generation is used, the value is hardware dependent.          $current.windGust The maximum wind speed (gust) over the most recent archive interval.          $current.windGustDir The direction of the gust. $day.windSpeed.avg$day.wind.avg  The average wind speed since midnight. If the wind blows east at 5 m/s for 2 hours, then west at 5 m/s for 2 hours, the average wind speed is 5 m/s.          $day.wind.vecavg  The vector average wind speed since midnight. If the wind blows east at 5 m/s for 2 hours, then west at 5 m/s for 2 hours, the vector average wind speed is zero.          $day.wind.vecdir  The direction of the vector averaged wind speed. If the wind blows northwest at 5 m/s for two hours, then southwest at 5 m/s for two hours, the vector averaged direction is west.          $day.windGust.max$day.wind.max The maximum wind gust since midnight. $day.wind.gustdir The direction of the maximum wind gust. $day.windGust.maxtime$day.wind.maxtime The time of the maximum wind gust. $day.windSpeed.max  The max average wind speed. The wind is averaged over each of the archive intervals. Then the maximum of these values is taken. Note that this is not the same as the maximum wind gust.          $day.windDir.avg  Not a very useful quantity. This is the strict, arithmetic average of all the compass wind directions. If the wind blows at 350\u00b0 for two hours then at 10\u00b0 for two hours, then the scalar average wind direction will be 180\u00b0 \u2014 probably not what you expect, nor want."},{"location":"custom/cheetah-generator/#defining-new-tags","title":"Defining new tags","text":"<p>We have seen how you can change a template and make use of the various tags available such as <code>$day.outTemp.max</code> for the maximum outside temperature for the day. But, what if you want to introduce some new data for which no tag is available?</p> <p>If you wish to introduce a static tag, that is, one that will not change with time (such as a Google Analytics tracker ID, or your name), then this is very easy: put it in section <code>[Extras]</code> in the skin configuration file. More information on how to do this can be found there.</p> <p>But, what if you wish to introduce a more dynamic tag, one that requires some calculation, or perhaps uses the database? Simply putting it in the <code>[Extras]</code> section won't do, because then it cannot change.</p> <p>The answer is to write a search list extension. Complete directioins on how to do this are in the document Writing search list extensions.</p>"},{"location":"custom/custom-reports/","title":"Customizing reports","text":"<p>There are two general mechanisms for customizing reports: change options in one or more configuration files, or change the template files. The former is generally easier, but occasionally the latter is necessary.</p>"},{"location":"custom/custom-reports/#how-to-specify-options","title":"How to specify options","text":"<p>Options are used to control how reports will look and what they will contain. For example, they determine which units to use, how to format dates and times, which data should be in each plot, the colors of plot elements, etc.</p> <p>Options are read from three different types of configuration files:</p> Configuration files File Use weewx.conf  This is the application configuration file.  It contains general configuration information, such which drivers and services to load, as well as which reports to run.  Report options can also be specified in this file.          skin.conf  This is the skin configuration file.  It contains information specific to a skin, in particular, which template files to process, and which plots to generate. Typically, this file is supplied by the skin author.          en.confde.conffr.confetc.  These are internationalization files.  They contain language and locale information for a specific skin.          <p>Configuration files are read and processed using the Python utility ConfigObj, using a format similar to the MS-DOS \"INI\" format. Here's a simple example:</p> <pre><code>[Section1]\n# A comment\nkey1 = value1\n[[SubSectionA]]\nkey2 = value2\n[Section2]\nkey3=value3\n</code></pre> <p>This example uses two sections at root level (sections <code>Section1</code> and <code>Section2</code>), and one subsection (<code>SubSectionA</code>), which is nested under <code>Section1</code>. The option <code>key1</code> is nested under <code>Section1</code>, option <code>key3</code> is nested under <code>Section2</code>, while option <code>key2</code> is nested under subsection <code>SubSectionA</code>.</p> <p>Note that while this example indents subsections and options, this is strictly for readability \u2014 this isn't Python! It's the number of brackets that counts in determining nesting, not the indentation! It would torture your readers, but the above example could be written</p> <pre><code>      [Section1]\n# A comment\nkey1 = value1\n[[SubSectionA]]\nkey2 = value2\n[Section2]\nkey3=value3\n</code></pre> <p>Configuration files take advantage of ConfigObj's ability to organize options hierarchically into stanzas. For example, the <code>[Labels]</code> stanza contains the text that should be displayed for each observation. The <code>[Units]</code> stanza contains other stanzas, each of which contains parameters that control the display of units.</p>"},{"location":"custom/custom-reports/#processing-order","title":"Processing order","text":"<p>Configuration files and their sections are processed in a specific order. Generally, the values from the skin configuration file (<code>skin.conf</code>) are processed first, then options in the WeeWX configuration file (nominally <code>weewx.conf</code>) are applied last. This order allows skin authors to specify the basic look and feel of a report, while ensuring that users of the skin have the final say.</p> <p>To illustrate the processing order, here are the steps for the skin Seasons:</p> <ul> <li> <p>First, a set of options defined in the Python module <code>weewx.defaults</code> serve as the starting point.</p> </li> <li> <p>Next, options from the configuration file for Seasons, located in <code>skins/Seasons/skin.conf</code>, are merged.</p> </li> <li> <p>Next, any options that apply to all skins, specified in the <code>[StdReport] / [[Defaults]]</code> section of the WeeWX configuration file, are merged.</p> </li> <li> <p>Finally, any skin-specific options, specified in the <code>[StdReport] / [[Seasons]]</code> section of the WeeWX configuration, are merged. These options have the final say.</p> </li> </ul> <p>At all four steps, if a language specification is encountered (option <code>lang</code>), then the corresponding language file will be read and merged. If a unit specification (option <code>unit_system</code>) is encountered, then the appropriate unit groups are set. For example, if <code>unit_system=metricwx</code>, then the unit for <code>group_pressure</code> will be set to <code>mbar</code>, etc.</p> <p>The result is the following option hierarchy, listed in order of increasing precedence.</p> Option hierarchy, lowest to highest File Example Comments weewx/defaults.py              [Units] \u00a0\u00a0[[Labels]] \u00a0\u00a0\u00a0\u00a0mbar=\" mbar\"           These are the hard-coded default values for every option. They are used when an option is not specified anywhere else. These should not be modified unless you propose a change to the WeeWX code; any changes made here will be lost when the software is updated.          skin.conf              [Units] \u00a0\u00a0[[Labels]] \u00a0\u00a0\u00a0\u00a0mbar=\" hPa\"           Supplied by the skin author, the skin configuration file, skin.conf, contains options that define the baseline behavior of the skin. In this example, for whatever reason, the skin author has decided that the label for units in millibars should be \" hPa\" (which is equivalent).          weewx.conf              [StdReport] \u00a0\u00a0[[Defaults]] \u00a0\u00a0\u00a0\u00a0[[[Labels]]] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[[[Generic]]]]             \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rain=Rainfall           Options specified under [[Defaults]] apply to all reports. This example indicates that the label Rainfall should be used for the observation rain, in all reports.          weewx.conf              [StdReport] \u00a0\u00a0[[SeasonsReport]] \u00a0\u00a0\u00a0\u00a0[[[Labels]]] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[[[Generic]]]]             \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inTemp=Kitchen\u00a0temperature           Highest precedence. Has the final say. Options specified here apply to a single report. This example indicates that the label Kitchen temperature should be used for the observation inTemp, but only for the report SeasonsReport.          <p>Note</p> <p>When specifying options, you must pay attention to the number of brackets! In the table above, there are two different nesting depths used: one for <code>weewx.conf</code>, and one for <code>weewx/defaults.py</code> and <code>skin.conf</code>. This is because the stanzas defined in <code>weewx.conf</code> start two levels down in the hierarchy <code>[StdReport]</code>, whereas the stanzas defined in <code>skin.conf</code> and <code>defaults.py</code> are at the root level. Therefore, options specified in <code>weewx.conf</code> must use two extra sets of brackets.</p> <p>Other skins are processed in a similar manner although, of course, their name will be something other than Seasons.</p> <p>Although it is possible to modify the options at any level, as the user of a skin, it is usually best to keep your modifications in the WeeWX configuration file (<code>weewx.conf</code>) if you can. That way you can apply any fixes or changes when the skin author updates the skin, and your customizations will not be overwritten.</p> <p>If you are a skin author, then you should provide the skin configuration file (<code>skin.conf</code>), and put in it only the options necessary to make the skin render the way you intend it. Any options that are likely to be localized for a specific language (in particular, text), should be put in the appropriate language file.</p>"},{"location":"custom/custom-reports/#changing-languages","title":"Changing languages","text":"<p>By default, the skins that come with WeeWX are set up for the English language, but suppose you wish to switch to another language. How you do so will depend on whether the skin you are using has been internationalized and, if so, whether it offers your local language.</p>"},{"location":"custom/custom-reports/#internationalized-skins","title":"Internationalized skins","text":"<p>All the skins included with WeeWX have been internationalized, so if you're working with one of them, this is the section you want. Next, you need to check whether there is a localization file for your particular language. To check, look in the contents of subdirectory <code>lang</code> in the skin's directory. For example, if you used a package installer and are using the Seasons skin, you will want to look in <code>/etc/weewx/skins/Seasons/lang</code>. Inside, you will see something like this:</p> <pre><code>ls -l /etc/weewx/skins/Seasons/lang\ntotal 136\n-rw-rw-r-- 1 tkeffer tkeffer  9447 Jul  1 11:11 cn.conf\n-rw-rw-r-- 1 tkeffer tkeffer  9844 Mar 13 12:31 cz.conf\n-rw-rw-r-- 1 tkeffer tkeffer  9745 Mar 13 12:31 de.conf\n-rw-rw-r-- 1 tkeffer tkeffer  9459 Mar 13 12:31 en.conf\n-rw-rw-r-- 1 tkeffer tkeffer 10702 Mar 13 12:31 es.conf\n-rw-rw-r-- 1 tkeffer tkeffer 10673 May 31 07:50 fr.conf\n-rw-rw-r-- 1 tkeffer tkeffer 11838 Mar 13 12:31 gr.conf\n-rw-rw-r-- 1 tkeffer tkeffer  9947 Mar 13 12:31 it.conf\n-rw-rw-r-- 1 tkeffer tkeffer  9548 Mar 13 12:31 nl.conf\n-rw-rw-r-- 1 tkeffer tkeffer 10722 Apr 15 14:52 no.conf\n-rw-rw-r-- 1 tkeffer tkeffer 15356 Mar 13 12:31 th.conf\n</code></pre> <p>This means that the Seasons skin has been localized for the following languages:</p> File Language cn.conf Traditional Chinese cz.conf Czeck de.conf German en.conf English es.conf Spanish fr.conf French it.conf Italian gr.conf Greek nl.conf Dutch th.conf Thai <p>If you want to use the Seasons skin and are working with one of these languages, then you are in luck: you can simply override the <code>lang</code> option. For example, to change the language displayed by the Seasons skin from English to German, edit <code>weewx.conf</code>, and change the highlighted line:</p> <pre><code>[StdReport]\n...\n[[SeasonsReport]]\n# The SeasonsReport uses the 'Seasons' skin, which contains the\n# images, templates and plots for the report.\nskin = Seasons\nenable = true\nlang = de\n</code></pre> <p>By contrast, if the skin has been internationalized, but there is no localization file for your language, then you will have to supply one. See the section Internationalized, but your language is missing.</p>"},{"location":"custom/custom-reports/#changing-date-and-time-formats","title":"Changing date and time formats","text":"<p>Date and time formats are specified using the same format strings used by strftime(). For example, <code>%Y</code> indicates the 4-digit year, and <code>%H:%M</code> indicates the time in hours:minutes. The default values for date and time formats are generally <code>%x %X</code>, which indicates \"use the format for the locale of the computer\".</p> <p>Since date formats default to the locale of the computer, a date might appear with the format of \"month/day/year\". What if you prefer dates to have the format \"year.month.day\"? How do you indicate 24-hour time format versus 12-hour?</p> <p>Dates and times generally appear in two places: in plots and in tags.</p>"},{"location":"custom/custom-reports/#date-and-time-formats-in-images","title":"Date and time formats in images","text":"<p>Most plots have a label on the horizontal axis that indicates when the plot was generated. By default, the format for this label uses the locale of the computer on which WeeWX is running, but you can modify the format by specifying the option <code>bottom_label_format</code>.</p> <p>For example, this would result in a date/time string such as \"2021.12.13 12:45\" no matter what the computer's locale:</p> <pre><code>[StdReport]\n...\n[[Defaults]]\n[[[ImageGenerator]]]\n[[[[day_images]]]]\nbottom_label_format = %Y.%m.%d %H:%M\n[[[[week_images]]]]\nbottom_label_format = %Y.%m.%d %H:%M\n[[[[month_images]]]]\nbottom_label_format = %Y.%m.%d %H:%M\n[[[[year_images]]]]\nbottom_label_format = %Y.%m.%d %H:%M\n</code></pre>"},{"location":"custom/custom-reports/#date-and-time-formats-for-tags","title":"Date and time formats for tags","text":"<p>Each aggregation period has a format for the times associated with that period. These formats are defined in the <code>TimeFormats</code> section. The default formats use the date and/or time for the computer of the locale on which WeeWX is running.</p> <p>For example, this would result in a date/time string such as \"2021.12.13 12:45\" no matter what the computer's locale:</p> <pre><code>[StdReport]\n...\n[[Defaults]]\n[[[Units]]]\n[[[[TimeFormats]]]]\nhour        = %H:%M\nday         = %Y.%m.%d\nweek        = %Y.%m.%d (%A)\nmonth       = %Y.%m.%d %H:%M\nyear        = %Y.%m.%d %H:%M\nrainyear    = %Y.%m.%d %H:%M\ncurrent     = %Y.%m.%d %H:%M\nephem_day   = %H:%M\nephem_year  = %Y.%m.%d %H:%M\n</code></pre>"},{"location":"custom/custom-reports/#changing-unit-systems","title":"Changing unit systems","text":"<p>Each unit system is a set of units. For example, the <code>METRIC</code> unit system uses centimeters for rain, kilometers per hour for wind speed, and degree Celsius for temperature. The option <code>unit_system</code> controls which unit system will be used in your reports. The available choices are <code>US</code>, <code>METRIC</code>, or <code>METRICWX</code>. The option is case-insensitive. See Units for the units defined in each of these unit systems.</p> <p>By default, WeeWX uses <code>US</code> (US Customary) system. Suppose you would rather use the <code>METRICWX</code> system for all your reports? Then change this</p> <pre><code>[StdReport]\n...\n[[Defaults]]\n\n# Which unit system to use for all reports. Choices are 'us', 'metric', or 'metricwx'.\n# You can override this for individual reports.\nunit_system = us\n</code></pre> <p>to this</p> <pre><code>[StdReport]\n...\n[[Defaults]]\n\n# Which unit system to use for all reports. Choices are 'us', 'metric', or 'metricwx'.\n# You can override this for individual reports.\nunit_system = metricwx\n</code></pre>"},{"location":"custom/custom-reports/#mixed-units","title":"Mixed units","text":"<p>However, what if you want a mix? For example, suppose you generally want US Customary units, but you want barometric pressures to be in millibars? This can be done by overriding the appropriate unit group.</p> <pre><code>[StdReport]\n...\n[[Defaults]]\n\n# Which unit system to use for all reports. Choices are 'us', 'metric', or 'metricwx'.\n# You can override this for individual reports.\nunit_system = us\n\n# Override the units used for pressure:\n[[[Units]]]\n[[[[Groups]]]]\ngroup_pressure = mbar\n</code></pre> <p>This says that you generally want the US systems of units for all reports, but want pressure to be reported in millibars. Other units can be overridden in a similar manner.</p>"},{"location":"custom/custom-reports/#multiple-unit-systems","title":"Multiple unit systems","text":"<p>Another example. Suppose we want to generate two reports, one in the <code>US</code> system, the other using the <code>METRICWX</code> system. The first, call it SeasonsUSReport, will go in the regular directory <code>HTML_ROOT</code>. However, the latter, call it SeasonsMetricReport, will go in a subdirectory, <code>HTML_ROOT/metric</code>. Here's how you would do it</p> <pre><code>[StdReport]\n\n# Where the skins reside, relative to WEEWX_ROOT\nSKIN_ROOT = skins\n\n# Where the generated reports should go, relative to WEEWX_ROOT\nHTML_ROOT = public_html\n\n# The database binding indicates which data should be used in reports.\ndata_binding = wx_binding\n\n[[SeasonsUSReport]]\nskin = Seasons\nunit_system = us\nenable = true\n\n[[SeasonsMetricReport]]\nskin = Seasons\nunit_system = metricwx\nHTML_ROOT = public_html/metric\nenable = true\n</code></pre> <p>Note how both reports use the same skin (that is, skin Seasons), but different unit systems, and different destinations. The first, SeasonsUSReport sets option unit_system to <code>us</code>, and uses the default destination. By contrast, the second, SeasonsMetricReport, uses unit system <code>metricwx</code>, and a different destination, <code>public_html/metric</code>.</p>"},{"location":"custom/custom-reports/#changing-labels","title":"Changing labels","text":"<p>Every observation type is associated with a default label. For example, in the English language, the default label for observation type <code>outTemp</code> is generally \"Outside Temperature\". You can change this label by overriding the default. How you do so will depend on whether the skin you are using has been internationalized and, if so, whether it offers your local language.</p> <p>Let's look at an example. If you take a look inside the file <code>skins/Seasons/lang/en.conf</code>, you will see it contains what looks like a big configuration file. Among other things, it has two entries that look like this:</p> <pre><code>...\n[Labels]\n...\n[[Generic]]\n...\ninTemp = Inside Temperature\noutTemp = Outside Temperature\n...\n</code></pre> <p>This tells the report generators that when it comes time to label the observation variables <code>inTemp</code> and <code>outTemp</code>, use the strings \"Inside Temperature\" and \"Outside Temperature\", respectively.</p> <p>However, let's say that we have actually located our outside temperature sensor in the barn, and wish to label it accordingly. We need to override the label that comes in the localization file. We could just change the localization file <code>en.conf</code>, but then if the author of the skin came out with a new version, our change could get lost. Better to override the default by making the change in <code>weewx.conf</code>. To do this, make the following changes in <code>weewx.conf</code>:</p> <pre><code>    [[SeasonsReport]]\n# The SeasonsReport uses the 'Seasons' skin, which contains the\n# images, templates and plots for the report.\nskin = Seasons\nlang = en\nunit_system = US\nenable = true\n[[[Labels]]]\n[[[[Generic]]]]\noutTemp = Barn Temperature\n</code></pre> <p>This will cause the default label Outside Temperature to be replaced with the new label \"Barn Temperature\" everywhere in your report. The label for type <code>inTemp</code> will be untouched.</p>"},{"location":"custom/database/","title":"Customizing the database","text":"<p>For most users the database defaults will work just fine. However, there may be occasions when you may want to add a new observation type to your database, or change its unit system. This section shows you how to do this.</p> <p>Every relational database depends on a schema to specify which types to include in the database. When a WeeWX database is first created, it uses a Python version of the schema to initialize the database. However, once the database has been created, the schema is read directly from the database and the Python version is not used again \u2014 any changes to it will have no effect. This means that the strategy for modifying the schema depends on whether the database already exists.</p>"},{"location":"custom/database/#specifying-a-schema-for-a-new-database","title":"Specifying a schema for a new database","text":"<p>If the database does not exist yet, then you will want to pick an appropriate starting schema. If it's not exactly what you want, you can modify it to fit your needs before creating the database.</p>"},{"location":"custom/database/#picking-a-starting-schema","title":"Picking a starting schema","text":"<p>WeeWX gives you a choice of three different schemas to choose from when creating a new database:</p> Name Number ofobservation types Comment <code>schemas.wview.schema</code> 49 The original schema that came with wview. <code>schemas.wview_extended.schema</code> 111 A version of the wview schema,which has been extended withmany new types.This is the default version. <code>schemas.wview_small.schema</code> 20 A minimalist version of the wview schema. <p>For most users, the default database schema, <code>schemas.wview_extended.schema</code>, will work just fine.</p> <p>To specify which schema to use when creating a database, modify option <code>schema</code> in section <code>[DataBindings]</code> in <code>weewx.conf</code>. For example, suppose you wanted to use the classic (and smaller) schema <code>schemas.wview.schema</code> instead of the default <code>schemas.wview_extended.schema</code>. Then the section <code>[DataBindings]</code> would look like:</p> <pre><code>[DataBindings]\n[[wx_binding]]\ndatabase = archive_sqlite\ntable_name = archive\nmanager = weewx.manager.DaySummaryManager\nschema = schemas.wview.schema\n</code></pre> <p>Now, when you start WeeWX, it will use this new choice instead of the default.</p> <p>Note</p> <p>This only works when the database is first created. Thereafter, WeeWX reads the schema directly from the database. Changing this option will have no effect!</p>"},{"location":"custom/database/#modify-starting-schema","title":"Modifying a starting schema","text":"<p>If none of the three starting schemas that come with WeeWX suits your purposes, you can easily create your own. Just pick one of the three schemas as a starting point, then modify it. Put the results in the <code>user</code> subdirectory, where it will be safe from upgrades. For example, suppose you like the <code>schemas.wview_small</code> schema, but you need to store the type <code>electricity</code> from the example Adding a second data source. The type <code>electricity</code> does not appear in the schema, so you'll have to add it before starting up WeeWX. We will call the resulting new schema <code>user.myschema.schema</code>.</p> <p>If you did a Debian install, here's how you would do this:</p> <pre><code> # Copy the wview_small schema over to the user subdirectory and rename it myschema:\nsudo cp /usr/share/weewx/schemas/wview_small.py /usr/share/weewx/user/myschema.py\n\n # Edit it using your favorite text editor\nsudo nano /usr/share/weewx/user/myschema.py\n</code></pre> <p>If you did a pip install, it can be difficult to find the starting schema because it can be buried deep in the Python library tree. It's easier to just download from the git repository and start with that:</p> <pre><code> # Download the wview_small schema and rename it to myschema.py\ncd ~/weewx-data/bin/user\nwget https://raw.githubusercontent.com/weewx/weewx/master/bin/schemas/wview_small.py\nmv wview_small.py myschema.py\n\n # Edit it using your favorite text editor\nnano myschema.py\n</code></pre> <p>In <code>myschema.py</code> change this:</p> <pre><code>         ...\n         ('windchill',            'REAL'),\n         ('windDir',              'REAL'),\n         ('windGust',             'REAL'),\n         ('windGustDir',          'REAL'),\n         ('windSpeed',            'REAL'),\n         ]\n</code></pre> <p>to this</p> <pre><code>         ...\n         ('windchill',            'REAL'),\n         ('windDir',              'REAL'),\n         ('windGust',             'REAL'),\n         ('windGustDir',          'REAL'),\n         ('windSpeed',            'REAL'),\n         ('electricity',          'REAL'),\n         ]\n</code></pre> <p>The only change was the addition (highlighted) of <code>electricity</code> to the list of observation names.</p> <p>Now change option <code>schema</code> under <code>[DataBindings]</code> in <code>weewx.conf</code> to use your new schema:</p> <pre><code>[DataBindings]\n    [[wx_binding]]\n        database = archive_sqlite\n        table_name = archive\n        manager = weewx.manager.DaySummaryManager\n        schema = user.myschema.schema\n</code></pre> <p>Start WeeWX. When the new database is created, it will use your modified schema instead of the default.</p> <p>Note</p> <p>This will only work when the database is first created! Thereafter, WeeWX reads the schema directly from the database and your changes will have no effect!</p>"},{"location":"custom/database/#modify-the-schema-of-an-existing-database","title":"Modify the schema of an existing database","text":"<p>The previous section covers the case where you do not have an existing database, so you modify a starting schema, then use it to initialize the database. But, what if you already have a database, and you want to modify its schema, perhaps by adding a column or two? Creating a new starting schema is not going to work because it is only used when the database is first created. Here is where the command <code>weectl database</code> can be useful.</p> <p>There are two ways to do this. Both are covered below.</p> <ol> <li> <p>Modify the database in situ. This choice works best for small changes.</p> </li> <li> <p>Reconfigure the old database to a new one while modifying it along the     way, This choice is best for large modifications.</p> </li> </ol> <p>Warning</p> <p>Before using <code>weectl database</code>, MAKE A BACKUP FIRST!</p> <p>Be sure to stop <code>weewxd</code> first.</p>"},{"location":"custom/database/#modify-the-database-in-situ","title":"Modify the database in situ","text":"<p>If you want to make some minor modifications to an existing database, perhaps adding or removing a column, then this can easily be done using the command <code>weectl database</code> with an appropriate action. We will cover the cases of adding, removing, and renaming a type. See the documentation for <code>weectl database</code> for more details.</p>"},{"location":"custom/database/#add-archive-type","title":"Adding a type","text":"<p>Suppose you have an existing database, to which you want to add a type, such as the type <code>electricity</code> from the example Adding a second data source. This can be done in one easy step using the action <code>weectl database add-column</code>:</p> <pre><code>weectl database add-column electricity\n</code></pre> <p>The tool not only adds <code>electricity</code> to the main archive table, but also to the daily summaries.</p>"},{"location":"custom/database/#remove-archive-type","title":"Removing a type","text":"<p>In a similar manner, the tool can remove any unneeded types from an existing database. For example, suppose you are using the <code>schemas.wview</code> schema, but you're pretty sure you're not going to need to store soil moisture. You can drop the unnecessary types this way:</p> <pre><code>weectl database drop-columns soilMoist1 soilMoist2 soilMoist3 soilMoist4 </code></pre> <p>Unlike the action <code>add-column</code>, the action <code>drop-columns</code> can take more than one type. This is done in the interest of efficiency: adding new columns is easy and fast with the SQLite database, but dropping columns requires copying the whole database. By specifying more than one type, you can amortize the cost over a single invocation of the utility.</p> <p>Warning</p> <p>Dropping types from a database means you will lose any data associated with them! The data cannot be recovered.</p>"},{"location":"custom/database/#rename-archive-type","title":"Renaming a type","text":"<p>Suppose you just want to rename a type? This can be done using the action <code>rename-column</code>. Here's an example where you rename <code>soilMoist1</code> to <code>soilMoistGarden</code>:</p> <pre><code>weectl database rename-column soilMoist1 soilMoistGarden\n</code></pre> <p>Note how the action <code>rename-column</code> requires two positional arguments: the column being renamed, and its final name.</p>"},{"location":"custom/database/#reconfigure-using-new-schema","title":"Reconfigure database using a new schema","text":"<p>If you are making major changes to your database, you may find it easier to create a brand-new database using the schema you want, then transfer all data from the old database into the new one. This approach is more work, and takes more processing time than the in situ strategies outlines above, but has the advantage that it leaves behind a record of exactly the schema you are using.</p> <p>Here is the general strategy to do this.</p> <ol> <li> <p>Create a new schema that includes exactly the types that you want.</p> </li> <li> <p>Specify this schema as the starting schema for the database.</p> </li> <li> <p>Make sure you have the necessary permissions to create the new database.</p> </li> <li> <p>Use the action     <code>weectl database reconfigure</code>     to create the new database and populate it with data from the old     database.</p> </li> <li> <p>Shuffle databases around so WeeWX will use the new database.</p> </li> </ol> <p>Here are the details:</p> <ol> <li> <p>Create a new schema. First step is to create a new schema with     exactly the types you want. See the instructions above Modify a     starting schema. As an example, suppose     your new schema is called <code>user.myschema.schema</code>.</p> </li> <li> <p>Set as starting schema. Set your new schema as the starting     schema with whatever database binding you are working with     (generally, <code>wx_binding</code>). For example:</p> <pre><code>[DataBindings]\n\n[[wx_binding]]\ndatabase = archive_sqlite\ntable_name = archive\nmanager = weewx.manager.DaySummaryManager\nschema = user.myschema.schema\n</code></pre> </li> <li> <p>Check permissions. The transfer action will create a new     database with the same name as the old, except with the suffix <code>_new</code>     attached to the end. Make sure you have the necessary permissions to do      this. In particular, if you are using MySQL, you will need <code>CREATE</code>     privileges.</p> </li> <li> <p>Create and populate the new database. Use the command     <code>weectl database</code> with the <code>reconfigure</code> action.</p> <pre><code>weectl database reconfigure\n</code></pre> <p>This will create a new database (nominally, <code>weewx.sdb_new</code> if you are using SQLite, <code>weewx_new</code> if you are using MySQL), using the schema found in <code>user.myschema.schema</code>, and populate it with data from the old database.</p> </li> <li> <p>Shuffle the databases. Now arrange things so WeeWX can find the     new database.</p> <p>Warning</p> <p>Make a backup of the data before doing any of the next steps!</p> <p>You can either shuffle the databases around so the new database has the same name as the old database, or edit <code>weewx.conf</code> to use the new database name.  To do the former:</p> SQLiteMySQL <pre><code>cd ~/weewx-data/archive\nmv weewx.sdb_new weewx.sdb\n</code></pre> <pre><code>mysql -u &lt;username&gt; --password=&lt;mypassword&gt;\nmysql&gt; DROP DATABASE weewx;                             # Delete the old database\nmysql&gt; CREATE DATABASE weewx;                           # Create a new one with the same name\nmysql&gt; RENAME TABLE weewx_new.archive TO weewx.archive; # Rename to the nominal name\n</code></pre> </li> <li> <p>It's worth noting that there's actually a hidden, last step:     rebuilding the daily summaries inside the new database. This will be     done automatically by <code>weewxd</code> at the next startup. Alternatively, it     can be done manually using the     <code>weectl database rebuild-daily</code> action:</p> <pre><code>weectl database rebuild-daily\n</code></pre> </li> </ol>"},{"location":"custom/database/#change-unit-system","title":"Changing the unit system in an existing database","text":"<p>Normally, data are stored in the databases using US Customary units, and you shouldn't care; it is an \"implementation detail\". Data can always be displayed using any set of units you want \u2014 the section Changing unit systems explains how to change the reporting units. Nevertheless, there may be special situations where you wish to store the data in Metric units. For example, you may need to allow direct programmatic access to the database from another piece of software that expects metric units.</p> <p>You should not change the database unit system midstream. That is, do not start with one unit system then, some time later, switch to another. WeeWX cannot handle databases with mixed unit systems \u2014 see the section <code>[StdConvert]</code> in the WeeWX User's Guide. However, you can reconfigure the database by copying it to a new database, performing the unit conversion along the way. You then use this new database.</p> <p>The general strategy is identical to the strategy outlined above in the section Reconfigure database using new schema. The only difference is that instead of specifying a new starting schema, you specify a different database unit system. This means that instead of steps 1 and 2 above, you edit the configuration file and change option <code>target_unit</code> in section <code>[StdConvert]</code> to reflect your choice. For example, if you are switching to metric units, the option will look like:</p> <pre><code>[StdConvert]\ntarget_unit = METRICWX\n</code></pre> <p>After changing <code>target_unit</code>, you then go ahead with the rest of the steps. That is run the action <code>weectl database reconfigure</code>, then shuffle the databases.</p>"},{"location":"custom/database/#rebuilding-the-daily-summaries","title":"Rebuilding the daily summaries","text":"<p>The <code>weectl database</code> command can also be used to rebuild the daily summaries:</p> <pre><code>weectl database rebuild-daily\n</code></pre> <p>In most cases this will be sufficient; however, if anomalies remain in the daily summaries the daily summary tables may be dropped first before rebuilding:</p> <pre><code>weectl database drop-daily\n</code></pre> <p>Then try again with <code>weectl database rebuild-daily</code>.</p>"},{"location":"custom/derived/","title":"Adding new, derived types","text":"<p>In the section Adding a second data source, we saw an example of how to create a new type for a new data source. But, what if you just want to add a type that is a derivation of existing types? The WeeWX type <code>dewpoint</code> is an example of this: it's a function of two observables, <code>outTemp</code>, and <code>outHumidity</code>. WeeWX calculates it automatically for you.</p> <p>Calculating new, derived types is the job of the WeeWX XTypes system. It can also allow you to add new aggregation types.</p> <p>See the Wiki article Extensible types (XTypes) for complete details on how the XTypes system works.</p>"},{"location":"custom/drivers/","title":"Porting to new hardware","text":"<p>Naturally, this is an advanced topic but, nevertheless, I'd like to encourage any Python wizards out there to give it a try. Of course, I have selfish reasons for this: I don't want to have to buy every weather station ever invented, and I don't want my roof to look like a weather station farm!</p> <p>A driver communicates with hardware. Each driver is a single python file that contains the code that is the interface between a device and WeeWX. A driver may communicate directly with hardware using a MODBus, USB, serial, or other physical interface. Or it may communicate over a network to a physical device or a web service.</p>"},{"location":"custom/drivers/#general-guidelines","title":"General guidelines","text":"<ul> <li>The driver should emit data as it receives it from the hardware (no     caching).</li> <li>The driver should emit only data it receives from the hardware (no     \"filling in the gaps\").</li> <li>The driver should not modify the data unless the modification is     directly related to the hardware (e.g., decoding a     hardware-specific sensor value).</li> <li>If the hardware flags \"bad data\", then the driver should emit a     null value for that datum (Python <code>None</code>).</li> <li>The driver should not calculate any derived variables (such as     dewpoint). The service <code>StdWXService</code> will do that.</li> <li>However, if the hardware emits a derived variable, then the driver     should emit it.</li> </ul>"},{"location":"custom/drivers/#implement-the-driver","title":"Implement the driver","text":"<p>Create a file in the user directory, say <code>mydriver.py</code>. This file will contain the driver class as well as any hardware-specific code. Do not put it in the <code>weewx/drivers</code> directory, or it will be deleted when you upgrade WeeWX.</p> <p>Inherit from the abstract base class <code>weewx.drivers.AbstractDevice</code>. Try to implement as many of its methods as you can. At the very minimum, you must implement the first three methods, <code>loader</code>, <code>hardware_name</code>, and <code>genLoopPackets</code>.</p>"},{"location":"custom/drivers/#loader","title":"loader()","text":"<p>This is a factory function that returns an instance of your driver. It has two arguments: the configuration dictionary, and a reference to the WeeWX engine.</p>"},{"location":"custom/drivers/#hardware_name","title":"hardware_name","text":"<p>This is an attribute that should return a string with a short nickname for the hardware, such as <code>\"ACME X90\"</code></p>"},{"location":"custom/drivers/#genlooppackets","title":"genLoopPackets()","text":"<p>This should be a Python generator function that yields loop packets, one after another. Don't worry about stopping it: the engine will do this when an archive record is due. A \"loop packet\" is a dictionary. At the very minimum it must contain keys for the observation time and for the units used within the packet.</p> Required keys dateTime The time of the observation in unix epoch time. usUnits  The unit system used. weewx.US for US customary, weewx.METRICWX, or weewx.METRIC for metric. See the Units for their exact definitions. The dictionaries USUnits, MetricWXUnits, and MetricUnits in file units.py, can also be useful.          <p>Then include any observation types you have in the dictionary. Every packet need not contain the same set of observation types. Different packets can use different unit systems, but all observations within a packet must use the same unit system. If your hardware is capable of measuring an observation type but, for whatever reason, its value is bad (maybe a bad checksum?), then set its value to <code>None</code>. If your hardware is incapable of measuring an observation type, then leave it out of the dictionary.</p> <p>A couple of observation types are tricky, in particular, <code>rain</code>. The field <code>rain</code> in a LOOP packet should be the amount of rain that has fallen since the last packet. Because LOOP packets are emitted fairly frequently, this is likely to be a small number. If your hardware does not provide this value, you might have to infer it from changes in whatever value it provides, for example changes in the daily or monthly rainfall.</p> <p>Wind is another tricky one. It is actually broken up into four different observations: <code>windSpeed</code>, <code>windDir</code>, <code>windGust</code>, and <code>windGustDir</code>. Supply as many as you can. The directions should be compass directions in degrees (0=North, 90=East, etc.).</p> <p>Be careful when reporting pressure. There are three observations related to pressure. Some stations report only the station pressure, others calculate and report sea level pressures.</p> Pressure types pressure  The Station Pressure (SP), which is the raw, absolute pressure measured by the station. This is the true barometric pressure for the station.          barometer  The Sea Level Pressure (SLP) obtained by correcting the Station Pressure for altitude and local temperature. This is the pressure reading most commonly used by meteorologist to track weather systems at the surface, and this is the pressure that is uploaded to weather services by WeeWX. It is the station pressure reduced to mean sea level using local altitude and local temperature.          altimeter  The Altimeter Setting (AS) obtained by correcting the Station Pressure for altitude. This is the pressure reading most commonly heard in weather reports. It is not the true barometric pressure of a station, but rather the station pressure reduced to mean sea level using altitude and an assumed temperature average."},{"location":"custom/drivers/#genarchiverecords","title":"genArchiveRecords()","text":"<p>If your hardware does not have an archive record logger, then WeeWX can do the record generation for you. It will automatically collect all the types it sees in your loop packets then emit a record with the averages (in some cases the sum or max value) of all those types. If it doesn't see a type, then it won't appear in the emitted record.</p> <p>However, if your hardware does have a logger, then you should implement method <code>genArchiveRecords()</code> as well. It should be a generator function that returns all the records since a given time.</p>"},{"location":"custom/drivers/#archive_interval","title":"archive_interval","text":"<p>If you implement function <code>genArchiveRecords()</code>, then you should also implement <code>archive_interval</code> as either an attribute, or as a property function. It should return the archive interval in seconds.</p>"},{"location":"custom/drivers/#gettime","title":"getTime()","text":"<p>If your hardware has an onboard clock and supports reading the time from it, then you may want to implement this method. It takes no argument. It should return the time in Unix Epoch Time.</p>"},{"location":"custom/drivers/#settime","title":"setTime()","text":"<p>If your hardware has an onboard clock and supports setting it, then you may want to implement this method. It takes no argument and does not need to return anything.</p>"},{"location":"custom/drivers/#closeport","title":"closePort()","text":"<p>If the driver needs to close a serial port, terminate a thread, close a database, or perform any other activity before the application terminates, then you must supply this function. WeeWX will call it if it needs to shut down your console (usually in the case of an error).</p>"},{"location":"custom/drivers/#define-the-configuration","title":"Define the configuration","text":"<p>You then include a new section in the configuration file <code>weewx.conf</code> that includes any options your driver needs. It should also include an entry <code>driver</code> that points to where your driver can be found. Set option <code>station_type</code> to your new section type and your driver will be loaded.</p>"},{"location":"custom/drivers/#examples","title":"Examples","text":"<p>The <code>fileparse</code> driver is perhaps the simplest example of a WeeWX driver. It reads name-value pairs from a file and uses the values as sensor 'readings'. The code is actually packaged as an extension, located in <code>examples/fileparse</code>, making it a good example of not only writing a device driver, but also of how to package an extension. The actual driver itself is in <code>examples/fileparse/bin/user/fileparse.py</code>.</p> <p>Another good example is the simulator code located in <code>weewx/drivers/simulator.py</code>. It's dirt simple, and you can easily play with it. Many people have successfully used it as a starting point for writing their own custom driver.</p> <p>The Ultimeter (<code>ultimeter.py</code>) and WMR100 (<code>wmr100.py</code>) drivers illustrate how to communicate with serial and USB hardware, respectively. They also show different approaches for decoding data. Nevertheless, they are pretty straightforward.</p> <p>The driver for the Vantage series is by far the most complicated. It actually multi-inherits from not only <code>AbstractDevice</code>, but also <code>StdService</code>. That is, it also participates in the engine as a service.</p> <p>Naturally, there are a lot of subtleties that have been glossed over in this high-level description. If you run into trouble, look for help in the weewx-development group.</p>"},{"location":"custom/extensions/","title":"Extensions","text":"<p>A key feature of WeeWX is its ability to be extended by installing 3rd party extensions. Extensions are a way to package one or more customizations so that they can be installed and distributed as a functional group.</p> <p>Customizations typically fall into one of these categories:</p> <ul> <li>search list extension</li> <li>template</li> <li>skin</li> <li>service</li> <li>generator</li> <li>driver</li> </ul> <p>Take a look at the WeeWX wiki for a sampling of some of the extensions that are available.</p>"},{"location":"custom/extensions/#creating-an-extension","title":"Creating an extension","text":"<p>Now that you have made some customizations, you might want to share those changes with other WeeWX users. Put your customizations into an extension to make installation, removal, and distribution easier.</p> <p>Here are a few guidelines for creating extensions:</p> <ul> <li> <p>Extensions should not modify or depend upon existing skins. An extension   should include its own, standalone skin to illustrate any templates, search   list extension, or generator features.</p> </li> <li> <p>Extensions should not modify the database schemas. If it requires   data not found in the default databases, an extension should provide its own   database and schema.</p> </li> </ul> <p>Although one extension might use another extension, take care to write the dependent extension so that it fails gracefully. For example, a skin might use data from the forecast extension, but what happens if the forecast extension is not installed? Make the skin display a message about \"forecast not installed\" but otherwise continue to function.</p>"},{"location":"custom/extensions/#packaging-an-extension","title":"Packaging an extension","text":"<p>The structure of an extension mirrors that of WeeWX itself. If the customizations include a skin, the extension will have a <code>skins</code> directory. If the customizations include python code, the extension will have a <code>bin/user</code> directory.</p> <p>Each extension should also include:</p> <ul> <li> <p><code>readme.txt</code> or <code>readme.md</code> - a summary of what the extension does, a list of   pre-requisites (if any), and instructions for installing the extension   manually</p> </li> <li> <p><code>changelog</code> - an enumeration of changes in each release</p> </li> <li> <p><code>install.py</code> - python code used by the WeeWX <code>ExtensionInstaller</code></p> </li> </ul> <p>For example, here is the structure of an extension called <code>basic</code>, which installs a skin called <code>Basic</code>. You can find it in the <code>examples</code> subdirectory.</p> <pre><code>basic\n\u251c\u2500\u2500 changelog\n\u251c\u2500\u2500 install.py\n\u251c\u2500\u2500 readme.md\n\u2514\u2500\u2500 skins\n    \u2514\u2500\u2500 Basic\n        \u251c\u2500\u2500 basic.css\n        \u251c\u2500\u2500 current.inc\n        \u251c\u2500\u2500 favicon.ico\n        \u251c\u2500\u2500 hilo.inc\n        \u251c\u2500\u2500 index.html.tmpl\n        \u251c\u2500\u2500 lang\n        \u2502   \u251c\u2500\u2500 en.conf\n        \u2502   \u2514\u2500\u2500 fr.conf\n        \u2514\u2500\u2500 skin.conf\n</code></pre> <p>Here is the structure of an extension called <code>xstats</code>, which implements a search list extension, as well as a simple skin. You can also find it in the <code>examples</code> subdirectory.</p> <pre><code>xstats\n\u251c\u2500\u2500 bin\n\u2502   \u2514\u2500\u2500 user\n\u2502       \u2514\u2500\u2500 xstats.py\n\u251c\u2500\u2500 changelog\n\u251c\u2500\u2500 install.py\n\u251c\u2500\u2500 readme.txt\n\u2514\u2500\u2500 skins\n    \u2514\u2500\u2500 xstats\n        \u251c\u2500\u2500 index.html.tmpl\n        \u2514\u2500\u2500 skin.conf\n</code></pre> <p>To distribute an extension, simply create a compressed archive of the extension directory.</p> <p>For example, create the compressed archive for the <code>basic</code> skin like this:</p> <pre><code>tar cvfz basic.tar.gz basic\n</code></pre> <p>Once an extension has been packaged, it can be installed using <code>weectl</code>:</p> <pre><code>weectl extension install EXTENSION-LOCATION\n</code></pre>"},{"location":"custom/extensions/#default-values","title":"Default values","text":"<p>Whenever possible, an extension should just work, with a minimum of input from the user. At the same time, parameters for the most frequently requested options should be easily accessible and easy to modify. For skins, this might mean parameterizing strings into <code>[Labels]</code> for easier customization. Or it might mean providing parameters in <code>[Extras]</code> to control skin behavior or to parameterize links.</p> <p>Some parameters must be specified, and no default value would be appropriate. For example, an uploader may require a username and password, or a driver might require a serial number or IP address. In these cases, use a default value in the configuration that will obviously require modification. The username might default to REPLACE_ME. Also be sure to add a log entry that indicates the feature is disabled until the value has been specified.</p> <p>In the case of drivers, use the configuration editor to prompt for this type of required value.</p>"},{"location":"custom/image-generator/","title":"The Image generator","text":"<p>WeeWX is configured to generate a set of useful plots. But, what if you don't like how they look, or you want to generate different plots, perhaps with different aggregation types?</p> <p>The Image generator is controlled by the configuration options in the reference [ImageGenerator].</p> <p>These options are specified in the <code>[ImageGenerator]</code> section of a skin configuration file. Let's take a look at the beginning part of this section. It looks like this:</p> <pre><code>[ImageGenerator]\n...\nimage_width = 500\nimage_height = 180\nimage_background_color = #f5f5f5\n\nchart_background_color = #d8d8d8\nchart_gridline_color = #a0a0a0\n...\n</code></pre> <p>The options directly under the section name <code>[ImageGenerator]</code> will apply to all plots, unless overridden in subsections. So, unless otherwise changed, all plots will be 500 pixels in width, 180 pixels in height, and will have an RGB background color of <code>#f5f5f5</code>, a very light gray (HTML color \"WhiteSmoke\"). The chart itself will have a background color of <code>#d8d8d8</code> (a little darker gray), and the gridlines will be <code>#a0a0a0</code> (still darker). The other options farther down (not shown) will also apply to all plots.</p>"},{"location":"custom/image-generator/#time-periods","title":"Time periods","text":"<p>After the \"global\" options at the top of section <code>[ImageGenerator]</code>, comes a set of subsections, one for each time period (day, week, month, and year). These subsections define the nature of aggregation and plot types for that time period. For example, here is a typical set of options for subsection <code>[[month_images]]</code>. It controls which \"monthly\" images will get generated, and what they will look like:</p> <pre><code>    [[month_images]]\nx_label_format = %d\nbottom_label_format = %m/%d/%y %H:%M\ntime_length = 2592000    # == 30 days\naggregate_type = avg\naggregate_interval = 3h\nshow_daynight = false\n</code></pre> <p>The option <code>x_label_format</code> gives a strftime() type format for the x-axis. In this example, it will only show days (format option <code>%d</code>). The <code>bottom_label_format</code> is the format used to time stamp the image at the bottom. In this example, it will show the time as something like <code>10/25/09 15:35</code>. A plot will cover a nominal 30 days, and all items included in it will use an aggregate type of averaging over 3 hours. Finally, by setting option <code>show_daynight</code> to <code>false</code>, we are requesting that day-night, shaded bands not be shown.</p>"},{"location":"custom/image-generator/#image-files","title":"Image files","text":"<p>Within each time period subsection is another nesting, one for each image to be generated. The title of each sub-sub-section is the filename to be used for the image. Finally, at one additional nesting level (!) are the logical names of all the line types to be drawn in the image. Like elsewhere, the values specified in the level above can be overridden. For example, here is a typical set of options for sub-sub-section <code>[[[monthrain]]]</code>:</p> <pre><code>        [[[monthrain]]]\nplot_type = bar\nyscale = None, None, 0.02\n[[[[rain]]]]\naggregate_type = sum\naggregate_interval = 1d\nlabel = Rain (daily total)\n</code></pre> <p>This will generate an image file with name <code>monthrain.png</code>. It will be a bar plot. Option <code>yscale</code> controls the y-axis scaling \u2014 if left out, the scale will be chosen automatically. However, in this example we are choosing to exercise some degree of control by specifying values explicitly. The option is a 3-way tuple (<code>ylow</code>, <code>yhigh</code>, <code>min_interval</code>), where <code>ylow</code> and <code>yhigh</code> are the minimum and maximum y-axis values, respectively, and <code>min_interval</code> is the minimum tick interval. If set to <code>None</code>, the corresponding value will be automatically chosen. So, in this example, the setting</p> <pre><code>yscale = None, None, 0.02\n</code></pre> <p>will cause WeeWX to pick sensible y minimum and maximum values, but require that the tick increment (<code>min_interval</code>) be at least 0.02.</p> <p>Continuing on with the example above, there will be only one plot \"line\" (it will actually be a series of bars) and it will have logical name <code>rain</code>. Because we have not said otherwise, the database column name to be used for this line will be the same as its logical name, that is, <code>rain</code>, but this can be overridden. The aggregation type will be summing (overriding the averaging specified in subsection <code>[[month_images]]</code>), so you get the total rain over the aggregate period (rather than the average) over an aggregation interval of 86,400 seconds (one day). The plot line will be titled with the indicated label of 'Rain (daily total)'. The result of all this is the following plot:</p> <p></p>"},{"location":"custom/image-generator/#including-more-than-one-type-in-a-plot","title":"Including more than one type in a plot","text":"<p>More than one observation can be included in a plot. For example, here is how to generate a plot with the week's outside temperature as well as dewpoint:</p> <pre><code>[[[monthtempdew]]]\n[[[[outTemp]]]]\n[[[[dewpoint]]]]\n</code></pre> <p>This would create an image in file <code>monthtempdew.png</code> that includes a line plot of both outside temperature and dewpoint:</p> <p></p>"},{"location":"custom/image-generator/#inclue-same-sql-type-2x","title":"Including a type more than once in a plot","text":"<p>Another example. Suppose that you want a plot of the day's temperature, overlaid with hourly averages. Here, you are using the same data type (<code>outTemp</code>) for both plot lines, the first with averages, the second without. If you do the obvious it won't work:</p> <pre><code># WRONG ##\n[[[daytemp_with_avg]]]\n[[[[outTemp]]]]\naggregate_type = avg\naggregate_interval = 1h\n[[[[outTemp]]]]  # OOPS! The same section name appears more than once!\n</code></pre> <p>The option parser does not allow the same section name (<code>outTemp</code> in this case) to appear more than once at a given level in the configuration file, so an error will be declared (technical reason: formally, the sections are an unordered dictionary). If you wish for the same observation to appear more than once in a plot then there is a trick you must know: use option <code>data_type</code>. This will override the default action that the logical line name is used for the database column. So, our example would look like this:</p> <pre><code>[[[daytemp_with_avg]]]\n[[[[avgTemp]]]]\ndata_type = outTemp\naggregate_type = avg\naggregate_interval = 1h\nlabel = Avg. Temp.\n[[[[outTemp]]]]\n</code></pre> <p>Here, the first plot line has been given the name <code>avgTemp</code> to distinguish it from the second line <code>outTemp</code>. Any name will do \u2014 it just has to be different. We have specified that the first line will use data type <code>outTemp</code> and that it will use averaging over a one-hour period. The second also uses <code>outTemp</code>, but will not use averaging.</p> <p>The result is a nice plot of the day's temperature, overlaid with a one-hour smoothed average:</p> <p></p> <p>One more example. This one shows daily high and low temperatures for a year:</p> <pre><code>[[year_images]]\n[[[yearhilow]]]\n[[[[hi]]]]\ndata_type = outTemp\naggregate_type = max\nlabel = High\n[[[[low]]]]\ndata_type = outTemp\naggregate_type = min\nlabel = Low Temperature\n</code></pre> <p>This results in the plot <code>yearhilow.png</code>:</p> <p></p>"},{"location":"custom/image-generator/#arbitrary-expressions","title":"Including arbitrary expressions","text":"<p>The option <code>data_type</code> can actually be any arbitrary SQL expression that is valid in the context of the available types in the schema. For example, say you wanted to plot the difference between inside and outside temperature for the year. This could be done with:</p> <pre><code>[[year_images]]\n[[[yeardiff]]]\n[[[[diff]]]]\ndata_type = inTemp-outTemp\nlabel = Inside - Outside\n</code></pre> <p>Note that the option <code>data_type</code> is now an expression representing the difference between <code>inTemp</code> and <code>outTemp</code>, the inside and outside temperature, respectively. This results in a plot <code>yeardiff.png</code>:</p> <p></p>"},{"location":"custom/image-generator/#changing-the-unit-used-in-a-plot","title":"Changing the unit used in a plot","text":"<p>Normally, the unit used in a plot is set by the unit group of the observation types in the plot. For example, consider this plot of today's outside temperature and dewpoint:</p> <pre><code>    [[day_images]]\n...\n[[[daytempdew]]]\n[[[[outTemp]]]]\n[[[[dewpoint]]]]\n</code></pre> <p>Both <code>outTemp</code> and <code>dewpoint</code> belong to unit group <code>group_temperature</code>, so this plot will use whatever unit has been specified for that group. See the section Mixed units for details.</p> <p>However, supposed you'd like to offer both Metric and US Customary versions of the same plot? You can do this by using option <code>unit</code> to override the unit used for individual plots:</p> <pre><code>    [[day_images]]\n...\n[[[daytempdewUS]]]\nunit = degree_F\n[[[[outTemp]]]]\n[[[[dewpoint]]]]\n\n[[[daytempdewMetric]]]\nunit = degree_C\n[[[[outTemp]]]]\n[[[[dewpoint]]]]\n</code></pre> <p>This will produce two plots: file <code>daytempdewUS.png</code> will be in degrees Fahrenheit, while file <code>dayTempMetric.png</code> will use degrees Celsius.</p>"},{"location":"custom/image-generator/#line-gaps","title":"Line gaps","text":"<p>If there is a time gap in the data, the option <code>line_gap_fraction</code> controls how line plots will be drawn. Here's what a plot looks like without and with this option being specified:</p> No <code>line_gap_fraction</code> specified With <code>line_gap_fraction=0.01</code>.Note how each line has been split into two lines."},{"location":"custom/image-generator/#progressive-vector-plots","title":"Progressive vector plots","text":"<p>WeeWX can produce progressive vector plots as well as the more conventional x-y plots. To produce these, use plot type <code>vector</code>. You need a vector type to produce this kind of plot. There are two: <code>windvec</code>, and <code>windgustvec</code>. While they do not actually appear in the database, WeeWX understands that they represent special vector-types. The first, <code>windvec</code>, represents the average wind in an archive period, the second, <code>windgustvec</code> the max wind in an archive period. Here's how to produce a progressive vector for one week that shows the hourly biggest wind gusts, along with hourly averages:</p> <pre><code>[[[weekgustoverlay]]]\naggregate_interval = 1h\n[[[[windvec]]]]\nlabel = Hourly Wind\nplot_type = vector\naggregate_type = avg\n[[[[windgustvec]]]]\nlabel = Gust Wind\nplot_type = vector\naggregate_type = max\n</code></pre> <p>This will produce an image file with name <code>weekgustoverlay.png</code>. It will consist of two progressive vector plots, both using hourly aggregation (3,600 seconds). For the first set of vectors, the hourly average will be used. In the second, the max of the gusts will be used:</p> <p></p> <p>By default, the sticks in the progressive wind plots point towards the wind source. That is, the stick for a wind from the west will point left. If you have a chronic wind direction (as I do), you may want to rotate the default direction so that all the vectors do not line up over the x-axis, overlaying each other. Do this by using option <code>vector_rotate</code>. For example, with my chronic westerlies, I set <code>vector_rotate</code> to 90.0 for the plot above, so winds out of the west point straight up.</p> <p>If you use this kind of plot (the out-of-the-box version of WeeWX includes daily, weekly, monthly, and yearly progressive wind plots), a small compass rose will be put in the lower-left corner of the image to show the orientation of North.</p>"},{"location":"custom/image-generator/#overriding-values","title":"Overriding values","text":"<p>Remember that values at any level can override values specified at a higher level. For example, say you want to generate the standard plots, but for a few key observation types such as barometer, you want to also generate some oversized plots to give you extra detail, perhaps for an HTML popup. The standard <code>skin.conf</code> file specifies plot size of 300x180 pixels, which will be used for all plots unless overridden:</p> <pre><code>[ImageGenerator]\n...\nimage_width = 300\nimage_height = 180\n</code></pre> <p>The standard plot of barometric pressure will appear in <code>daybarometer.png</code>:</p> <pre><code>[[[daybarometer]]]\n[[[[barometer]]]] </code></pre> <p>We now add our special plot of barometric pressure, but specify a larger image size. This image will be put in file <code>daybarometer_big.png</code>.</p> <pre><code>[[[daybarometer_big]]]\nimage_width  = 600\nimage_height = 360\n[[[[barometer]]]]\n</code></pre>"},{"location":"custom/introduction/","title":"Customization Guide","text":"<p>This document covers the customization of WeeWX. It assumes that you have read, and are reasonably familiar with, the Users Guide.</p> <p>The introduction contains an overview of the architecture. If you are only interested in customizing the generated reports you can probably skip the introduction and proceed directly to the section Customizing reports. With this approach you can easily add new plot images, change the titles of images, change the units used in the reports, and so on.</p> <p>However, if your goal is a specialized application, such as adding alarms, RSS feeds, etc., then it would be worth your while to read about the internal architecture.</p> <p>Most of the guide applies to any hardware, but the exact data types are hardware-specific. See the WeeWX Hardware Guide for details of how different observation types are handled by different types hardware.</p> <p>Warning</p> <p>WeeWX is still an experimental system and, as such, its internal design is subject to change. Future upgrades may break any customizations you have done, particularly if they involve the API (skin customizations tend to be more stable).</p>"},{"location":"custom/introduction/#overall-system-architecture","title":"Overall system architecture","text":"<p>Below is a brief overview of the WeeWX system architecture, which is covered in much more detail in the rest of this document.</p> A typical WeeWX pipeline. The actual pipeline depends on what extensions are in use. Data, in the form of LOOP packets and archive records, flows from top to bottom. <ul> <li> <p>A WeeWX process normally handles the monitoring of one station \u2014 e.g. a weather station. The process is configured using options in a configuration file, typically called <code>weewx.conf</code>.</p> </li> <li> <p>A WeeWX process has at most one \"driver\" to communicate with the station hardware and receive \"high resolution\" (i.e. every few seconds) measurement data in the form of LOOP packets. The driver is single-threaded and blocking, so no more than one driver can run in a WeeWX process.</p> </li> <li> <p>LOOP packets may contain arbitrary data from the station/driver in the form of a Python dictionary. Each LOOP packet must contain a time stamp and a unit system, in addition to any number of observations, such as temperature or humidity. For extensive types, such as rain, the packet contains the total amount of rain that fell during the observation period.</p> </li> <li> <p>WeeWX then compiles these LOOP packets into regularly spaced \"archive records\". For most types, the archive record contains the average value seen in all the LOOP packets over the archive interval (typically 5 minutes). For extensive types, such as rain, it is the sum of all values over the archive interval.</p> </li> <li> <p>Internally, the WeeWX engine uses a pipeline architecture, consisting of many services. Services bind to events of interest, such as new LOOP packets, or new archive records. Events are then run down the pipeline in order \u2014 services at the top of the pipeline act on the data before services farther down the pipe.</p> </li> <li> <p>Services can do things such as check the data quality, apply corrections, or save data to a database. Users can easily add new services.</p> </li> <li> <p>WeeWX includes an ability to customize behavior by installing extensions. Extensions may consist of one or more drivers, services, and/or skins, all in an easy-to-install package.</p> </li> </ul>"},{"location":"custom/introduction/#data-architecture","title":"Data architecture","text":"<p>WeeWX is data-driven. When the sensors spit out some data, WeeWX does something. The \"something\" might be to print out the data, or to generate an HTML report, or to use FTP to copy a report to a web server, or to perform some calculations using the data.</p> <p>A driver is Python code that communicates with the hardware. The driver reads data from a serial port or a device on the USB or a network interface. It handles any decoding of raw bits and bytes, and puts the resulting data into LOOP packets. The drivers for some kinds of hardware (most notably, Davis Vantage) are capable of emitting archive records as well.</p> <p>In addition to the primary observation types such as temperature, humidity, or solar radiation, there are also many useful dependent types, such as wind chill, heat index, or ET, which are calculated from the primary data. The firmware in some weather stations are capable of doing many of these calculations on their own. For the rest, should you choose to do so, the WeeWX service StdWXCalculate can fill in the gaps. Sometimes the firmware simply does it wrong, and you may choose to have WeeWX do the calculation, despite the type's presence in LOOP packets.</p>"},{"location":"custom/introduction/#loop-packets-vs-archive-records","title":"LOOP packets vs. archive records","text":"<p>Generally, there are two types of data that flow through WeeWX: LOOP packets, and archive records. Both are represented as Python dictionaries.</p>"},{"location":"custom/introduction/#loop-packets","title":"LOOP packets","text":"<p>LOOP packets are the raw data generated by the device driver. They get their name from the Davis Instruments documentation. For some devices they are generated at rigid intervals, such as every 2 seconds for the Davis Vantage series, for others, irregularly, every 20 or 30 seconds or so. LOOP packets may or may not contain all the data types an instrument is capable of measuring. For example, a packet may contain only temperature data, another only barometric data, etc. These kinds of packet are called partial record packets. By contrast, other types of hardware (notably the Vantage series) include every data type in every LOOP packet.</p> <p>In summary, LOOP packets can be highly irregular in time and in what they contain, but they come in frequently.</p>"},{"location":"custom/introduction/#archive-records","title":"Archive records","text":"<p>By contrast, archive records are highly regular. They are generated at regular intervals (typically every 5 to 30 minutes), and all contain the same data types. They represent an aggregation of the LOOP packets over the archive interval. The exact kind of aggregation depends on the data type. For example, for temperature, it's generally the average temperature over the interval. For rain, it's the sum of rain over the interval. For battery status it's the last value in the interval.</p> <p>Some hardware is capable of generating their own archive records (the Davis Vantage and Oregon Scientific WMR200, for example), but for hardware that cannot, WeeWX generates them.</p> <p>It is the archive data that is put in the SQL database, although, occasionally, the LOOP packets can be useful (such as for the Weather Underground's \"Rapidfire\" mode).</p>"},{"location":"custom/introduction/#what-to-customize","title":"What to customize","text":"<p>For configuration changes, such as which skins to use, or enabling posts to the Weather Underground, simply modify the WeeWX configuration file, nominally <code>weewx.conf</code>. Any changes you make will be preserved during an upgrade.</p> <p>Customization of reports may require changes to a skin configuration file <code>skin.conf</code> or template files ending in <code>.tmpl</code> or <code>.inc</code>. Anything in the <code>skins</code> subdirectory is also preserved across upgrades.</p> <p>You may choose to install one of the many third-party extensions that are available for WeeWX. These are typically installed in either the skins or user subdirectories, both of which are preserved across upgrades.</p> <p>More advanced customizations may require new Python code or modifications of example code. These should be placed in the <code>user</code> directory, where they will be preserved across upgrades. For example, if you wish to modify one of the examples that comes with WeeWX, copy it from the examples directory to the user directory, then modify it there. This way, your modifications will not be touched if you upgrade.</p> <p>For code that must run before anything else in WeeWX runs (for example, to set up an environment), put it in the file <code>extensions.py</code> in the user directory. It is always run before the WeeWX engine starts up. Because it is in the <code>user</code> subdirectory, it is preserved between upgrades.</p>"},{"location":"custom/introduction/#do-i-need-to-restart-weewx","title":"Do I need to restart WeeWX?","text":"<p>If you make a change in <code>weewx.conf</code>, you will need to restart <code>weewxd</code>.</p> <p>If you modify Python code in the <code>user</code> directory or elsewhere, you will need to restart <code>weewxd</code>.</p> <p>If you install an extension, you will need to restart <code>weewxd</code>.</p> <p>If you make a change to a template or to a <code>skin.conf</code> file, then you do not need to restart <code>weewxd</code>. The change will be adopted at the next reporting cycle, typically at the end of an archive interval.</p>"},{"location":"custom/introduction/#the-utility-wee_reports","title":"The utility <code>wee_reports</code>","text":"<p>If you make changes, how do you know what the results will look like? You could just run <code>weewxd</code> and wait until the next reporting cycle kicks off but, depending on your archive interval, that could be a 30-minute wait or more.</p> <p>The utility <code>wee_reports</code> allows you to run a report whenever you like. To use it, just run it from a command line, with the location of your configuration file <code>weewx.conf</code> as the first argument. Optionally, you can tell it what to use as the \"Current\" time, using either option <code>--epoch</code>, or some combination of <code>--date</code> and <code>--time</code>. </p> <p>For more information about <code>wee_reports</code>, see the Utilities Guide</p>"},{"location":"custom/introduction/#the-weewx-service-architecture","title":"The WeeWX service architecture","text":"<p>At a high-level, WeeWX consists of an engine class called <code>StdEngine</code>. It is responsible for loading services, then arranging for them to be called when key events occur, such as the arrival of LOOP or archive data. The default install of WeeWX includes the following services:</p> The standard WeeWX services Service Function weewx.engine.StdTimeSynch Arrange to have the clock on the station synchronized at regular intervals.          weewx.engine.StdConvert Converts the units of the input to a target unit system (such as US or Metric).          weewx.engine.StdCalibrate Adjust new LOOP and archive packets using calibration expressions.          weewx.engine.StdQC Check quality of incoming data, making sure values fall within a specified range.          weewx.wxservices.StdWXCalculate Decide which derived observation types need to be calculated.          weewx.wxxtypes.StdWXXTypesweewx.wxxtypes.StdPressureCookerweewx.wxxtypes.StdRainRaterweewx.wxxtypes.StdDelta Calculate derived variables, such as ET, dewpoint, or rainRate.          weewx.engine.StdArchive Archive any new data to the SQL databases. weewx.restx.StdStationRegistry weewx.restx.StdWunderground             weewx.restx.StdPWSweather weewx.restx.StdCWOP weewx.restx.StdWOWweewx.restx.StdAWEKAS          Various  RESTful services             (simple stateless client-server protocols), such as the Weather Underground, CWOP, etc. Each             launches its own, independent thread, which manages the post.          weewx.engine.StdPrint Print out new LOOP and archive packets on the console.          weewx.engine.StdReport Launch a new thread to do report processing after a new archive record arrives. Reports do things             such as generate HTML or CSV files, generate images, or transfer files using FTP/rsync.          <p>It is easy to extend old services or to add new ones. The source distribution includes an example new service called MyAlarm, which sends an email when an arbitrary expression evaluates True. These advanced topics are covered later in the section Customizing the WeeWX service engine.</p>"},{"location":"custom/introduction/#the-standard-reporting-service-stdreport","title":"The standard reporting service <code>StdReport</code>","text":"<p>For the moment, let us focus on the last service, <code>weewx.engine.StdReport</code>, the standard service for creating reports. This will be what most users will want to customize, even if it means just changing a few options.</p>"},{"location":"custom/introduction/#reports","title":"Reports","text":"<p>The standard reporting service, <code>StdReport</code>, runs zero or more reports. The specific reports which get run are set in the configuration file <code>weewx.conf</code>, in section <code>[StdReport]</code>.</p> <p>The default distribution of WeeWX includes six reports:</p> Report Default functionality SeasonsReport  Introduced with WeeWX V3.9, this report generates a single HTML file with day, week, month and year \"to-date\" summaries, as well as the plot images to go along with them. Buttons select which timescale the user wants. It also generates HTML files with more details on celestial bodies and statistics. Also generates NOAA monthly and yearly summaries.          SmartphoneReport  A simple report that generates an HTML file, which allows \"drill down\" to show more detail about observations. Suitable for smaller devices, such as smartphones.          MobileReport  A super simple HTML file that just shows the basics. Suitable for low-powere d or bandwidth-constrained devices.          StandardReport  This is an older report that has been used for many years in WeeWX. It generates day, week, month and year \"to-date\" summaries in HTML, as well as the plot images to go along with them. Also generates NOAA monthly and yearly summaries. It typically loads faster than the SeasonsReport.          FTP  Transfer everything in the HTML_ROOT directory to a remote server using ftp.          RSYNC  Transfer everything in the HTML_ROOT directory to a remote server using the utility rsync.          <p>Note that the FTP and RSYNC \"reports\" are a funny kind of report in that they do not actually generate anything. Instead, they use the reporting service engine to transfer files and folders to a remote server.</p>"},{"location":"custom/introduction/#skins","title":"Skins","text":"<p>Each report has a skin associated with it. For most reports, the relationship with the skin is an obvious one: the skin contains the templates, any auxiliary files such as background GIFs or CSS style sheets, files with localization data, and a skin configuration file, <code>skin.conf</code>. If you will, the skin controls the look and feel of the report. Note that more than one report can use the same skin. For example, you might want to run a report that uses US Customary units, then run another report against the same skin, but using metric units and put the results in a different place. All this is possible by either overriding configuration options in the WeeWX configuration file or the skin configuration file.</p> <p>Like all reports, the FTP and RSYNC \"reports\" also use a skin, and include a skin configuration file, although they are quite minimal.</p> <p>Skins live in their own directory called <code>skins</code>, whose location is referred to as <code>SKIN_ROOT</code>.</p> <p>Note</p> <p>The symbol <code>SKIN_ROOT</code> is a symbolic name to the location of the directory where your skins are located. It is not to be taken literally. Consult the section Where to find things in the User's Guide for its exact location, dependent on how you installed WeeWX and what operating system you are using</p>"},{"location":"custom/introduction/#generators","title":"Generators","text":"<p>To create their output, skins rely on one or more generators, which are what do the actual work, such as creating HTML files or plot images. Generators can also copy files around or FTP/rsync them to remote locations. The default install of WeeWX includes the following generators:</p> Generator Function weewx.cheetahgenerator.CheetahGenerator  Generates files from templates, using the Cheetah template engine. Used to generate HTML and text files.          weewx.imagegenerator.ImageGenerator Generates graph plots. weewx.reportengine.FtpGenerator Uploads data to a remote server using FTP. weewx.reportengine.RsyncGenerator Uploads data to a remote server using rsync. weewx.reportengine.CopyGenerator Copies files locally. <p>Note that the three generators <code>FtpGenerator</code>, <code>RsyncGenerator</code>, and <code>CopyGenerator</code> do not actually generate anything having to do with the presentation layer. Instead, they just move files around.</p> <p>Which generators are to be run for a given skin is specified in the skin's configuration file, in the section [Generators].</p>"},{"location":"custom/introduction/#templates","title":"Templates","text":"<p>A template is a text file that is processed by a template engine to create a new file. WeeWX uses the Cheetah template engine. The generator <code>weewx.cheetahgenerator.CheetahGenerator</code> is responsible for running Cheetah at appropriate times.</p> <p>A template may be used to generate HTML, XML, CSV, Javascript, or any other type of text file. A template typically contains variables that are replaced when creating the new file. Templates may also contain simple programming logic.</p> <p>Each template file lives in the skin directory of the skin that uses it. By convention, a template file ends with the <code>.tmpl</code> extension. There are also template files that end with the <code>.inc</code> extension. These templates are included in other templates.</p>"},{"location":"custom/introduction/#the-database","title":"The database","text":"<p>WeeWX uses a single database to store and retrieve the records it needs. It can be implemented by using either SQLite, an open-source, lightweight SQL database, or MySQL, an open-source, full-featured database server.</p>"},{"location":"custom/introduction/#structure","title":"Structure","text":"<p>Inside this database are several tables. The most important is the archive table, a big flat table, holding one record for each archive interval, keyed by <code>dateTime</code>, the time at the end of the archive interval. It looks something like this:</p>          Structure of the archive database table      dateTime usUnits interval barometer pressure altimeter inTemp outTemp ... 1413937800 1 5 29.938 null null 71.2 56.0 ... 1413938100 1 5 29.941 null null 71.2 55.9 ... ... ... ... ... ... ... ... ... ... <p>The first three columns are required. Here's what they mean:</p> Name Meaning dateTime  The time at the end of the archive interval in unix epoch time. This is the primary key in the database. It must be unique, and it cannot be null.          usUnits  The unit system the record is in. It cannot be null. See the Units for how these systems are encoded.          interval  The length of the archive interval in minutes. It cannot be null.          <p>In addition to the archive table, there are a number of smaller tables inside the database, one for each observation type, which hold daily summaries of the type, such as the minimum and maximum value seen during the day, and at what time. These tables have names such as <code>archive_day_outTemp</code> or <code>archive_day_barometer</code>. They are there to optimize certain types of queries \u2014 their existence is generally transparent to the user. For more details, see the section Daily summaries in the Developer's Notes.</p>"},{"location":"custom/introduction/#binding-names","title":"Binding names","text":"<p>While most users will only need the one weather database that comes with WeeWX, the reporting engine allows you to use multiple databases in the same report. For example, if you have installed the cmon computer monitoring package , which uses its own database, you may want to include some statistics or graphs about your server in your reports, using that database.</p> <p>An additional complication is that WeeWX can use more than one database implementation: SQLite or MySQL. Making users specify in the templates not only which database to use, but also which implementation, would be unreasonable.</p> <p>The solution, like so many other problems in computer science, is to introduce another level of indirection, a database binding. Rather than specify which database to use, you specify which binding. Bindings do not change with the database implementation, so, for example, you know that <code>wx_binding</code> will always point to the weather database, no matter if its implementation is a sqlite database or a MySQL database. Bindings are listed in section <code>[DataBindings]</code> in the WeeWX configuration file.</p> <p>The standard weather database binding that WeeWX uses is <code>wx_binding</code>. This is the binding that you will be using most of the time and, indeed, it is the default. You rarely have to specify it explicitly.</p>"},{"location":"custom/introduction/#programming-interface","title":"Programming interface","text":"<p>WeeWX includes a module called <code>weedb</code> that provides a single interface for many of the differences between database implementations such as SQLite and MySQL. However, it is not uncommon to make direct SQL queries within services or search list extensions. In such cases, the SQL should be generic so that it will work with every type of database.</p> <p>The database manager class provides methods to create, open, and query a database. These are the canonical forms for obtaining a database manager.</p> <p>If you are opening a database from within a WeeWX service:</p> <pre><code>db_manager = self.engine.db_binder.get_manager(data_binding='name_of_binding', initialize=True)\n\n # Sample query:\ndb_manager.getSql(\"SELECT SUM(rain) FROM %s \"\\\\\n    \"WHERE dateTime&gt;? AND dateTime&lt;=?\" % db_manager.table_name, (start_ts, stop_ts))\n</code></pre> <p>If you are opening a database from within a WeeWX search list extension, you will be passed in a function <code>db_lookup()</code> as a parameter, which can then be used to bind to a database. By default, it returns a manager bound to <code>wx_binding</code>:</p> <pre><code>wx_manager    = db_lookup()                                    # Get default binding\nother_manager = db_lookup(data_binding='some_other_binding')   # Get an explicit binding\n\n # Sample queries:\nwx_manager.getSql(\"SELECT SUM(rain) FROM %s \"\\\\\n    \"WHERE dateTime&gt;? AND dateTime&lt;=?\" % wx_manager.table_name, (start_ts, stop_ts))\nother_manager.getSql(\"SELECT SUM(power) FROM %s\"\\\\\n    \"WHERE dateTime&gt;? AND dateTime&lt;=?\" % other_manager.table_name, (start_ts, stop_ts))\n</code></pre> <p>If opening a database from somewhere other than a service, and there is no <code>DBBinder</code> available:</p> <pre><code>db_manager = weewx.manager.open_manager_with_config(config_dict, data_binding='name_of_binding')\n\n # Sample query:\ndb_manager.getSql(\"SELECT SUM(rain) FROM %s \"\\\\\n    \"WHERE dateTime&gt;? AND dateTime&lt;=?\" % db_manager.table_name, (start_ts, stop_ts))\n</code></pre> <p>The <code>DBBinder</code> caches managers, and thus database connections. It cannot be shared between threads.</p>"},{"location":"custom/introduction/#units","title":"Units","text":"<p>The unit architecture in WeeWX is designed to make basic unit conversions and display of units easy. It is not designed to provide dimensional analysis, arbitrary conversions, and indications of compatibility.</p> <p>The driver reads observations from an instrument and converts them, as necessary, into a standard set of units. The actual units used by each instrument vary widely; some instruments use Metric units, others use US Customary units, and many use a mixture. The driver can emit measurements in any unit system, but it must use the same unit system for all values in a LOOP packet or archive record. </p> <p>By default, and to maintain compatibility with wview, the default database units are US Customary, although this can be changed.</p> <p>Note that whatever unit system is used in the database, data can be displayed using any unit system. So, in practice, it does not matter what unit system is used in the database.</p> <p>Each observation type, such as <code>outTemp</code> or <code>pressure</code>, is associated with a unit group, such as <code>group_temperature</code> or <code>group_pressure</code>. Each unit group is associated with a unit type such as <code>degree_F</code> or <code>mbar</code>. The reporting service uses this architecture to convert observations into a target unit system, to be displayed in your reports.</p> <p>With this architecture one can easily create reports with, say, wind measured in knots, rain measured in mm, and temperatures in degree Celsius. Or one can create a single set of templates, but display data in different unit systems with only a few stanzas in a configuration file.</p>"},{"location":"custom/localization/","title":"Localization","text":"<p>This section provides suggestions for localization, including translation to different languages and display of data in formats specific to a locale.</p>"},{"location":"custom/localization/#if-the-skin-has-been-internationalized","title":"If the skin has been internationalized","text":"<p>All the skins that come with WeeWX have been internationalized, that is, they are capable of being localized, although there may or may not be a localization available for your specific language. See the section Internationalized skins for how to tell.</p>"},{"location":"custom/localization/#internationalized-your-language-is-available","title":"Internationalized, your language is available","text":"<p>This is the easy case: the skin has been internationalized, and your locale is available. In this case, all you need to do is to select your locale in <code>weewx.conf</code>. For example, to select German (code <code>de</code>) for the Seasons skin, just add the highlighted line (or change, if it's already there):</p> <pre><code>[StdReport]\n[[SeasonsReport]]\n# The SeasonsReport uses the 'Seasons' skin, which contains the\n# images, templates and plots for the report.\nskin = Seasons\nenable = true\nlang = de\n</code></pre>"},{"location":"custom/localization/#missing-language","title":"Internationalized, but your language is missing","text":"<p>If the <code>lang</code> subdirectory is present in the skin directory, then the skin has been internationalized. However, if your language code is not included in the subdirectory, then you will have to localize it to your language. To do so, copy the file <code>en.conf</code> and name it according to the language code of your language. Then translate all the strings on the right side of the equal signs to your language. For example, say you want to localize the skin in the French language. Then copy <code>en.conf</code> to <code>fr.conf</code></p> <pre><code>cp en.conf fr.conf\n</code></pre> <p>Then change things that look like this:</p> <pre><code>[Texts]\n\"Language\" = \"English\"\n\n\"7-day\" = \"7-day\"\n\"24h\" = \"24h\"\n\"About this weather station\" = \"About this weather station\"\n</code></pre> <p>to something that looks like this:</p> <pre><code>[Texts]\nLanguage = French\n\n\"7-day\" = \"7-jours\"\n\"24h\" = \"24h\"\n\"About this weather station\" = \"A propos de cette station\"\n</code></pre> <p>And so on. When you're done, the skin author may be interested in your localization file to ship it together with the skin for the use of other users. If the skin is one that came with WeeWX, contact the WeeWX team via a post to the weewx-user group and, with your permission, we may include your localization file in a future WeeWX release.</p> <p>Finally, set the option <code>lang</code> in <code>weewx.conf</code> to your language code (<code>fr</code> in this example) as described in the User's Guide.</p>"},{"location":"custom/localization/#how-to-internationalize-a-skin","title":"How to internationalize a skin","text":"<p>What happens when you come across a skin that you like, but it has not been internationalized? This section explains how to convert the report to local formats and language.</p> <p>Internationalization of WeeWX templates uses a pattern very similar to the well-known GNU \"<code>gettext</code>\" approach. The only difference is that we have leveraged the <code>ConfigObj</code> configuration library used throughout WeeWX.</p>"},{"location":"custom/localization/#create-the-localization-file","title":"Create the localization file","text":"<p>Create a subdirectory called <code>lang</code> in the skin directory. Then create a file named by the language code with the suffix <code>.conf</code> in this subdirectory. For example, if you want to translate to Spanish, name the file <code>lang/es.conf</code>. Include the following in the file:</p> <pre><code>[Units]\n\n[[Labels]]\n\n# These are singular, plural\nmeter             = \" meter\",  \" meters\"\nday               = \" day\",    \" days\"\nhour              = \" hour\",   \" hours\"\nminute            = \" minute\", \" minutes\"\nsecond            = \" second\", \" seconds\"\n\n[[Ordinates]]\n\n# Ordinal directions. The last one should be for no wind direction\ndirections = N, NNE, NE, ENE, E, ESE, SE, SSE, S, SSW, SW, WSW, W, WNW, NW, NNW, N/A\n\n[Labels]\n\n# Set to hemisphere abbreviations suitable for your location:\nhemispheres = N, S, E, W\n\n# Generic labels, keyed by an observation type.\n[[Generic]]\naltimeter              = Altimeter                # QNH\naltimeterRate          = Altimeter Change Rate\nappTemp                = Apparent Temperature\nappTemp1               = Apparent Temperature\nbarometer              = Barometer                # QFF\nbarometerRate          = Barometer Change Rate\ncloudbase              = Cloud Base\ndateTime               = Time\ndewpoint               = Dew Point\nET                     = ET\nextraTemp1             = Temperature1\nextraTemp2             = Temperature2\nextraTemp3             = Temperature3\nheatindex              = Heat Index\ninDewpoint             = Inside Dew Point\ninHumidity             = Inside Humidity\ninTemp                 = Inside Temperature\ninterval               = Interval\nlightning_distance     = Lightning Distance\nlightning_strike_count = Lightning Strikes\noutHumidity            = Outside Humidity\noutTemp                = Outside Temperature\npressure               = Pressure                 # QFE\npressureRate           = Pressure Change Rate\nradiation              = Radiation\nrain                   = Rain\nrainRate               = Rain Rate\nTHSW                   = THSW Index\nUV                     = UV Index\nwind                   = Wind\nwindchill              = Wind Chill\nwindDir                = Wind Direction\nwindGust               = Gust Speed\nwindGustDir            = Gust Direction\nwindgustvec            = Gust Vector\nwindrun                = Wind Run\nwindSpeed              = Wind Speed\nwindvec                = Wind Vector\n\n\n[Almanac]\n\n# The labels to be used for the phases of the moon:\nmoon_phases = New, Waxing crescent, First quarter, Waxing gibbous, Full, Waning gibbous, Last quarter, Waning crescent\n\n[Texts]\n\nLanguage              = Espa\u00f1ol # Replace with the language you are targeting\n</code></pre> <p>Go through the file, translating all phrases on the right-hand side of the equal signs to your target language (Spanish in this example).</p>"},{"location":"custom/localization/#internationalize-the-template","title":"Internationalize the template","text":"<p>You will need to internationalize every HTML template (these typically have a file suffix of <code>.html.tmpl</code>). This is most easily done by opening the template and the language file in different editor windows. It is much easier if you can change both files simultaneously.</p>"},{"location":"custom/localization/#change-the-html-lang-attribute","title":"Change the HTML <code>lang</code> attribute","text":"<p>At the top of the template, change the HTML <code>lang</code> attribute to a configurable value, <code>$lang</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"$lang\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    ...\n</code></pre> <p>The value <code>$lang</code> will get replaced by the actual language to be used.</p> <p>For reference, here are the ISO language and country codes:</p> <ul> <li>language codes</li> <li>country codes</li> </ul>"},{"location":"custom/localization/#change-the-body-text","title":"Change the body text","text":"<p>The next step is to go through the templates and change all natural language phrases into lookups using <code>$gettext</code>. For example, suppose your skin has a section that looks like this:</p> <pre><code>&lt;div&gt;\n    Current Conditions\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Outside Temperature&lt;/td&gt;\n            &lt;td&gt;$current.outTemp&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <p>There are two natural language phrases here: Current Conditions and Outside Temperature. They would be changed to:</p> <pre><code>&lt;div&gt;\n    $gettext(\"Current Conditions\")\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;td&gt;$obs.label.outTemp&lt;/td&gt;\n            &lt;td&gt;$current.outTemp&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <p>We have done two replacements here. For the phrase Current Conditions, we substituted <code>$gettext(\"Current Conditions\")</code>. This will cause the Cheetah Generator to look up the localized version of \"Current Conditions\" in the localization file and substitute it. We could have done something similar for Outside Temperature, but in this case, we chose to use the localized name for type <code>outTemp</code>, which you should have provided in your localization file, under section <code>[Labels] / [[Generic]]</code>.</p> <p>In the localization file, include the translation for Current Conditions under the <code>[Texts]</code> section:</p> <pre><code>...\n[Texts]\n\n\"Language\"           = \"Espa\u00f1ol\"\n\"Current Conditions\" = \"Condiciones Actuales\"\n...\n</code></pre> <p>Repeat this process for all the strings that you find. Make sure not to replace HTML tags and HTML options.</p>"},{"location":"custom/localization/#think-about-time","title":"Think about time","text":"<p>Whenever a time is used in a template, it will need a format. WeeWX comes with the following set of defaults:</p> <pre><code>[Units]\n[[TimeFormats]]\nday        = %X\nweek       = %X (%A)\nmonth      = %x %X\nyear       = %x %X\nrainyear   = %x %X\ncurrent    = %x %X\nephem_day  = %X\nephem_year = %x %X\n</code></pre> <p>The times for images are defined with the following defaults:</p> <pre><code>[ImageGenerator]\n[[day_images]]\nbottom_label_format = %x %X\n[[week_images]]\nbottom_label_format = %x %X\n[[month_images]]\nbottom_label_format = %x %X\n[[year_images]]\nbottom_label_format = %x %X\n</code></pre> <p>These defaults will give something readable in every locale, but they may not be very pretty. Therefore, you may want to change them to something more suitable for the locale you are targeting, using the Python <code>strftime()</code> specific directives.</p> <p>Example: the default time formatting for \"Current\" conditions is <code>%x %x</code>, which will show today's date as \"14/05/21 10:00:00\" in the Spanish locale. Suppose you would rather see \"14-mayo-2021 10:00\". You would add the following to your Spanish localization file <code>es.conf</code>:</p> <pre><code>[Units]\n[[TimeFormats]]\ncurrent = %d-%B-%Y %H:%M\n</code></pre>"},{"location":"custom/localization/#environment-variable-LANG","title":"Set the environment variable <code>LANG</code>","text":"<p>Finally, you will need to set the environment variable <code>LANG</code> to reflect your locale. For example, assuming you set</p> <pre><code>$ export LANG=es_ES.UTF-8\n</code></pre> <p>before running WeeWX, then the local Spanish names for days of the week and months of the year will be used. The decimal point for numbers will also be modified appropriately.</p>"},{"location":"custom/multiple-bindings/","title":"Using multiple bindings","text":"<p>It's easy to use more than one database in your reports. Here's an example. In my office I have two consoles: a VantagePro2 connected to a Dell Optiplex, and a WMR100N, connected to a Raspberry Pi. Each is running WeeWX. The Dell is using SQLite, the RPi, MySQL.</p> <p>Suppose I wish to compare the inside temperatures of the two consoles. How would I do that?</p> <p>It's easier to access MySQL across a network than SQLite, so let's run the reports on the Dell, but access the RPi's MySQL database remotely. Here's how the bindings and database sections of <code>weewx.conf</code> would look on the Dell:</p> <pre><code>[DataBindings]\n# This section binds a data store to an actual database\n\n[[wx_binding]]\n# The database to be used - it should match one of the sections in [Databases]\ndatabase = archive_sqlite\n# The name of the table within the database\ntable_name = archive\n# The class to manage the database\nmanager = weewx.manager.DaySummaryManager\n# The schema defines to structure of the database contents\nschema = schemas.wview_extended.schema\n\n[[wmr100_binding]]\n# Binding for my WMR100 on the RPi\ndatabase = rpi_mysql\n# The name of the table within the database\ntable_name = archive\n# The class to manage the database\nmanager = weewx.manager.DaySummaryManager\n# The schema defines to structure of the database contents\nschema = schemas.wview_extended.schema\n[Databases]\n# This section binds to the actual database to be used\n\n[[archive_sqlite]]\ndatabase_type = SQLite\ndatabase_name = weewx.sdb\n\n[[rpi_mysql]]\ndatabase_type = MySQL\ndatabase_name = weewx\nhost = rpi-bug\n[DatabaseTypes]\n#   This section defines defaults for the different types of databases.\n\n[[SQLite]]\ndriver = weedb.sqlite\n# Directory in which the database files are located\nSQLITE_ROOT = archive\n\n[[MySQL]]\ndriver = weedb.mysql\n# The host where the database is located\nhost = localhost\n# The user name for logging in to the host\nuser = weewx\n# The password for the user name\npassword = weewx\n</code></pre> <p>The two additions have been highlighted. The first, <code>[[wmr100_binding]]</code>, adds a new binding called <code>wmr100_binding</code>. It links (\"binds\") to the new database, called <code>rpi_mysql</code>, through the option <code>database</code>. It also defines some characteristics of the binding, such as which manager is to be used and what its schema looks like.</p> <p>The second addition, <code>[[rpi-mysql]]</code>, defines the new database. Option <code>database_type</code> is set to <code>MySQL</code>, indicating that it is a MySQL database. Defaults for MySQL databases are defined in the section <code>[[MySQL]]</code>. The new database accepts all of them, except for <code>host</code>, which as been set to the remote host <code>rpi-bug</code>, the name of my Raspberry Pi.</p>"},{"location":"custom/multiple-bindings/#explicit-binding-in-tags","title":"Explicit binding in tags","text":"<p>How do we use this new binding? First, let's do a text comparison, using tags. Here's what our template looks like:</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n    &lt;td class=\"stats_label\"&gt;Inside Temperature, Vantage&lt;/td&gt;\n    &lt;td class=\"stats_data\"&gt;$current.inTemp&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\"stats_label\"&gt;Inside Temperature, WMR100&lt;/td&gt;\n&lt;td class=\"stats_data\"&gt;$latest($data_binding='wmr100_binding').inTemp&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>The explicit binding to <code>wmr100_binding</code> is highlighted. This tells the reporting engine to override the default binding specifed in <code>[StdReport]</code>, generally <code>wx_binding</code>, and use <code>wmr100_binding</code> instead.</p>    Inside Temperature, Vantage   68.7\u00b0F   Inside Temperature, WMR100    68.9\u00b0F"},{"location":"custom/multiple-bindings/#explicit-binding-in-images","title":"Explicit binding in images","text":"<p>How would we produce a graph of the two different temperatures? Here's what the relevant section of the <code>skin.conf</code> file would look like.</p> <pre><code>[[[daycompare]]]\n[[[[inTemp]]]]\nlabel = Vantage inTemp\n[[[[WMR100Temp]]]]\ndata_type = inTemp\ndata_binding = wmr100_binding\nlabel = WMR100 inTemp\n</code></pre> <p>This will produce an image with name <code>daycompare.png</code>, with two plot lines. The first will be of the temperature from the Vantage. It uses the default binding, <code>wx_binding</code>, and will be labeled <code>Vantage inTemp</code>. The second line explicitly uses the <code>wmr100_binding</code>. Because it uses the same variable name (<code>inTemp</code>) as the first line, we had to explicitly specify it using option <code>data_type</code>, in order to avoid using the same subsection name twice (see the section Including a type more than once in a plot for details). It will be labeled <code>WMR100 inTemp</code>. The results look like this:</p> <p></p>"},{"location":"custom/multiple-bindings/#stupid-detail","title":"Stupid detail","text":"<p>At first, I could not get this example to work. The problem turned out to be that the RPi was processing things just a beat behind the Dell, so the temperature for the \"current\" time wasn't ready when the Dell needed it. I kept getting <code>N/A</code>. To avoid this, I introduced the tag <code>$latest</code>, which uses the last available timestamp in the binding, which may or may not be the same as what <code>$current</code> uses. That's why the example above uses <code>$latest</code> instead of <code>$current</code>.</p>"},{"location":"custom/report-scheduling/","title":"Scheduling report generation","text":"<p>Normal WeeWX operation is to run each report defined in <code>weewx.conf</code> every archive period. While this may suit most situations, there may be occasions when it is desirable to run a report less frequently than every archive period. For example, the archive interval might be 5 minutes, but you only want to FTP files every 30 minutes, once per day, or at a set time each day.</p> <p>There are two options to <code>[StdReport]</code> that provide the ability to control when files are generated. The <code>stale_age</code> option allows control over the age of a file before it is regenerated, and the <code>report_timing</code> option allows precise control over when individual reports are run.</p> <p>WeeWX also includes a utility wee_reports for those times when you need to run a report independent of the interval timing. For example, you might not want to wait for an archive interval to see if your customizations worked.</p> <p>Note</p> <p>Although <code>report_timing</code> specifies when a given report should be generated, the generation of reports is still controlled by the WeeWX report cycle, so reports can never be generated more frequently than once every archive period.</p> <p>If your reports contain data that change more frequently that each archive interval, then you could run <code>wee_reports</code> separately, or consider uploading data to a real-time reporting solution such as MQTT.</p>"},{"location":"custom/report-scheduling/#the-stale_age-option","title":"The stale_age option","text":"<p>The <code>stale_age</code> option applies to each file in a report. When <code>stale_age</code> is specified, the file will be (re)generaed only when it is older than the indicated age. The age is specified in seconds.</p> <p>Details for the <code>stale_age</code> option are in the <code>[CheetahGenerator]</code> reference.</p>"},{"location":"custom/report-scheduling/#the-report_timing-option","title":"The report_timing option","text":"<p>The <code>report_timing</code> option applies to each report. It uses a CRON-like format to control when a report is to be run. While a CRON-like format is used, the control of WeeWX report generation using the report_timing option is confined completely to WeeWX and has no interraction with the system CRON service.</p> <p>The <code>report_timing</code> option consists of five parameters separated by white-space:</p> <pre><code>report_timing = minutes hours day_of_month months day_of_week\n</code></pre> <p>The parameters are summarised in the following table:</p> ParameterFunctionAllowable values minutes Specifies the minutes of the hour when the report will be run *, or numbers in the range 0..59 inclusive hours Specifies the hours of the day when the report will be run *, or numbers in the range 0..23 inclusive day_of_month Specifies the days of the month when the report will be run *, or numbers in the range 1..31 inclusive months Specifies the months of the year when the report will be run  *, or numbers in the range 1..12 inclusive, or   abbreviated names in the range jan..dec inclusive  day_of_week Specifies the days of the week when the report will be run  *, or numbers in the range 0..7 inclusive (0,7 = Sunday, 1 = Monday etc.), or   abbreviated names in the range sun..sat inclusive  <p>The <code>report_timing</code> option may only be used in <code>weewx.conf</code>. When set in the <code>[StdReport]</code> section, the option will apply to all reports listed under <code>[StdReport]</code>. When specified within a report section, the option will override any setting in <code>[StdReport]</code>, for that report. In this manner it is possible to have different reports run at different times. The following excerpt illustrates this:</p> <pre><code>[StdReport]\n\n    report_timing = 0 * * * *\n\n    [[AReport]]\n        skin = SomeSkin\n\n    [[AnotherReport]]\n        skin = SomeOtherSkin\n        report_timing = */10 * * * *\n</code></pre> <p>In this case, the report <code>AReport</code> would be run under control of the <code>0 * * * *</code> setting (on the hour) and the report <code>AnotherReport</code> would be run under control of the <code>*/10 * * * *</code> setting (every 10 minutes).</p>"},{"location":"custom/report-scheduling/#how-report_timing-controls-reporting","title":"How report_timing controls reporting","text":"<p>The syntax and interpretation of the report_timing parameters are largely the same as those of the CRON service in many Unix and Unix-like operating systems. The syntax and interpretation are outlined below.</p> <p>When the report_timing option is in use WeeWX will run a report when the minute, hour and month of year parameters match the report time, and at least one of the two-day parameters (day of month or day of week) match the report time. This means that non-existent times, such as \"missing hours\" during daylight savings changeover, will never match, causing reports scheduled during the \"missing times\" not to be run. Similarly, times that occur more than once (again, during daylight savings changeover) will cause matching reports to be run more than once.</p> <p>Note</p> <p>Report time does not refer to the time at which the report is run, but rather the date and time of the latest data the report is based upon. If you like, it is the effective date and time of the report. For normal WeeWX operation, the report time aligns with the dateTime of the most recent archive record. When reports are run using the wee_reports utility, the report time is either the dateTime of the most recent archive record (the default) or the optional timestamp command line argument.</p> <p>Note</p> <p>The day a report is to be run can be specified by two parameters; day of month and/or day of week. If both parameters are restricted (i.e., not an asterisk), the report will be run when either field matches the current time. For example, <pre><code>report_timing = 30 4 1,15 * 5\n</code></pre> would cause the report to be run at 4:30am on the 1st and 15th of each month as well as 4:30am every Friday.</p>"},{"location":"custom/report-scheduling/#the-relationship-between-report_timing-and-archive-period","title":"The relationship between report_timing and archive period","text":"<p>A traditional CRON service has a resolution of one minute, meaning that the CRON service checks each minute whether to execute any commands. On the other hand, the WeeWX report system checks which reports are to be run once per archive period, where the archive period may be one minute, five minutes, or some other user defined period. Consequently, the report_timing option may specify a report to be run at some time that does not align with the WeeWX archive period. In such cases the report_timing option does not cause a report to be run outside the normal WeeWX report cycle, rather it will cause the report to be run during the next report cycle. At the start of each report cycle, and provided a report_timing option is set, WeeWX will check each minute boundary from the current report time back until the report time of the previous report cycle. If a match is found on any of these one minute boundaries the report will be run during the report cycle. This may be best described through some examples:</p> report_timing Archive period When the report will be run 0 * * * * 5 minutes The report will be run only during the report cycle commencing on the hour. 5 * * * * 5 minutes The report will be run only during the report cycle commencing at 5 minutes past the hour. 3 * * * * 5 minutes The report will be run only during the report cycle commencing at 5 minutes past the hour. 10 * * * * 15 minutes The report will be run only during the report cycle commencing at 15 minutes past the hour 10,40 * * * * 15 minutes The report will be run only during the report cycles commencing at 15 minutes past the hour and 45 minutes past the hour. 5,10 * * * * 15 minutes The report will be run once only during the report cycle commencing at 15 minutes past the hour."},{"location":"custom/report-scheduling/#lists-ranges-and-steps","title":"Lists, ranges and steps","text":"<p>The report_timing option supports lists, ranges, and steps for all parameters. Lists, ranges, and steps may be used as follows:</p> <ul> <li> <p>Lists. A list is a set of numbers (or ranges) separated by commas, for   example <code>1, 2, 5, 9</code> or <code>0-4, 8-12</code>. A match with any of the elements of the   list will result in a match for that particular parameter. If the examples   were applied to the minutes parameter, and subject to other parameters in   the report_timing option, the report would be run at minutes 1, 2, 5, and   9 and 0, 1, 2, 3, 4, 8, 9, 10, 11, and 12 respectively. Abbreviated month   and day names cannot be used in a list.</p> </li> <li> <p>Ranges. Ranges are two numbers separated with a hyphen, for example <code>8-11</code>.   The specified range is inclusive. A match with any of the values included   in the range will result in a match for that particular parameter. If the   example was applied to the hours parameter, and subject to other parameters   in the report_timing option, the report would be run at hours 8, 9, 10, and</p> </li> <li> <p>A range may be included as an element of a list. Abbreviated month and   day names cannot be used in a range.</p> </li> <li> <p>Steps. A step can be used in conjunction with a range or asterisk and are   denoted by a '/' followed by a number. Following a range with a step   specifies skips of the step number's value through the range. For example,   <code>0-12/2</code> used in the hours parameter would, subject to other parameter in the   report_timing option, run the report at hours 0, 2, 4, 6, 8, and 12. Steps   are also permitted after an asterisk in which case the skips of the step   number's value occur through the all possible values of the parameter. For   example, <code>*/3</code> can be used in the hours parameter to, subject to other   parameter in the report_timing option, run the report at hours 0, 3, 6,   9, 12, 15, 18, and 21.</p> </li> </ul>"},{"location":"custom/report-scheduling/#nicknames","title":"Nicknames","text":"<p>The report_timing option supports a number of time specification 'nicknames'. These nicknames are prefixed by the '@' character and replace the five parameters in the report_timing option. The nicknames supported are:</p> Nickname Equivalent setting When the report will be run @yearly@annually 0 0 1 1 * Once per year at midnight on 1 January. @monthly 0 0 1 * * Monthly at midnight on the 1st of the month. @weekly 0 0 * * 0 Every week at midnight on Sunday. @daily 0 0 * * * Every day at midnight. @hourly 0 * * * * Every hour on the hour."},{"location":"custom/report-scheduling/#examples-of-report_timing","title":"Examples of report_timing","text":"<p>Numeric settings for report_timing can be at times difficult to understand due to the complex combinations of parameters. The following table shows a number of example report_timing options and the corresponding times when the report would be run.</p> report_timing When the report will be run * * * * * Every archive period. This setting is effectively the default WeeWX method of operation. 25 * * * * 25 minutes past every hour. 0 * * * * Every hour on the hour. 5 0 * * * 00:05 daily. 25 16 * * * 16:25 daily. 25 16 1 * * 16:25 on the 1st of each month. 25 16 1 2 * 16:25 on the 1st of February. 25 16 * * 0 1:25 each Sunday. */10 * * * * On the hour and 10, 20, 30, 40 and 50 mnutes past the hour. */9 * * * * On the hour and 9, 18, 27, 36, 45 and 54 minutes past the hour. */10 */2 * * * 0, 10, 20, 30, 40 and 50 minutes after the even hour. * 6-17 * * * Every archive period from 06:00 (inclusive) up until, but excluding, 18:00. * 1,4,14 * * * Every archive period in the hour starting 01:00 to 01:59, 04:00 to 04:59 amd 14:00 to 14:59 (Note excludes report times at 02:00, 05:00 and 15:00). 0 * 1 * 0,3 On the hour on the first of the month and on the hour every Sunday and Wednesday. *\u00a0*\u00a021,1-10/3\u00a06\u00a0* Every archive period on the 1st, 4th, 7th, 10th and 21st of June. @monthly Midnight on the 1st of the month."},{"location":"custom/report-scheduling/#the-wee_reports-utility-and-the-report_timing-option","title":"The wee_reports utility and the report_timing option","text":"<p>The report_timing option is ignored when using the <code>wee_reports</code> utility.</p>"},{"location":"custom/service-engine/","title":"Customizing the service engine","text":"<p>This is an advanced topic intended for those who wish to try their hand at extending the internal engine in WeeWX. Before attempting these examples, you should be reasonably proficient with Python.</p> <p>Warning</p> <p>Please note that the API to the service engine may change in future versions!</p> <p>At a high level, WeeWX consists of an engine that is responsible for managing a set of services. A service consists of a Python class which binds its member functions to various events. The engine arranges to have the bound member function called when a specific event happens, such as a new LOOP packet arriving.</p> <p>The services are specified in lists in the <code>[Engine][[Services]]</code> stanza of the configuration file. The <code>[[Services]]</code> section lists all the services to be run, broken up into different service lists.</p> <p>These lists are designed to orchestrate the data as it flows through the WeeWX engine. For example, you want to make sure that data has been processed by the quality control service, <code>StdQC</code>, before putting them in the database. Similarly, the reporting system must come after the data has been put in the database. These groups ensure that things happen in the proper sequence.</p> <p>See the table The standard WeeWX services for a list of the services that are normally run.</p>"},{"location":"custom/service-engine/#modify-service","title":"Modifying an existing service","text":"<p>The service <code>weewx.engine.StdPrint</code> prints out new LOOP and archive packets to the console when they arrive. By default, it prints out the entire record, which generally includes a lot of possibly distracting information and can be rather messy. Suppose you do not like this, and want it to print out only the time, barometer reading, and the outside temperature whenever a new LOOP packet arrives. </p> <p>This could be done by subclassing the default print service <code>StdPrint</code> and overriding member function <code>new_loop_packet()</code>.</p> <p>Create the file <code>user/myprint.py</code>:</p> <pre><code>from weewx.engine import StdPrint\nfrom weeutil.weeutil import timestamp_to_string\n\nclass MyPrint(StdPrint):\n\n    # Override the default new_loop_packet member function:\n    def new_loop_packet(self, event):\n        packet = event.packet\n        print(\"LOOP: \", timestamp_to_string(packet['dateTime']),\n            \"BAR=\",  packet.get('barometer', 'N/A'),\n            \"TEMP=\", packet.get('outTemp', 'N/A'))\n</code></pre> <p>This service substitutes a new implementation for the member function <code>new_loop_packet</code>. This implementation prints out the time, then the barometer reading (or <code>N/A</code> if it is not available) and the outside temperature (or <code>N/A</code>).</p> <p>You then need to specify that your print service class should be loaded instead of the default <code>StdPrint</code> service. This is done by substituting your service name for <code>StdPrint</code> in <code>service_list</code>, located in <code>[Engine]/[[Services]]</code>:</p> <pre><code>[Engine]\n[[Services]]\n...\nreport_services = user.myprint.MyPrint, weewx.engine.StdReport\n</code></pre> <p>Note that the <code>report_services</code> must be all on one line. Unfortunately, the parser <code>ConfigObj</code> does not allow options to be continued on to following lines.</p>"},{"location":"custom/service-engine/#create-service","title":"Creating a new service","text":"<p>Suppose there is no service that can be easily customized for your needs. In this case, a new one can easily be created by subclassing off the abstract base class <code>StdService</code>, and then adding the functionality you need. Here is an example that implements an alarm, which sends off an email when an arbitrary expression evaluates <code>True</code>.</p> <p>This example is included in the standard distribution as <code>examples/alarm.py:</code></p> <pre><code>import logging\nimport smtplib\nimport socket\nimport threading\nimport time\nfrom email.mime.text import MIMEText\n\nimport weewx\nfrom weeutil.weeutil import timestamp_to_string, option_as_list\nfrom weewx.engine import StdService\n\nlog = logging.getLogger(__name__)\n\n\n# Inherit from the base class StdService:\nclass MyAlarm(StdService):\n\"\"\"Service that sends email if an arbitrary expression evaluates true\"\"\"\n\n    def __init__(self, engine, config_dict):\n        # Pass the initialization information on to my superclass:\n        super().__init__(engine, config_dict)\n\n        # This will hold the time when the last alarm message went out:\n        self.last_msg_ts = 0\n\n        try:\n            # Dig the needed options out of the configuration dictionary.\n            # If a critical option is missing, an exception will be raised and\n            # the alarm will not be set.\n            self.expression    = config_dict['Alarm']['expression']\n            self.time_wait     = int(config_dict['Alarm'].get('time_wait', 3600))\n            self.timeout       = int(config_dict['Alarm'].get('timeout', 10))\n            self.smtp_host     = config_dict['Alarm']['smtp_host']\n            self.smtp_user     = config_dict['Alarm'].get('smtp_user')\n            self.smtp_password = config_dict['Alarm'].get('smtp_password')\n            self.SUBJECT       = config_dict['Alarm'].get('subject', \n                                                          \"Alarm message from weewx\")\n            self.FROM          = config_dict['Alarm'].get('from',\n                                                          'alarm@example.com')\n            self.TO            = option_as_list(config_dict['Alarm']['mailto'])\n        except KeyError as e:\n            log.info(\"No alarm set.  Missing parameter: %s\", e)\n        else:\n            # If we got this far, it's ok to start intercepting events:\nself.bind(weewx.NEW_ARCHIVE_RECORD, self.new_archive_record)    # 1\nlog.info(\"Alarm set for expression: '%s'\", self.expression)\n\n    def new_archive_record(self, event):\n\"\"\"Gets called on a new archive record event.\"\"\"\n\n        # To avoid a flood of nearly identical emails, this will do\n        # the check only if we have never sent an email, or if we haven't\n        # sent one in the last self.time_wait seconds:\n        if (not self.last_msg_ts \n                or abs(time.time() - self.last_msg_ts) &gt;= self.time_wait):\n            # Get the new archive record:\n            record = event.record\n\n            # Be prepared to catch an exception in the case that the expression \n            # contains a variable that is not in the record:\ntry:                                                            # 2\n# Evaluate the expression in the context of the event archive \n                # record. Sound the alarm if it evaluates true:\nif eval(self.expression, None, record):                     # 3\n# Sound the alarm! Launch in a separate thread,\n                    # so it doesn't block the main LOOP thread:\n                    t = threading.Thread(target=MyAlarm.sound_the_alarm, \n                                         args=(self, record))\n                    t.start()\n                    # Record when the message went out:\n                    self.last_msg_ts = time.time()\n            except NameError as e:\n                # The record was missing a named variable. Log it.\n                log.info(\"%s\", e)\n\n    def sound_the_alarm(self, record):\n\"\"\"Sound the alarm in a 'try' block\"\"\"\n\n        # Wrap the attempt in a 'try' block so we can log a failure.\n        try:\n            self.do_alarm(record)\n        except socket.gaierror:\n            # A gaierror exception is usually caused by an unknown host\n            log.critical(\"Unknown host %s\", self.smtp_host)\n            # Reraise the exception. This will cause the thread to exit.\n            raise\n        except Exception as e:\n            log.critical(\"Unable to sound alarm. Reason: %s\", e)\n            # Reraise the exception. This will cause the thread to exit.\n            raise\n\n    def do_alarm(self, record):\n\"\"\"Send an email out\"\"\"\n\n        # Get the time and convert to a string:\n        t_str = timestamp_to_string(record['dateTime'])\n\n        # Log the alarm\n        log.info('Alarm expression \"%s\" evaluated True at %s' \n                 % (self.expression, t_str))\n\n        # Form the message text:\n        msg_text = 'Alarm expression \"%s\" evaluated True at %s\\nRecord:\\n%s' \\\n                   % (self.expression, t_str, str(record))\n        # Convert to MIME:\n        msg = MIMEText(msg_text)\n\n        # Fill in MIME headers:\n        msg['Subject'] = self.SUBJECT\n        msg['From']    = self.FROM\n        msg['To']      = ','.join(self.TO)\n\n        try:\n            # First try end-to-end encryption\n            s = smtplib.SMTP_SSL(self.smtp_host, timeout=self.timeout)\n            log.debug(\"Using SMTP_SSL\")\n        except (AttributeError, socket.timeout, socket.error) as e:\n            log.debug(\"Unable to use SMTP_SSL connection. Reason: %s\", e)\n            # If that doesn't work, try creating an insecure host, \n            # then upgrading\n            s = smtplib.SMTP(self.smtp_host, timeout=self.timeout)\n            try:\n                # Be prepared to catch an exception if the server\n                # does not support encrypted transport.\n                s.ehlo()\n                s.starttls()\n                s.ehlo()\n                log.debug(\"Using SMTP encrypted transport\")\n            except smtplib.SMTPException as e:\n                log.debug(\"Using SMTP unencrypted transport. Reason: %s\", e)\n\n        try:\n            # If a username has been given, assume that login is required \n            # for this host:\n            if self.smtp_user:\n                s.login(self.smtp_user, self.smtp_password)\n                log.debug(\"Logged in with user name %s\", self.smtp_user)\n\n            # Send the email:\n            s.sendmail(msg['From'], self.TO,  msg.as_string())\n            # Log out of the server:\n            s.quit()\n        except Exception as e:\n            log.error(\"SMTP mailer refused message with error %s\", e)\n            raise\n\n        # Log sending the email:\n        log.info(\"Email sent to: %s\", self.TO)\n\n\nif __name__ == '__main__':\n\"\"\"This section is used to test alarm.py. It uses a record and alarm\n     expression that are guaranteed to trigger an alert.\n\n     You will need a valid weewx.conf configuration file with an [Alarm]\n     section that has been set up as illustrated at the top of this file.\"\"\"\n\n    from optparse import OptionParser\n    import weecfg\n    import weeutil.logger\n\n    usage = \"\"\"Usage: python alarm.py --help    \n       python alarm.py [CONFIG_FILE|--config=CONFIG_FILE]\n\nArguments:\n\n      CONFIG_PATH: Path to weewx.conf \"\"\"\n\n    epilog = \"\"\"You must be sure the WeeWX modules are in your PYTHONPATH. \n    For example:\n\n    PYTHONPATH=/home/weewx/bin python alarm.py --help\"\"\"\n\n    # Force debug:\n    weewx.debug = 1\n\n    # Create a command line parser:\n    parser = OptionParser(usage=usage, epilog=epilog)\n    parser.add_option(\"--config\", dest=\"config_path\", metavar=\"CONFIG_FILE\",\n                      help=\"Use configuration file CONFIG_FILE.\")\n    # Parse the arguments and options\n    (options, args) = parser.parse_args()\n\n    try:\n        config_path, config_dict = weecfg.read_config(options.config_path, args)\n    except IOError as e:\n        exit(\"Unable to open configuration file: %s\" % e)\n\n    print(\"Using configuration file %s\" % config_path)\n\n    # Set logging configuration:\n    weeutil.logger.setup('alarm', config_dict)\n\n    if 'Alarm' not in config_dict:\n        exit(\"No [Alarm] section in the configuration file %s\" % config_path)\n\n    # This is a fake record that we'll use\n    rec = {'extraTemp1': 1.0,\n           'outTemp': 38.2,\n           'dateTime': int(time.time())}\n\n    # Use an expression that will evaluate to True by our fake record.\n    config_dict['Alarm']['expression'] = \"outTemp&lt;40.0\"\n\n    # We need the main WeeWX engine in order to bind to the event, \n    # but we don't need for it to completely start up. So get rid of all\n    # services:\n    config_dict['Engine']['Services'] = {}\n    # Now we can instantiate our slim engine, using the DummyEngine class...\n    engine = weewx.engine.DummyEngine(config_dict)\n    # ... and set the alarm using it.\n    alarm = MyAlarm(engine, config_dict)\n\n    # Create a NEW_ARCHIVE_RECORD event\n    event = weewx.Event(weewx.NEW_ARCHIVE_RECORD, record=rec)\n\n    # Use it to trigger the alarm:\n    alarm.new_archive_record(event)\n</code></pre> <p>This service expects all the information it needs to be in the configuration file <code>weewx.conf</code> in a new section called <code>[Alarm]</code>. So, add the following lines to your configuration file:</p> <pre><code>[Alarm]\nexpression = \"outTemp &lt; 40.0\"\ntime_wait = 3600\nsmtp_host = smtp.example.com\nsmtp_user = myusername\nsmtp_password = mypassword\nmailto = auser@example.com, anotheruser@example.com\nfrom   = me@example.com\nsubject = \"Alarm message from WeeWX!\"\n</code></pre> <p>There are three important highlighted points to be noted in this example.</p> <ol> <li> <p>(Line 45) Here is where the binding happens between an event,     <code>weewx.NEW_ARCHIVE_RECORD</code>, and a member function, <code>self.new_archive_record</code>.     When the event <code>NEW_ARCHIVE_RECORD</code> occurs, the function     <code>self.new_archive_record</code> will be called. There are many other events that can     be intercepted. Look in the file <code>weewx/_init_.py</code>.</p> </li> <li> <p>(Line 61) Some hardware do not emit all possible observation types in every     record, so it's possible that a record may be missing some types that are     used in the expression. This try block will catch the <code>NameError</code> exception     that would be raised should this occur.</p> </li> <li> <p>(Line 64) This is where the test is done for whether to sound the alarm. The     <code>[Alarm]</code> configuration options specify that the alarm be sounded when     <code>outTemp &lt; 40.0</code> evaluates <code>True</code>, that is when the outside temperature is     below 40.0 degrees. Any valid Python expression can be used, although the     only variables available are those in the current archive record.</p> </li> </ol> <p>Another example expression could be:</p> <pre><code>expression = \"outTemp &lt; 32.0 and windSpeed &gt; 10.0\"\n</code></pre> <p>In this case, the alarm is sounded if the outside temperature drops below freezing and the wind speed is greater than 10.0.</p> <p>Note that units must be the same as whatever is being used in your database, that is, the same as what you specified in option <code>target_unit</code>.</p> <p>Option <code>time_wait</code> is used to avoid a flood of nearly identical emails. The new service will wait this long before sending another email out.</p> <p>Email will be sent through the SMTP host specified by option <code>smtp_host</code>. The recipient(s) are specified by the comma separated option <code>mailto</code>.</p> <p>Many SMTP hosts require user login. If this is the case, the user and password are specified with options <code>smtp_user</code> and <code>smtp_password</code>, respectively.</p> <p>The last two options, <code>from</code> and <code>subject</code> are optional. If not supplied, WeeWX will supply something sensible. Note, however, that some mailers require a valid \"from\" email address and the one that WeeWX supplies may not satisfy its requirements.</p> <p>To make this all work, you must first copy the <code>alarm.py</code> file to the <code>user</code> directory. Then tell the engine to load this new service by adding the service name to the list <code>report_services</code>, located in <code>[Engine]/[[Services]]</code>:</p> <pre><code>[Engine]\n[[Services]]\nreport_services = weewx.engine.StdPrint, weewx.engine.StdReport, user.alarm.MyAlarm\n</code></pre> <p>Again, note that the option <code>report_services</code> must be all on one line \u2014 the <code>ConfigObj</code> parser does not allow options to be continued on to following lines.</p> <p>In addition to this example, the distribution also includes a low-battery alarm (<code>lowBattery.py</code>), which is similar, except that it intercepts LOOP events instead of archiving events.</p>"},{"location":"custom/service-engine/#add-data-source","title":"Adding a second data source","text":"<p>A very common problem is wanting to augment the data from your weather station with data from some other device. Generally, you have two approaches for how to handle this:</p> <ul> <li> <p>Run two instances of WeeWX, each using its own database and     <code>weewx.conf</code> configuration file. The results are then     combined in a final report, using WeeWX's ability to use more than     one database. See the Wiki entry     How to run multiple instances of     WeeWX for details     on how to do this.</p> </li> <li> <p>Run one instance, but use a custom WeeWX service to augment the     records coming from your weather station with data from the other     device.</p> </li> </ul> <p>This section covers the latter approach.</p> <p>Suppose you have installed an electric meter at your house, and you wish to correlate electrical usage with the weather. The meter has some sort of connection to your computer, allowing you to download the total power consumed. At the end of every archive interval you want to calculate the amount of power consumed during the interval, then add the results to the record coming off your weather station. How would you do this?</p> <p>Here is the outline of a service that retrieves the electrical consumption data and adds it to the archive record. It assumes that you already have a function <code>download_total_power()</code> that, somehow, downloads the amount of power consumed since time zero.</p> <p>File <code>user/electricity.py</code></p> <pre><code>import weewx\nfrom weewx.engine import StdService\n\nclass AddElectricity(StdService):\n\n    def __init__(self, engine, config_dict):\n\n      # Initialize my superclass first:\n      super(AddElectricity, self).__init__(engine, config_dict)\n\n      # Bind to any new archive record events:\n      self.bind(weewx.NEW_ARCHIVE_RECORD, self.new_archive_record)\n\n      self.last_total = None\n\n    def new_archive_record(self, event):\n\n        total_power = download_total_power()\n\n        if self.last_total:\n            net_consumed = total_power - self.last_total\n            event.record['electricity'] = net_consumed\n\n        self.last_total = total_power\n</code></pre> <p>This adds a new key <code>electricity</code> to the record dictionary and sets it equal to the difference between the amount of power currently consumed and the amount consumed at the last archive record. Hence, it will be the amount of power consumed over the archive interval. The unit should be Watt-hours.</p> <p>As an aside, it is important that the function <code>download_total_power()</code> does not delay very long because it will sit right in the main loop of the WeeWX engine. If it's going to cause a delay of more than a couple seconds you might want to put it in a separate thread and feed the results to <code>AddElectricity</code> through a queue.</p> <p>To make sure your service gets run, you need to add it to one of the service lists in <code>weewx.conf</code>, section <code>[Engine]</code>, subsection <code>[[Services]]</code>.</p> <p>In our case, the obvious place for our new service is in <code>data_services</code>. When you're done, your section <code>[Engine]</code> will look something like this:</p> <pre><code> #   This section configures the internal WeeWX engine.\n\n[Engine]\n\n[[Services]]\n# This section specifies the services that should be run. They are\n# grouped by type, and the order of services within each group\n# determines the order in which the services will be run.\nxtype_services = weewx.wxxtypes.StdWXXTypes, weewx.wxxtypes.StdPressureCooker, weewx.wxxtypes.StdRainRater, weewx.wxxtypes.StdDelta\nprep_services = weewx.engine.StdTimeSynch\ndata_services = user.electricity.AddElectricity\nprocess_services = weewx.engine.StdConvert, weewx.engine.StdCalibrate, weewx.engine.StdQC, weewx.wxservices.StdWXCalculate\narchive_services = weewx.engine.StdArchive\nrestful_services = weewx.restx.StdStationRegistry, weewx.restx.StdWunderground, weewx.restx.StdPWSweather, weewx.restx.StdCWOP, weewx.restx.StdWOW, weewx.restx.StdAWEKAS\nreport_services = weewx.engine.StdPrint, weewx.engine.StdReport\n</code></pre>"},{"location":"custom/sle/","title":"Writing search list extensions","text":"<p>The intention of this document is to help you write new Search List Extensions (SLE). Here's the plan:</p> <ul> <li> <p>We start by explaining how SLEs work.</p> </li> <li> <p>Then we will look at an example that implements an extension <code>$seven_day()</code>.</p> </li> <li> <p>Then we will look at another example, <code>$colorize()</code>, which allows you to pick background colors on the basis of a value (for example, low temperatures could show blue, while high temperatures show red). It will be implemented using 3 different, increasingly sophisticated, ways:</p> <ul> <li> <p>A simple, hardwired version that works in only one unit system.</p> </li> <li> <p>A version that can handle any unit system, but with the colors     still hardwared.</p> </li> <li> <p>Finally, a version that can handle any unit system, and takes     its color bands from the configuration file.</p> </li> </ul> </li> </ul>"},{"location":"custom/sle/#how-the-search-list-works","title":"How the search list works","text":"<p>Let's start by taking a look at how the Cheetah search list works.</p> <p>The Cheetah template engine finds tags by scanning a search list, a Python list of objects. For example, for a tag <code>$foo</code>, the engine will scan down the list, trying each object in the list in turn. For each object, it will first try using <code>foo</code> as an attribute, that is, it will try evaluating <code>obj.foo</code>. If that raises an <code>AttributeError</code> exception, then it will try <code>foo</code> as a key, that is <code>obj[key]</code>. If that raises a <code>KeyError</code> exception, then it moves on to the next item in the list. The first match that does not raise an exception is used. If no match is found, Cheetah raises a <code>NameMapper.NotFound</code> exception.</p>"},{"location":"custom/sle/#simple-tag","title":"A simple tag","text":"<p>Now let's take a look at how the search list interacts with WeeWX tags. Let's start by looking at a simple example: station altitude, available as the tag</p> <pre><code>$station.altitude\n</code></pre> <p>As we saw in the previous section, Cheetah will run down the search list, looking for an object with a key or attribute <code>station</code>. In the default search list, WeeWX includes one such object, an instance of the class <code>weewx.cheetahgenerator.Station</code>, which has an attribute <code>station</code>, so it gets a hit on this object.</p> <p>Cheetah will then try to evaluate the attribute <code>altitude</code> on this object. Class <code>Station</code> has such an attribute, so Cheetah evaluates it.</p>"},{"location":"custom/sle/#return-value","title":"Return value","text":"<p>What this attribute returns is not a raw value, say <code>700</code>, nor even a string. Instead, it returns an instance of the class <code>ValueHelper</code>, a special class defined in module <code>weewx.units</code>. Internally, it holds not only the raw value, but also references to the formats, labels, and conversion targets you specified in your configuration file. Its job is to make sure that the final output reflects these preferences. Cheetah doesn't know anything about this class. What it needs, when it has finished evaluating the expression <code>$station.altitude</code>, is a string. In order to convert the <code>ValueHelper</code> it has in hand into a string, it does what every other Python object does when faced with this problem: it calls the special method <code>__str__</code>. Class <code>ValueHelper</code> has a definition for this method. Evaluating this function triggers the final steps in this process. Any necessary unit conversions are done, then formatting occurs and, finally, a label is attached. The result is a string something like</p>  700 feet  <p>which is what Cheetah actually puts in the generated HTML file. This is a good example of lazy evaluation. The tags gather all the information they need, but don't do the final evaluation until the last final moment, when the most context is understood. WeeWX uses this technique extensively.</p>"},{"location":"custom/sle/#complex-tag","title":"A slightly more complex tag","text":"<p>Now let's look at a more complicated example, say the maximum temperature since midnight:</p> <pre><code>$day.outTemp.max\n</code></pre> <p>When this is evaluated by Cheetah, it actually produces a chain of objects. At the top of this chain is class <code>weewx.tags.TimeBinder</code>, an instance of which is included in the default search list. Internally, this instance stores the time of the desired report (usually the time of the last archive record), a cache to the databases, a default data binding, as well as references to the formatting and labelling options you have chosen.</p> <p>This instance is examined by Cheetah to see if it has an attribute <code>day</code>. It does and, when it is evaluated, it returns the next class in the chain, an instance of <code>weewx.tags.TimespanBinder</code>. In addition to all the other things contained in its parent <code>TimeBinder</code>, class <code>TimespanBinder</code> adds the desired time period, that is, the time span from midnight to the current time.</p> <p>Cheetah then continues on down the chain and tries to find the next attribute, <code>outTemp</code>. There is no such hard coded attribute (hard coding all the conceivable different observation types would be impossible!). Instead, class <code>TimespanBinder</code> defines the Python special method <code>__getattr__</code>. If Python cannot find a hard coded version of an attribute, and the method <code>__getattr__</code> exists, it will try it. The definition provided by <code>TimespanBinder</code> returns an instance of the next class in the chain, <code>weewx.tags.ObservationBinder</code>, which not only remembers all the previous stuff, but also adds the observation type, <code>outTemp</code>.</p> <p>Cheetah then tries to evaluate an attribute <code>max</code> of this class, and the pattern repeats. Class <code>weewx.tags.ObservationBinder</code> does not have an attribute <code>max</code>, but it does have a method <code>__getattr__</code>. This method returns an instance of the next class in the chain, class <code>AggTypeBinder</code>, which not only remembers all the previous information, but adds the aggregation type, <code>max</code>.</p> <p>One final step needs to occur: Cheetah has an instance of <code>AggTypeBinder</code> in hand, but what it really needs is a string to put in the file being created from the template. It creates the string by calling the method <code>__str__()</code> of <code>AggTypeBinder</code>. Now, finally, the chain ends and everything comes together. The method <code>__str__</code> triggers the actual calculation of the value, using all the known parameters: the database binding to be hit, the time span of interest, the observation type, and the type of aggregation, querying the database as necessary. The database is not actually hit until the last possible moment, after everything needed to do the evalation is known.</p> <p>Like our previous example, the results of the evaluation are then packaged up in an instance of <code>ValueHelper</code>, which does the final conversion to the desired units, formats the string, then adds a label. The results, something like</p>  12\u00b0C  <p>are put in the generated HTML file. As you can see, a lot of machinery is hidden behind the deceptively simple expression <code>$day.outTemp.max</code>!</p>"},{"location":"custom/sle/#extending-the-list","title":"Extending the list","text":"<p>As mentioned, WeeWX comes with a number of objects already in the search list, but you can extend it.</p> <p>The general pattern is to create a new class that inherits from <code>weewx.cheetahgenerator.SearchList</code>, which supplies the functionality you need. You may or may not need to override its member function <code>get_extension_list()</code>. If you do not, then a default is supplied.</p>"},{"location":"custom/sle/#adding-tag-seven_day","title":"Adding tag <code>$seven_day</code>","text":"<p>Let's look at an example. The regular version of WeeWX offers statistical summaries by day, week, month, year, rain year, and all time. While WeeWX offers the tag <code>$week</code>, this is statistics since Sunday at midnight. Suppose we would like to have statistics for a full week, that is since midnight seven days ago.</p> <p>If you wish to use or modify this example, cut and paste the below to <code>user/seven_day.py</code>.</p> <pre><code>import datetime\nimport time\n\nfrom weewx.cheetahgenerator import SearchList\nfrom weewx.tags import TimespanBinder\nfrom weeutil.weeutil import TimeSpan\n\nclass SevenDay(SearchList):                                                  # 1\n\n    def __init__(self, generator):                                           # 2\n        SearchList.__init__(self, generator)\n\n    def get_extension_list(self, timespan, db_lookup):                       # 3\n\"\"\"Returns a search list extension with two additions.\n\n        Parameters:\n          timespan: An instance of weeutil.weeutil.TimeSpan. This will\n                    hold the start and stop times of the domain of\n                    valid times.\n\n          db_lookup: This is a function that, given a data binding\n                     as its only parameter, will return a database manager\n                     object.\n        \"\"\"\n\n        # Create a TimespanBinder object for the last seven days. First,\n        # calculate the time at midnight, seven days ago. The variable week_dt \n        # will be an instance of datetime.date.\n        week_dt = datetime.date.fromtimestamp(timespan.stop) \\\n                  - datetime.timedelta(weeks=1)                              # 4\n        # Convert it to unix epoch time:\n        week_ts = time.mktime(week_dt.timetuple())                           # 5\n        # Form a TimespanBinder object, using the time span we just\n        # calculated:\n        seven_day_stats = TimespanBinder(TimeSpan(week_ts, timespan.stop),\n                                         db_lookup,\n                                         context='week',\n                                         formatter=self.generator.formatter,\n                                         converter=self.generator.converter,\n                                         skin_dict=self.generator.skin_dict) # 6\n\n        # Now create a small dictionary with the key 'seven_day':\n        search_list_extension = {'seven_day' : seven_day_stats}              # 7\n\n        # Finally, return our extension as a list:\n        return [search_list_extension]                                       # 8\n</code></pre> <p>Going through the example, line by line:</p> <ol> <li>Create a new class called <code>SevenDay</code>, which will inherit from     class <code>SearchList</code>. All search list extensions must inherit     from this class.</li> <li>Create an initializer for our new class. In this case, the     initializer is not really necessary and does nothing except pass its     only parameter, <code>generator</code>, a reference to the calling     generator, on to its superclass, <code>SearchList</code>, which will     then store it in <code>self</code>. Nevertheless, we include the     initializer in case you wish to modify it.</li> <li>Override member function <code>get_extension_list()</code>. This     function will be called when the generator is ready to accept your     new search list extension. The parameters that will be passed in     are:<ul> <li><code>self</code> Python's way of indicating the instance we are     working with;</li> <li><code>timespan</code> An instance of the utility class     <code>TimeSpan</code>. This will contain the valid start and ending     times used by the template. Normally, this is all valid times,     but if your template appears under one of the     \"Summary By\"     sections in the <code>[CheetahGenerator]</code> section of <code>skin.conf</code>, then     it will contain the timespan of that time period.</li> <li><code>db_lookup</code> This is a function supplied by the generator.     It takes a single argument, a name of a binding. When called, it     will return an instance of the database manager class for that     binding. The default for the function is whatever binding you     set with the option <code>data_binding</code> for this report,     usually <code>wx_binding</code>.</li> </ul> </li> <li>The object <code>timespan</code> holds the domain of all valid times for     the template, but in order to calculate statistics for the last     seven days, we need not the earliest valid time, but the time at     midnight seven days ago. So, we do a little Python date arithmetic     to calculate this. The object <code>week_dt</code> will be an instance     of <code>datetime.date</code>.</li> <li>We convert it to unix epoch time and assign it to variable     <code>week_ts</code>.</li> <li>The class <code>TimespanBinder</code> represents a statistical calculation over a     time period. We have already met it in the introduction.     In our case, we will set it up to represent the statistics over the last     seven days. The class takes 6 parameters.<ul> <li>The first is the timespan over which the calculation is to be     done, which, in our case, is the last seven days. In step 5, we     calculated the start of the seven days. The end is \"now\", that     is, the end of the reporting period. This is given by the end     point of <code>timespan</code>, <code>timespan.stop</code>.</li> <li>The second, <code>db_lookup</code>, is the database lookup function     to be used. We simply pass in <code>db_lookup</code>.</li> <li>The third, <code>context</code>, is the time context to be used     when formatting times. The set of possible choices is given by     sub-section <code>[[TimeFormats]]</code>     in the configuration file. Our new tag, <code>$seven_day</code>     is pretty similar to <code>$week</code>, so we will just use     <code>'week'</code>, indicating that we want a time format that is     suitable for a week-long period.</li> <li>The fourth, <code>formatter</code>, should be an instance of class     <code>weewx.units.Formatter</code>, which contains information about     how the results should be formatted. We just pass in the     formatter set up by the generator,     <code>self.generator.formatter</code>.</li> <li>The fifth, <code>converter</code>, should be an instance of     <code>weewx.units.Converter</code>, which contains information about     the target units (e.g., <code>degree_C</code>) that are to be     used. Again, we just pass in the instance set up by the     generator, <code>self.generator.converter</code>.</li> <li>The sixth, <code>skin_dict</code>, is an instance of     <code>configobj.ConfigObj</code>, and contains the contents of the     skin configuration file. We pass it on in order to allow     aggregations that need information from the file, such as     heating and cooling degree-days.</li> </ul> </li> <li>Create a small dictionary with a single key, <code>seven_day</code>,     whose value will be the <code>TimespanBinder</code> that we just     constructed.</li> <li>Return the dictionary in a list</li> </ol>"},{"location":"custom/sle/#register-seven-day","title":"Registering","text":"<p>The final step that we need to do is to tell the template engine where to find our extension. You do that by going into the skin configuration file, <code>skin.conf</code>, and adding the option <code>search_list_extensions</code> with our new extension. When you're done, it will look something like this:</p> <pre><code>[CheetahGenerator]\n# This section is used by the generator CheetahGenerator, and specifies\n# which files are to be generated from which template.\n\n# Possible encodings include 'html_entities', 'strict_ascii', 'normalized_ascii',\n# as well as those listed in https://docs.python.org/3/library/codecs.html#standard-encodings\nencoding = html_entities\nsearch_list_extensions = user.seven_day.SevenDay\n[[SummaryByMonth]]\n...\n</code></pre> <p>Our addition has been highlighted. Note that it is in the section <code>[CheetahGenerator]</code>.</p> <p>Now, if the Cheetah engine encounters the tag <code>$seven_day</code>, it will scan the search list, looking for an attribute or key that matches <code>seven_day</code>. When it gets to the little dictionary we provided, it will find a matching key, allowing it to retrieve the appropriate <code>TimespanBinder</code> object.</p> <p>With this approach, you can now include \"seven day\" statistics in your HTML templates:</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Maximum temperature over the last seven days:&lt;/td&gt;\n        &lt;td&gt;$seven_day.outTemp.max&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Minimum temperature over the last seven days:&lt;/td&gt;\n        &lt;td&gt;$seven_day.outTemp.min&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Rain over the last seven days:&lt;/td&gt;\n&lt;td&gt;$seven_day.rain.sum&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>We put our addition <code>seven_day.py</code> in the \"user\" directory, which is automatically included by WeeWX in the Python path. However, if you put the file somewhere else, you may have to specify its location with the environment variable <code>PYTHONPATH</code>  when you start WeeWX:</p> <pre><code>export PYTHONPATH=/home/me/secret_location\n</code></pre>"},{"location":"custom/sle/#adding-tag-colorize","title":"Adding tag <code>$colorize</code>","text":"<p>Let's look at another example. This one will allow you to supply a background color, depending on the temperature. For example, to colorize an HTML table cell:</p> <pre><code>&lt;table&gt;\n\n    ...\n\n  &lt;tr&gt;\n    &lt;td&gt;Outside temperature&lt;/td&gt;\n&lt;td style=\"background-color:$colorize($current.outTemp.raw)\"&gt;$current.outTemp&lt;/td&gt;\n&lt;/tr&gt;\n\n    ...\n\n&lt;/table&gt;\n</code></pre> <p>The highlighted expression will return a color, depending on the value of its argument. For example, if the temperature was 30.9\u00baF, then the output might look like:</p> Outside temperature 30.9\u00b0F"},{"location":"custom/sle/#a-very-simple-implementation","title":"A very simple implementation","text":"<p>We will start with a very simple version. The code can be found in <code>examples/colorize/colorize_1.py</code>.</p> <pre><code>from weewx.cheetahgenerator import SearchList\n\nclass Colorize(SearchList):                                          # 1\n\n    def colorize(self, t_c):                                         # 2\n\"\"\"Choose a color on the basis of temperature\n\n        Args:\n            t_c (float): The temperature in degrees Celsius\n\n        Returns:\n            str: A color string\n        \"\"\"\n\n        if t_c is None:                                              # 3\n            return \"#00000000\"\n        elif t_c &lt; -10:\n            return \"magenta\"\n        elif t_c &lt; 0:\n            return \"violet\"\n        elif t_c &lt; 10:\n            return \"lavender\"\n        elif t_c &lt; 20:\n            return \"mocassin\"\n        elif t_c &lt; 30:\n            return \"yellow\"\n        elif t_c &lt; 40:\n            return \"coral\"\n        else:\n            return \"tomato\"\n</code></pre> <p>The first thing that's striking about this version is just how simple an SLE can be: just one class with a single function. Let's go through the implementation line-by-line.</p> <ol> <li> <p>Just like the first example, all search list extensions inherit from     <code>weewx.cheetahgenerator.SearchList</code></p> </li> <li> <p>The class defines a single function, <code>colorize()</code>, with a     single argument that must be of type <code>float</code>.</p> <p>Unlike the first example, notice how we do not define an initializer, <code>__init__()</code>, and, instead, rely on our superclass to do the initialization.</p> </li> <li> <p>The function relies on a big if/else statement to pick a color on     the basis of the temperature value. Note how it starts by checking     whether the value could be Python <code>None</code>. WeeWX uses <code>None</code> to represent     missing or invalid data. One must be always vigilant in guarding     against a <code>None</code> value. If <code>None</code> is found, then the color <code>#00000000</code> is     returned, which is transparent and will have no effect.</p> </li> </ol>"},{"location":"custom/sle/#register-colorize","title":"Registering","text":"<p>As before, we must register our extension with the Cheetah engine. We do this by copying the extension to the user directory, then adding its location to option <code>search_list_extensions</code>:</p> <pre><code>[CheetahGenerator]\n...\nsearch_list_extensions = user.colorize_1.Colorize\n...\n</code></pre>"},{"location":"custom/sle/#where-is-get_extension_list","title":"Where is <code>get_extension_list()</code>?","text":"<p>You might wonder, \"What happened to the member function <code>get_extension_list()</code>? We needed it in the first example; why not now?\" The answer is that we are inheriting from, and relying on, the version in the superclass <code>SearchList</code>, which looks like this:</p> <pre><code>    def get_extension_list(self, timespan, db_lookup):\n        return [self]\n</code></pre> <p>This returns a list, with itself (an instance of class <code>Colorize</code>) as the only member.</p> <p>How do we know whether to include an instance of <code>get_extension_list()</code>? Why did we include a version in the first example, but not in the second?</p> <p>The answer is that many extensions, including <code>$seven_day</code>, need information that can only be known when the template is being evaluated. In the case of <code>$seven_day</code>, this was which database binding to use, which will determine the results of the database query done in its implementation. This information is not known until <code>get_extension_list()</code> is called, which is just before template evaluation.</p> <p>By constrast, <code>$colorize()</code> is pure static: it doesn't use the database at all, and everything it needs it can get from its single function argument. So, it has no need for the information in <code>get_extension_list()</code>.</p>"},{"location":"custom/sle/#review","title":"Review","text":"<p>Let's review the whole process. When the WeeWX Cheetah generator starts up to evaluate a template, it first creates a search list. It does this by calling <code>get_extension_list()</code> for each SLE that has been registered with it. In our case, this will cause the function above to put an instance of <code>Colorize</code> in the search list \u2014 we don't have to do anything to make this happen.</p> <p>When the engine starts to process the template, it will eventually come to</p> <pre><code>&lt;td style=\"background-color:$colorize($current.outTemp.raw)\"&gt;$current.outTemp&lt;/td&gt;\n</code></pre> <p>It needs to evaluate the expression <code>$colorize($current.outTemp.raw)</code>, so it starts scanning the search list looking for something with an attribute or key <code>colorize</code>. When it comes to our instance of <code>Colorize</code> it gets a hit because, in Python, member functions are implemented as attributes. The Cheetah engine knows to call it as a function because of the parenthesis that follow the name. The engine passes in the value of <code>$current.outTemp.raw</code> as the sole argument, where it appears under the name <code>t_c</code>.</p> <p>As described above, the function <code>colorize()</code> then uses the argument to choose an appropriate color, returning it as a string.</p>"},{"location":"custom/sle/#limitation","title":"Limitation","text":"<p>This example has an obvious limitation: the argument to <code>$colorize()</code> must be in degrees Celsius. We can guard against passing in the wrong unit by always converting to Celsius first:</p> <pre><code>&lt;td style=\"background-color:$colorize($current.outTemp.degree_C.raw)\"&gt;$current.outTemp&lt;/td&gt;\n</code></pre> <p>but the user would have to remember to do this every time <code>colorize()</code> is called. The next version gets around this limitation.</p>"},{"location":"custom/sle/#a-slightly-better-version","title":"A slightly better version","text":"<p>Here's an improved version that can handle an argument that uses any unit, not just degrees Celsius. The code can be found in <code>examples/colorize/colorize_2.py</code>.</p> <pre><code>import weewx.units\nfrom weewx.cheetahgenerator import SearchList\n\nclass Colorize(SearchList):                                          # 1\n\n    def colorize(self, value_vh):                                    # 2\n\"\"\"Choose a color string on the basis of a temperature value\"\"\"\n\n        # Extract the ValueTuple part out of the ValueHelper\n        value_vt = value_vh.value_t                                  # 3\n\n        # Convert to Celsius:\n        t_celsius = weewx.units.convert(value_vt, 'degree_C')        # 4\n\n        # The variable \"t_celsius\" is a ValueTuple. Get just the value:\n        t_c = t_celsius.value                                        # 5\n\n        # Pick a color based on the temperature\n        if t_c is None:                                              # 6\n            return \"#00000000\"\n        elif t_c &lt; -10:\n            return \"magenta\"\n        elif t_c &lt; 0:\n            return \"violet\"\n        elif t_c &lt; 10:\n            return \"lavender\"\n        elif t_c &lt; 20:\n            return \"mocassin\"\n        elif t_c &lt; 30:\n            return \"yellow\"\n        elif t_c &lt; 40:\n            return \"coral\"\n        else:\n            return \"tomato\"\n</code></pre> <p>Going through the example, line by line:</p> <ol> <li> <p>Just like the other examples, we must inherit from     <code>weewx.cheetahgenerator.SearchList</code>.</p> </li> <li> <p>However, in this example, notice that the argument to     <code>colorize()</code> is an instance of class     <code>ValueHelper</code>, instead of a     simple float.</p> <p>As before, we do not define an initializer, <code>__init__()</code>, and, instead, rely on our superclass to do the initialization.</p> </li> <li> <p>The argument <code>value_vh</code> will contain many things, including     formatting and preferred units, but, for now, we are only interested     in the <code>ValueTuple</code> contained     within, which can be extracted with the attribute <code>value_t</code>.</p> </li> <li> <p>The variable <code>value_vt</code> could be in any unit that measures     temperature. Our code needs Celsius, so we convert to Celsius using     the convenience function <code>weewx.units.convert()</code>. The results     will be a new <code>ValueTuple</code>, this time in Celsius.</p> </li> <li> <p>We need just the temperature value, and not the other things in a     <code>ValueTuple</code>, so extract it using the attribute     <code>value</code>. The results will be a simple instance of     <code>float</code> or, possibly, Python <code>None</code>.</p> </li> <li> <p>Finally, we need a big if/else statement to choose which color to     return, while making sure to test for <code>None</code>.</p> </li> </ol> <p>This version uses a <code>ValueHelper</code> as an argument instead of a float. How do we call it? Here's an example:</p> <pre><code>&lt;table&gt;\n\n    ...\n\n  &lt;tr&gt;\n    &lt;td&gt;Outside temperature&lt;/td&gt;\n    &lt;td style=\"background-color:$colorize($current.outTemp)\"&gt;$current.outTemp&lt;/td&gt;\n  &lt;/tr&gt;\n\n    ...\n\n&lt;/table&gt;\n</code></pre> <p>This time, we call the function with a simple <code>$current.outTemp</code> (without the <code>.raw</code> suffix), which is actually an instance of class <code>ValueHelper</code>. When we met this class earlier, the Cheetah engine needed a string to put in the template, so it called the special member function <code>__str__()</code>. However, in this case, the results are going to be used as an argument to a function, not as a string, so the engine simply passes in the <code>ValueHelper</code> unchanged to <code>colorize()</code>, where it appears as argument <code>value_vh</code>.</p> <p>Our new version is better than the original because it can take a temperature in any unit, not just Celsius. However, it can still only handle temperature values and, even then, the color bands are still hardwired in. Our next version will remove these limitations.</p>"},{"location":"custom/sle/#a-more-sophisticated-version","title":"A more sophisticated version","text":"<p>Rather than hardwire in the values and observation type, in this version we will retrieve them from the skin configuration file, <code>skin.conf</code>. Here's what a typical configuration might look like for this version:</p> <pre><code>[Colorize]                      # 1\n[[group_temperature]]       # 2\nunit_system = metricwx  # 3\ndefault = tomato        # 4\nNone = lightgray        # 5\n[[[upper_bounds]]]      # 6\n-10 = magenta       # 7\n0 = violet          # 8\n10 = lavender\n20 = mocassin\n30 = yellow\n40 = coral\n[[group_uv]]                # 9\nunit_system = metricwx\ndefault = darkviolet\n[[[upper_bounds]]]\n2.4 = limegreen\n5.4 = yellow\n7.4 = orange\n10.4 = red\n</code></pre> <p>Here's what the various lines in the configuration stanza mean:</p> <ol> <li>All the configuration information needed by the SLE     <code>Colorize</code> can be found in a stanza with the heading     <code>[Colorize]</code>. Linking facility with a stanza of the same     name is a very common pattern in WeeWX.</li> <li>We need a separate color table for each unit group that we are going     to support. This is the start of the table for unit group     <code>group_temperature</code>.</li> <li>We need to specify what unit system will be used by the temperature     color table. In this example, we are using <code>metricwx</code>.</li> <li>In case we do not find a value in the table, we need a default. We     will use the color <code>tomato</code>.</li> <li>In case the value is Python <code>None</code>, return the color given by option     <code>None</code>. We will use <code>lightgray</code>.</li> <li>The sub-subsecction <code>[[[upper_bounds]]]</code> lists the     upper (max) value of each of the color bands.</li> <li>The first color band (magenta) is used for temperatures less than or     equal to -10\u00b0C.</li> <li>The second band (violet) is for temperatures greater than -10\u00b0C and     less than or equal to 0\u00b0C. And so on.</li> <li>The next subsection, <code>[[group_uv]]</code>, is very similar to     the one for <code>group_temperature</code>, except the values are for     bands of the UV index.</li> </ol> <p>Although <code>[Colorize]</code> is in <code>skin.conf</code>, there is nothing special about it, and it can be overridden in <code>weewx.conf</code>, just like any other configuration information.</p>"},{"location":"custom/sle/#annotated-code","title":"Annotated code","text":"<p>Here's the alternative version of <code>colorize()</code>, which will use the values in the configuration file. It can also be found in <code>examples/colorize/colorize_3.py</code>.</p> <pre><code>import weewx.units\nfrom weewx.cheetahgenerator import SearchList\n\nclass Colorize(SearchList):                                               # 1\n\n    def __init__(self, generator):                                        # 2\n        SearchList.__init__(self, generator)\n        self.color_tables = self.generator.skin_dict.get('Colorize', {})\n\n    def colorize(self, value_vh):\n\n        # Get the ValueTuple and unit group from the incoming ValueHelper\n        value_vt = value_vh.value_t                                       # 3\n        unit_group = value_vt.group                                       # 4\n\n        # Make sure unit_group is in the color table, and that the table\n        # specifies a unit system.\n        if unit_group not in self.color_tables \\\n                or 'unit_system' not in self.color_tables[unit_group]:    # 5\n            return \"#00000000\"\n\n        # Convert the value to the same unit used by the color table:\n        unit_system = self.color_tables[unit_group]['unit_system']        # 6\n        converted_vt = weewx.units.convertStdName(value_vt, unit_system)  # 7\n\n        # Check for a value of None\n        if converted_vt.value is None:                                    # 8\n            return self.color_tables[unit_group].get('none') \\\n                   or self.color_tables[unit_group].get('None', \"#00000000\")\n\n        # Search for the value in the color table:\n        for upper_bound in self.color_tables[unit_group]['upper_bounds']: # 9\n            if converted_vt.value &lt;= float(upper_bound):                  # 10\n                return self.color_tables[unit_group]['upper_bounds'][upper_bound]\n\n        return self.color_tables[unit_group].get('default', \"#00000000\")  # 11\n</code></pre> <ol> <li> <p>As before, our class must inherit from <code>SearchList</code>.</p> </li> <li> <p>In this version, we supply an initializer because we are going to do     some work in it: extract our color table out of the skin     configuration dictionary. In case the user neglects to include a     <code>[Colorize]</code> section, we substitute an empty dictionary.</p> </li> <li> <p>As before, we extract the <code>ValueTuple</code> part out of the     incoming <code>ValueHelper</code> using the attribute <code>value_t</code>.</p> </li> <li> <p>Retrieve the unit group used by the incoming argument. This will be     something like \"group_temperature\".</p> </li> <li> <p>What if the user is requesting a color for a unit group that we     don't know anything about? We must check that the unit group is in     our color table. We must also check that a unit system has been     supplied for the color table. If either of these checks fail, then     return the color <code>#00000000</code>, which will have no effect in     setting a background color.</p> </li> <li> <p>Thanks to the checks we did in step 5, we know that this line will     not raise a <code>KeyError</code> exception. Get the unit system used by     the color table for this unit group. It will be something like     'US', 'metric', or 'metricwx'.</p> </li> <li> <p>Convert the incoming value, so it uses the same units as the color     table.</p> </li> <li> <p>We must always be vigilant for values of Python None! The expression</p> <pre><code>self.color_tables[unit_group].get('none') or self.color_tables[unit_group].get('None', \"#00000000\")\n</code></pre> <p>is just a trick to allow us to accept either \"<code>none</code>\" or \"<code>None</code>\" in the configuration file. If neither is present, then we return the color <code>#00000000</code>, which will have no effect.</p> </li> <li> <p>Now start searching the color table to find a band that is less than     or equal to the value we have in hand.</p> </li> <li> <p>Two details to note.</p> <p>First, the variable <code>converted_vt</code> is a <code>ValueTuple</code>. We need the raw value in order to do the comparison. We get this through attribute <code>.value</code>.</p> <p>Second, WeeWX uses the utility <code>ConfigObj</code> to read configuration files. When <code>ConfigObj</code> returns its results, the values will be strings. We must convert these to floats before doing the comparison. You must be constantly vigilant about this when working with configuration information.</p> <p>If we find a band with an upper bound greater than our value, we have a hit. Return the corresponding color.</p> </li> <li> <p>If we make it all the way through the table without a hit, then we     must have a value greater than anything in the table. Return the     default, or the color <code>#00000000</code> if there is no default.</p> </li> </ol>"},{"location":"custom/units/","title":"Customizing units and unit groups","text":"<p>Warning</p> <p>This is an area that is changing rapidly in WeeWX. Presently, new units and unit groups are added by manipulating the internal dictionaries in WeeWX (as described below). In the future, they may be specified in <code>weewx.conf</code>.</p>"},{"location":"custom/units/#assigning-a-unit-group","title":"Assigning a unit group","text":"<p>In the examples above, we created a new observation type, <code>electricity</code>, and added it to the database schema. Now we would like to recognize that it is a member of the unit group <code>group_energy</code> (which already exists), so it can enjoy the labels and formats already provided for this group. This is done by extending the dictionary <code>weewx.units.obs_group_dict</code>.</p> <p>Add the following to our new services file <code>user/electricity.py</code>, just after the last import statement:</p> <pre><code>import weewx\nfrom weewx.engine import StdService\n\nimport weewx.units\nweewx.units.obs_group_dict['electricity'] = 'group_energy'\n\nclass AddElectricity(StdService):\n\n   # [...]\n</code></pre> <p>When our new service gets loaded by the WeeWX engine, these few lines will get run. They tell WeeWX that our new observation type, <code>electricity</code>, is part of the unit group <code>group_energy</code>. Once the observation has been associated with a unit group, the unit labels and other tag syntax will work for that observation. So, now a tag like:</p> <pre><code>$month.electricity.sum\n</code></pre> <p>will return the total amount of electricity consumed for the month, in Watt-hours.</p>"},{"location":"custom/units/#creating-a-new-unit-group","title":"Creating a new unit group","text":"<p>That was an easy one, because there was already an existing group, <code>group_energy</code>, that covered our new observation type. But, what if we are measuring something entirely new, like force with time? There is nothing in the existing system of units that covers things like newtons or pounds. We will have to define these new units, as well as the unit group they can belong to.</p> <p>We assume we have a new observation type, <code>rocketForce</code>, which we are measuring over time, for a service named <code>Rocket</code>, located in <code>user/rocket.py</code>. We will create a new unit group, <code>group_force</code>, and new units, <code>newton</code> and <code>pound</code>. Our new observation, <code>rocketForce</code>, will belong to <code>group_force</code>, and will be measured in units of <code>newton</code> or <code>pound</code>.</p> <p>To make this work, we need to add the following to <code>user/rocket.py</code>.</p> <ol> <li> <p>As before, we start by specifying what group our new observation     type belongs to:</p> <pre><code>import weewx.units\nweewx.units.obs_group_dict['rocketForce'] = 'group_force'\n</code></pre> </li> <li> <p>Next, we specify what unit is used to measure force in the three     standard unit systems used by weewx.</p> <pre><code>weewx.units.USUnits['group_force'] = 'pound'\nweewx.units.MetricUnits['group_force'] = 'newton'\nweewx.units.MetricWXUnits['group_force'] = 'newton'\n</code></pre> </li> <li> <p>Then we specify what formats and labels to use for <code>newton</code>     and <code>pound</code>:</p> <pre><code>weewx.units.default_unit_format_dict['newton'] = '%.1f'\nweewx.units.default_unit_format_dict['pound']  = '%.1f'\n\nweewx.units.default_unit_label_dict['newton'] = ' newton'\nweewx.units.default_unit_label_dict['pound']  = ' pound'\n</code></pre> </li> <li> <p>Finally, we specify how to convert between them:</p> <pre><code>weewx.units.conversionDict['newton'] = {'pound':  lambda x : x * 0.224809}\nweewx.units.conversionDict['pound']  = {'newton': lambda x : x * 4.44822}\n</code></pre> </li> </ol> <p>Now, when the service <code>Rocket</code> gets loaded, these lines of code will get executed, adding the necessary unit extensions to WeeWX.</p>"},{"location":"custom/units/#using-the-new-units","title":"Using the new units","text":"<p>Now you've added a new type of units. How do you use it?</p> <p>Pretty much like any other units. For example, to do a plot of the month's electric consumption, totaled by day, add this section to the <code>[[month_images]]</code> section of <code>skin.conf</code>:</p> <pre><code>[[[monthelectric]]]\n[[[[electricity]]]]\naggregate_type = sum\naggregate_interval = 1d\nlabel = Electric consumption (daily total)\n</code></pre> <p>This will cause the generation of an image <code>monthelectric.png</code>, showing a plot of each day's consumption for the past month.</p> <p>If you wish to use the new type in the templates, it will be available using the same syntax as any other type. Here are some other tags that might be useful:</p> Tag Meaning <code>$day.electricity.sum</code> Total consumption since midnight <code>$year.electricity.sum</code> Total consumption since the first of the year <code>$year.electricity.max</code> The most consumed during any archive period <code>$year.electricity.maxsum</code> The most consumed during a day <code>$year.electricity.maxsumtime</code> The day it happened. <code>$year.electricity.sum_ge((5000.0, 'kWh', 'group_energy'))</code> The number of days of the year wheremore than 5.0 kWh of energy was consumed.The argument is a <code>ValueTuple</code>."},{"location":"hardware/acurite/","title":"AcuRite","text":"<p>According to Acurite, the wind speed updates every 18 seconds. The wind direction updates every 30 seconds. Other sensors update every 60 seconds.</p> <p>In fact, because of the message structure and the data logging design, these are the actual update frequencies:</p> AcuRite transmission periods sensorperiod Wind speed18 seconds Outdoor temperature, outdoor humidity36 seconds Wind direction, rain total36 seconds Indoor temperature, pressure60 seconds Indoor humidity12 minutes (only when in USB mode 3) <p>The station emits partial packets, which may confuse some online services.</p> <p>The AcuRite stations do not record wind gusts.</p> <p>Some consoles have a small internal logger.  Data in the logger are erased when power is removed from the station.</p> <p>The console has a sensor for inside humidity, but the values from that sensor are available only by reading from the console logger. Due to instability of the console firmware, the WeeWX driver does not read the console logger.</p>"},{"location":"hardware/acurite/#acurite_usb_mode","title":"USB Mode","text":"<p>Some AcuRite consoles have a setting called \"USB Mode\" that controls how data are saved and communicated:</p> AcuRite USB mode Mode Show datain display Store datain logger Send dataover USB 1yesyes 2yes 3yesyesyes 4yesyes <p>If the AcuRite console has multiple USB modes, it must be set to USB mode 3 or 4 in order to work with the WeeWX driver.</p> <p>Communication via USB is disabled in modes 1 and 2. Mode 4 is more reliable than mode 3; mode 3 enables logging of data, mode 4 does not. When the console is logging it frequently causes USB communication problems.</p> <p>The default mode is 2, so after a power failure one must use the console controls to change the mode before WeeWX can resume data collection.</p> <p>The 01025, 01035, 01036, 01525, and 02032 consoles have a USB mode setting.</p> <p>The 02064 and 01536 consoles do not have a mode setting; these consoles are always in USB mode 4.</p>"},{"location":"hardware/acurite/#acurite_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The <code>weectl device</code> utility cannot be used to configure AcuRite stations.</p>"},{"location":"hardware/acurite/#acurite_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> AcuRite station data Database Field Observation Loop Archive barometer S pressure pressure H altimeter S inTemp temperature_in H outTemp temperature_out H inHumidity humidity_in outHumidity humidity_out H windSpeed wind_speed H windDir wind_dir H rain rain D rain_total H rainRate S dewpoint S windchill S heatindex S rxCheckPercent rssi H outTempBatteryStatus battery H <p> Each packet contains a subset of all possible readings. For example, one type of packet contains windSpeed, windDir and rain. A different type of packet contains windSpeed, outTemp and outHumidity. </p> <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/cc3000/","title":"RainWise CC3000","text":"<p>The CC3000 data logger stores 2MB of records.</p> <p>When the logger fills up, it stops recording.</p> <p>When WeeWX starts up it will attempt to download all records from the logger since the last record in the archive database.</p> <p>The driver does not support hardware record generation.</p> <p>The CC3000 data logger may be configured to return data in METRIC or ENGLISH units. These are then mapped to the WeeWX unit groups <code>METRICWX</code> or <code>US</code>, respectively.</p>"},{"location":"hardware/cc3000/#cc3000_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The CC3000 can be configured with the utility <code>weectl device</code>.</p> <p>Note</p> <p>Make sure you stop <code>weewxd</code> before running <code>weectl device</code>.</p>"},{"location":"hardware/cc3000/#cc3000_help","title":"--help","text":"<p>Invoking <code>weectl device</code> with the <code>--help</code> option will produce something like this:</p> <pre><code>weectl device --help\n</code></pre> <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\nUsage: weectl device [config_file] [options] [-y] [--debug] [--help]\n\nConfiguration utility for weewx devices.\n\nOptions:\n-h, --help            show this help message and exit\n--debug               display diagnostic information while running\n-y                    answer yes to every prompt\n--info                display weather station configuration\n--current             display current weather readings\n--history=N           display N records (0 for all records)\n--history-since=N     display records since N minutes ago\n--clear-memory        clear station memory\n--get-header          display data header\n--get-rain            get the rain counter\n--reset-rain          reset the rain counter\n--get-max             get the max values observed\n--reset-max           reset the max counters\n--get-min             get the min values observed\n--reset-min           reset the min counters\n--get-clock           display station clock\n--set-clock           set station clock to computer time\n--get-interval        display logger archive interval, in seconds\n--set-interval=N      set logging interval to N seconds\n--get-units           show units of logger\n--set-units=UNITS     set units to METRIC or ENGLISH\n--get-dst             display daylight savings settings\n--set-dst=mm/dd HH:MM,mm/dd HH:MM,[MM]M\nset daylight savings start, end, and amount\n--get-channel         display the station channel\n--set-channel=CHANNEL\nset the station channel\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_info","title":"<code>--info</code>","text":"<p>Display the station settings with <code>--info</code></p> <pre><code>weectl device --info\n</code></pre> <p>This will result in something like:</p> <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\nFirmware: Rainwise CC-3000 Version: 1.3 Build 022 Dec 02 2016\nTime: 2020/01/04 15:38:14\nDST: 03/08 02:00,11/01 02:00,060\nUnits: ENGLISH\nMemory: 252242 bytes, 4349 records, 12%\nInterval: 300\nChannel: 0\nCharger: CHARGER=OFF,BATTERIES=5.26V\nBaro: 30.37\nRain: 3.31\nHEADER: ['HDR', '\"TIMESTAMP\"', '\"TEMP OUT\"', '\"HUMIDITY\"', '\"PRESSURE\"', '\"WIND DIRECTION\"', '\"WIND SPEED\"',~\nMAX: ['MAX', '11:59  61.1', '02:47  99', '09:51 30.42', '13:32 337', '13:32  13.3', '00:00   0.00', '09:20  ~\nMIN: ['MIN', '02:19  40.6', '14:42  66', '00:34 30.24', '00:00  67', '00:00   0.0', '00:00   0.00', '06:48  ~\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_current","title":"<code>--current</code>","text":"<p>Returns the current values in a comma-delimited format. The order of the data values corresponds to the output of the <code>--get-header</code> command. <code>NO DATA</code> is returned if the unit has not received a transmission from the weather station.</p> <pre><code>weectl device --current\n</code></pre> <p>This will result in something like:</p> <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n{'dateTime': 1578175453.0, 'outTemp': 58.6, 'outHumidity': 71.0, 'pressure': 30.36, 'windDir': 315.0, ~\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_history","title":"<code>--history=N</code>","text":"<p>Display the latest <code>N</code> records from the CC3000 logger memory.  Use a value of <code>0</code> to display all records.  Note: because there may be other records mixed in with the archive records, this command will display an extra seven records per day (or partial day).</p> <pre><code>weectl device --history=2\n</code></pre> <p>This will result in something like:</p> <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n['REC', '2020/01/04 13:25', ' 58.9', ' 71', '30.36', '344', '  4.9', ' 10.7', '  0.00', ' 7.44', ' 5.26', ~\n['REC', '2020/01/04 13:30', ' 59.0', ' 71', '30.36', '327', '  3.6', ' 10.0', '  0.00', ' 7.32', ' 5.26', ~\n['REC', '2020/01/04 13:35', ' 59.1', ' 70', '30.36', '305', '  5.5', ' 13.3', '  0.00', ' 7.44', ' 5.26', ~\n['REC', '2020/01/04 13:40', ' 59.1', ' 70', '30.36', '330', '  3.4', '  8.9', '  0.00', ' 7.08', ' 5.26', ~\n['REC', '2020/01/04 13:45', ' 58.9', ' 70', '30.36', '318', '  2.6', '  7.2', '  0.00', ' 7.17', ' 5.26', ~\n['REC', '2020/01/04 13:50', ' 58.8', ' 71', '30.36', '312', '  3.6', '  7.9', '  0.00', ' 7.14', ' 5.26', ~\n['REC', '2020/01/04 13:55', ' 58.9', ' 71', '30.36', '330', '  4.5', ' 10.0', '  0.00', ' 7.20', ' 5.26', ~\n['REC', '2020/01/04 14:00', ' 58.8', ' 71', '30.36', '331', '  4.6', '  9.6', '  0.00', ' 7.38', ' 5.26', ~\n['REC', '2020/01/04 14:05', ' 58.6', ' 71', '30.36', '331', '  4.0', '  9.3', '  0.00', ' 7.29', ' 5.26', ~\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_history_since","title":"<code>--history-since=N</code>","text":"<p>Display all CC3000 logger memory records created in the last <code>N</code> minutes.</p> <pre><code>weectl device --history-since=10\n</code></pre> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n{'dateTime': 1578175800.0, 'outTemp': 58.6, 'outHumidity': 70.0, 'pressure': 30.36, 'windDir': 316.0, ~\n{'dateTime': 1578176100.0, 'outTemp': 58.7, 'outHumidity': 70.0, 'pressure': 30.36, 'windDir': 317.0, ~\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_clear_memory","title":"<code>--clear-memory</code>","text":"<p>Use --clear-memory` to erase all records from the logger memory. <pre><code>weectl device --clear-memory\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_get_header","title":"<code>--get-header</code>","text":"<p>Returns a series of comma delimited text descriptions. These descriptions are used to identify the type and order of the returned data in both <code>--get-current&lt;/code&gt;,</code>--download=N and `--download-since=N commands.</p> <pre><code>weectl device --get-header\n</code></pre> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n['HDR', '\"TIMESTAMP\"', '\"TEMP OUT\"', '\"HUMIDITY\"', '\"PRESSURE\"', '\"WIND DIRECTION\"', '\"WIND SPEED\"', ~\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_get_rain","title":"<code>--get-rain</code>","text":"<p>Display the rain counter.</p> <p>The CC-3000 maintains a rainfall counter that is only reset by a reboot or by issuing the <code>reset</code> command. The counter counts in 0.01 inch increments and rolls over at 65536 counts. Issuing the rainfall reset command will clear all rainfall counters including the current daily rainfall.</p> <pre><code>weectl device --get-rain\n</code></pre> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n3.31\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_reset_rain","title":"<code>--reset-rain</code>","text":"<p>Reset the rain counter to zero.</p> <pre><code>weectl device --reset-rain\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_get_max","title":"<code>--get-max</code>","text":"<p>Get the maximum values observed since the last time.</p> <p>Output parameter order: Outside temperature, humidity, pressure, wind direction, wind speed, rainfall (daily total), station voltage, inside temperature. If any optional sensors have been enabled they will also be displayed.</p> <pre><code>weectl device --get-max\n</code></pre> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n['MAX', '11:59  61.1', '02:47  99', '09:51 30.42', '13:32 337', '13:32  13.3', '00:00   0.00', '09:20 ~\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_reset_max","title":"<code>--reset-max</code>","text":"<p>Reset the maximum values.</p> <pre><code>weectl device --reset-max\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_get_min","title":"<code>--get-min</code>","text":"<p>Get the minimum values observed since the last time.</p> <p>Output parameter order: Outside temperature, humidity, pressure, wind direction, wind speed, rainfall (ignore), station voltage, inside temperature. If any optional sensors have been enabled they will also be displayed.</p> <pre><code>weectl device --get-min\n</code></pre> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n['MIN', '02:19  40.6', '14:42  66', '00:34 30.24', '00:00  67', '00:00   0.0', '00:00   0.00', '06:48 ~\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_reset_min","title":"<code>--reset-min</code>","text":"<p>Reset the minimum values.</p> <pre><code>weectl device --reset-min\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_get_clock","title":"<code>--get-clock</code>","text":"<p>Get the time.</p> <pre><code>weectl device --get-clock\n</code></pre> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n2020/01/04 15:01:34\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_set_clock","title":"<code>--set-clock</code>","text":"<p>Set the station clock to match the date/time of the computer.</p> <pre><code>weectl device --set-clock\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_get_interval","title":"<code>--get-interval</code>","text":"<p>Returns the current logging interval (in seconds).</p> <pre><code>weectl device --get-interval\n</code></pre> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n300\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_set_interval","title":"<code>--set-interval=N</code>","text":"<p>Set the archive interval.</p> <p>CC3000 loggers ship from the factory with an archive interval of 1 minutes (60 seconds). To change the station's interval to 300 seconds (5 minutes), do the following:</p> <pre><code>weectl device --set-interval=5\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_get_units","title":"<code>--get-units</code>","text":"<p>Returns the current measurement units.</p> <pre><code>weectl device --get-units\n</code></pre> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\nENGLISH\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_set_units","title":"<code>--set-units</code>","text":"<p>The CC3000 can display data in either ENGLISH or METRIC unit systems.  Use <code>--set-units</code> to specify one or the other.</p> <p>The CC3000 driver automatically converts the units to maintain consistency with the units in WeeWX.</p> <pre><code>weectl device --set-units=ENGLISH\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_get_dst","title":"<code>--get-dst</code>","text":"<p>Return the dates and times when the clock will change due to daylight saving and the number of minutes that the clock will change.</p> <p>This will result in something like: <pre><code>Using CC3000 driver version 0.30 (weewx.drivers.cc3000)\n03/08 02:00,11/01 02:00,060\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_set_dst","title":"<code>--set-dst=N</code>","text":"<p>Set the station start, end, and amount of daylight savings.</p> <p>The schedule can be set by adding the three parameters, forward date and time, back date and time and number of minutes to change (120 max).</p> <pre><code>weectl device --set-dst=\"03/08 02:00,11/01 02:00,060\"\n</code></pre> <p>Daylight saving can be disabled by setting the daylight-saving to zero.</p> <pre><code>weectl device --set-dst=0\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_get_channel","title":"<code>--get-channel</code>","text":"<p>Displays the station channel (0-3).</p> <p>This will result in something like: <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing CC3000 driver version 0.30 (weewx.drivers.cc3000)\n0\n</code></pre></p>"},{"location":"hardware/cc3000/#cc3000_set_channel","title":"<code>--set-channel=N</code>","text":"<p>Rainwise stations transmit on one of four channels.  If you have multiple instrument clusters within a kilometer or so of each other, you should configure each to use a different channel. In the instrument cluster, remove the cover and set the DIP switches 0 and 1.  Use <code>--set-channel</code> to a value of 0-3 to match that of the instrument cluster.</p> <pre><code>weectl device --set-channel=0\n</code></pre>"},{"location":"hardware/cc3000/#cc3000_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> CC3000 station data Database Field Observation Loop Archive barometer S S pressure PRESSURE H H altimeter S S inTemp TEMP IN H H outTemp TEMP OUT H H outHumidity HUMIDITY H H windSpeed WIND SPEED H H windDir WIND DIRECTION H H windGust WIND GUST H H rain rain_delta D D RAIN H H rainRate S S dewpoint S S windchill S S heatindex S S radiation<sup>1</sup> SOLAR RADIATION H H UV<sup>1</sup> UV INDEX H H supplyVoltage STATION BATTERY H consBatteryVoltage BATTERY BACKUP H extraTemp1<sup>2</sup> TEMP 1 H H extraTemp2<sup>2</sup> TEMP 2 H H <p> <sup>1</sup> The radiation and UV data are available only with the optional solar radiation sensor. </p> <p> <sup>2</sup> The extraTemp1 and extraTemp2 data are available only with the optional additional temperature sensors. </p> <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/drivers/","title":"Hardware guide","text":""},{"location":"hardware/drivers/#core-hardware","title":"Core hardware","text":"<p>Drivers for these stations are included in the core WeeWX distribution.  Each station type provides a different set of observations, at different sampling rates. These are enumerated in a Station data table in the page for each station.</p> AcuRite TE923 WMR100 WS1 CC3000 Ultimeter WMR300 WS23xx FineOffset Vantage WMR9x8 WS28xx"},{"location":"hardware/drivers/#driver-status","title":"Driver status","text":"<p>The following table enumerates many of the weather stations that are known to work with WeeWX. If your station is not in the table, check the pictures at the supported hardware page \u2014 it could be a variation of one of the supported models. You can also check the station comparison table \u2014 sometimes new models use the same communication protocols as older hardware.</p> <p>The maturity column indicates the degree of confidence in the driver. For stations marked Tested, the station is routinely tested as part of the release process and should work as documented. For stations not marked at all, they are \"known to work\" using the indicated driver, but are not routinely tested. For stations marked Experimental, we are still working on the driver. There can be problems.</p> Weather hardware supported by WeeWX Vendor Model HardwareInterface RequiredPackage Driver Maturity AcuRite 01025 USB pyusb AcuRite<sup>12</sup> 01035 USB pyusb AcuRite<sup>12</sup> Tested 01036 USB pyusb AcuRite<sup>12</sup> 01525 USB pyusb AcuRite<sup>12</sup> 02032 USB pyusb AcuRite<sup>12</sup> 02064 USB pyusb AcuRite<sup>12</sup> 06037 USB pyusb AcuRite<sup>12</sup> 06039 USB pyusb AcuRite<sup>12</sup> Argent Data Systems WS1 Serial pyusb WS1<sup>9</sup> Aercus WS2083 USB pyusb FineOffsetUSB<sup>5</sup> WS3083 USB pyusb FineOffsetUSB<sup>5</sup> Ambient Weather WS1090 USB pyusb FineOffsetUSB<sup>5</sup> Tested WS2080 USB pyusb FineOffsetUSB<sup>5</sup> Tested WS2080A USB pyusb FineOffsetUSB<sup>5</sup> Tested WS2090 USB pyusb FineOffsetUSB<sup>5</sup> WS2095 USB pyusb FineOffsetUSB<sup>5</sup> Cresta WRX815 USB pyusb TE923<sup>8</sup> PWS720 USB pyusb TE923<sup>8</sup> DAZA DZ-WH1080 USB pyusb FineOffsetUSB<sup>5</sup> DZ-WS3101 USB pyusb FineOffsetUSB<sup>5</sup> DZ-WS3104 USB pyusb FineOffsetUSB<sup>5</sup> Davis VantagePro2 Serial or USB pyserial Vantage<sup>1</sup> Tested VantagePro2 WeatherLink IP Vantage<sup>1</sup> Tested VantageVue Serial or USB pyserial Vantage<sup>1</sup> Tested Elecsa 6975 USB pyusb FineOffsetUSB<sup>5</sup> 6976 USB pyusb FineOffsetUSB<sup>5</sup> Excelvan Excelvan USB pyusb FineOffsetUSB<sup>5</sup> Fine Offset WH1080 USB pyusb FineOffsetUSB<sup>5</sup> WH1081 USB pyusb FineOffsetUSB<sup>5</sup> WH1091 USB pyusb FineOffsetUSB<sup>5</sup> WH1090 USB pyusb FineOffsetUSB<sup>5</sup> WS1080 USB pyusb FineOffsetUSB<sup>5</sup> WA2080 USB pyusb FineOffsetUSB<sup>5</sup> WA2081 USB pyusb FineOffsetUSB<sup>5</sup> WH2080 USB pyusb FineOffsetUSB<sup>5</sup> WH2081 USB pyusb FineOffsetUSB<sup>5</sup> WH3080 USB pyusb FineOffsetUSB<sup>5</sup> WH3081 USB pyusb FineOffsetUSB<sup>5</sup> Froggit WS8700 USB pyusb TE923<sup>8</sup> WH1080 USB pyusb FineOffsetUSB<sup>5</sup> WH3080 USB pyusb FineOffsetUSB<sup>5</sup> General Tools WS831DL USB pyusb TE923<sup>8</sup> Hideki DV928 USB pyusb TE923<sup>8</sup> TE821 USB pyusb TE923<sup>8</sup> TE827 USB pyusb TE923<sup>8</sup> TE831 USB pyusb TE923<sup>8</sup> TE838 USB pyusb TE923<sup>8</sup> TE923 USB pyusb TE923<sup>8</sup> Huger WM918 Serial pyserial WMR9x8<sup>4</sup> IROX Pro X USB pyusb TE923<sup>8</sup> La Crosse C86234 USB pyusb WS28xx<sup>7</sup> Tested WS-1640 USB pyusb TE923<sup>8</sup> WS-23XX Serial fcntl/select WS23xx<sup>6</sup> Tested WS-28XX USB pyusb WS28xx<sup>7</sup> Maplin N96GY USB pyusb FineOffsetUSB<sup>5</sup> N96FY USB pyusb FineOffsetUSB<sup>5</sup> Meade TE923W USB pyusb TE923<sup>8</sup> Tested TE923W-M USB pyusb TE923<sup>8</sup> TE924W USB pyusb TE923<sup>8</sup> Mebus TE923 USB pyusb TE923<sup>8</sup> National Geographic 265 USB pyusb FineOffsetUSB<sup>5</sup> Oregon Scientific WMR88 USB pyusb WMR100<sup>2</sup> WMR88A USB pyusb WMR100<sup>2</sup> WMR100 USB pyusb WMR100<sup>2</sup> WMR100N USB pyusb WMR100<sup>2</sup> Tested WMR180 USB pyusb WMR100<sup>2</sup> WMR180A USB pyusb WMR100<sup>2</sup> WMRS200 USB pyusb WMR100<sup>2</sup> WMR300 USB pyusb WMR300<sup>3</sup> Experimental WMR300A USB pyusb WMR300<sup>3</sup> Experimental WMR918 Serial pyserial WMR9x8<sup>4</sup> WMR928N Serial pyserial WMR9x8<sup>4</sup> Tested WMR968 Serial pyserial WMR9x8<sup>4</sup> Tested PeetBros Ultimeter 100 Serial pyserial Ultimeter<sup>10</sup> Ultimeter 800 Serial pyserial Ultimeter<sup>10</sup> Ultimeter 2000 Serial pyserial Ultimeter<sup>10</sup> Ultimeter 2100 Serial pyserial Ultimeter<sup>10</sup> RainWise Mark III Serial pyserial CC3000<sup>11</sup> CC3000 Serial pyserial CC3000<sup>11</sup> Tested Radio Shack 63-256 USB pyusb WMR100<sup>2</sup> 63-1016 Serial pyserial WMR9x8<sup>4</sup> Sinometer WS1080 / WS1081 USB pyusb FineOffsetUSB<sup>5</sup> WS3100 / WS3101 USB pyusb FineOffsetUSB<sup>5</sup> TechnoLine WS-2300 Serial fcntl/select WS23xx<sup>6</sup> WS-2350 Serial fcntl/select WS23xx<sup>6</sup> TFA Matrix Serial fcntl/select WS23xx<sup>6</sup> Nexus USB pyusb TE923<sup>8</sup> Opus USB pyusb WS28xx<sup>7</sup> Primus USB pyusb WS28xx<sup>7</sup> Sinus USB pyusb TE923<sup>8</sup> Tycon TP1080WC USB pyusb FineOffsetUSB<sup>5</sup> Watson W-8681 USB pyusb FineOffsetUSB<sup>5</sup> WX-2008 USB pyusb FineOffsetUSB<sup>5</sup> Velleman WS3080 USB pyusb FineOffsetUSB<sup>5</sup> Ventus W831 USB pyusb TE923<sup>8</sup> W928 USB pyusb TE923<sup>8</sup> <p>Davis \"Vantage\" series of weather stations, including the VantagePro2\u2122 and VantageVue\u2122, using serial, USB, or WeatherLinkIP\u2122 connections. Both the \"Rev A\" (firmware dated before 22 April 2002) and \"Rev B\" versions are supported.</p> <p>Oregon Scientific WMR-100 stations. Tested on the Oregon   Scientific WMR100N.</p> <p>Oregon Scientific WMR-300 stations. Tested on the Oregon   Scientific WMR300A.</p> <p>Oregon Scientific WMR-9x8 stations. Tested on the Oregon Scientific WMR968.</p> <p>Fine Offset 10xx, 20xx, and 30xx stations. Tested on the Ambient Weather WS2080.</p> <p>La Crosse WS-23xx stations. Tested on the La Crosse 2317.</p> <p>La Crosse WS-28xx stations. Tested on the La Crosse C86234.</p> <p>Hideki Professional Weather Stations. Tested on the Meade TE923.</p> <p>ADS WS1 Stations. Tested on the WS1.</p> <p>PeetBros Ultimeter Stations. Tested on the Ultimeter 2000.</p> <p>RainWise Mark III Stations. Tested on the CC3000 (firmware \"Rainwise CC-3000 Version: 1.3 Build 022 Dec 02 2016\").</p> <p>AcuRite Weather Stations. Tested on the 01036RX.</p>"},{"location":"hardware/fousb/","title":"FineOffset (USB)","text":"<p>The station clock can only be set manually via buttons on the console, or (if the station supports it) by WWVB radio. The FineOffsetUSB driver ignores the station clock since it cannot be trusted.</p> <p>The station reads data from the sensors every 48 seconds. The 30xx stations read UV data every 60 seconds.</p> <p>The 10xx and 20xx stations can save up to 4080 historical readings. That is about 85 days of data with the default recording interval of 30 minutes, or about 14 days with a recording interval of 5 minutes. The 30xx stations can save up to 3264 historical readings.</p> <p>When WeeWX starts up it will attempt to download all records from the console since the last record in the archive database.</p>"},{"location":"hardware/fousb/#polling-mode-and-interval","title":"Polling mode and interval","text":"<p>When reading 'live' data, WeeWX can read as fast as possible, or at a user-defined period. This is controlled by the option <code>polling_mode</code> in the WeeWX configuration file.</p> Polling modes for Fine Offset stations Mode Configuration Notes ADAPTIVE <pre>[FineOffsetUSB]\npolling_mode = ADAPTIVE</pre>  In this mode, WeeWX reads data from the station as often as possible, but at intervals that avoid communication between the console and the sensors. Nominally this results in reading data every 48 seconds.  PERIODIC <pre>[FineOffsetUSB]\npolling_mode = PERIODIC\npolling_interval = 60</pre>  In this mode, WeeWX reads data from the station every polling_interval seconds.  The console reads the sensors every 48 seconds (60 seconds for UV), so setting the polling_interval to a value less than 48 will result in duplicate readings."},{"location":"hardware/fousb/#fousb_data_format","title":"Data format","text":"<p>The 10xx/20xx consoles have a data format that is different from the 30xx consoles.  All the consoles recognize wind, rain, temperature, and humidity from the same instrument clusters. However, some instrument clusters also include a luminosity sensor. Only the 30xx consoles recognize the luminosity and UV output from these sensors.  As a consequence, the 30xx consoles also have a different data format.</p> <p>Since WeeWX cannot reliably determine the data format by communicating with the station, the <code>data_format</code> configuration option indicates the station type.  Possible values are <code>1080</code> and <code>3080</code>. Use <code>1080</code> for the 10xx and 20xx consoles.</p> <p>The default value is <code>1080</code>.</p> <p>For example, this would indicate that the station is a 30xx console:</p> <pre><code>[FineOffsetUSB]\n    data_format = 3080\n</code></pre>"},{"location":"hardware/fousb/#fousb_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The Fine Offset stations can be configured with the utility <code>weectl device</code>.</p> <p>Note</p> <p>Make sure you stop <code>weewxd</code> before running <code>weectl device</code>.</p>"},{"location":"hardware/fousb/#fousb_help","title":"<code>--help</code>","text":"<p>Invoking <code>weectl device</code> with the <code>--help</code> option</p> <pre><code>weectl device --help\n</code></pre> <p>will produce something like this:</p> <pre><code>FineOffsetUSB driver version 1.7\nUsage: weectl device [config_file] [options] [--debug] [--help]\n\nConfiguration utility for weewx devices.\n\nOptions:\n-h, --help           show this help message and exit\n--debug              display diagnostic information while running\n-y                   answer yes to every prompt\n--info               display weather station configuration\n--current            get the current weather conditions\n--history=N          display N records\n--history-since=N    display records since N minutes ago\n--clear-memory       clear station memory\n--set-time           set station clock to computer time\n--set-interval=N     set logging interval to N minutes\n--live               display live readings from the station\n--logged             display logged readings from the station\n--fixed-block        display the contents of the fixed block\n--check-usb          test the quality of the USB connection\n--check-fixed-block  monitor the contents of the fixed block\n--format=FORMAT      format for output, one of raw, table, or dict\n\nMutating actions will request confirmation before proceeding.\n</code></pre>"},{"location":"hardware/fousb/#fousb_info","title":"<code>--info</code>","text":"<p>Display the station settings with the <code>--info</code> option.</p> <pre><code>weectl device --info\n</code></pre> <p>This will result in something like:</p> <pre>Fine Offset station settings:\nlocal time: 2013.02.11 18:34:28 CET\npolling_mode: ADAPTIVE\n\nabs_pressure: 933.3\ncurrent_pos: 592\ndata_changed: 0\ndata_count: 22\ndate_time: 2007-01-01 22:49\nhum_in_offset: 18722\nhum_out_offset: 257\nid: None\nlux_wm2_coeff: 0\nmagic_1: 0x55\nmagic_2: 0xaa\nmodel: None\nrain_coef: None\nread_period: 30\nrel_pressure: 1014.8\ntemp_in_offset: 1792\ntemp_out_offset: 0\ntimezone: 0\nunknown_01: 0\nunknown_18: 0\nversion: 255\nwind_coef: None\nwind_mult: 0</pre> <p>Highlighted values can be modified.</p>"},{"location":"hardware/fousb/#fousb_set_interval","title":"<code>--set-interval=N</code>","text":"<p>Set the archive interval.  Fine Offset stations ship from the factory with an archive interval (read_period) of 30 minutes (1800 seconds). To change the station's interval to 5 minutes, do the following:</p> <pre><code>weectl device --set-interval=5\n</code></pre>"},{"location":"hardware/fousb/#fousb_history","title":"<code>--history=N</code>","text":"<p>Fine Offset stations store records in a circular buffer \u2014 once the buffer fills, the oldest records are replaced by newer records. The 1080 and 2080 consoles store up to 4080 records. The 3080 consoles store up to 3264 records. The <code>data_count</code> indicates how many records are in memory. The <code>read_period</code> indicates the number of minutes between records. <code>weectl device</code> can display these records in space-delimited, raw bytes, or dictionary format.</p> <p>For example, to display the most recent 30 records from the console memory:</p> <pre><code>weectl device --history=30\n</code></pre>"},{"location":"hardware/fousb/#fousb_clear_memory","title":"<code>--clear-memory</code>","text":"<p>To clear the console memory:</p> <pre><code>weectl device --clear-memory\n</code></pre>"},{"location":"hardware/fousb/#fousb_check_usb","title":"<code>--check-usb</code>","text":"<p>This command can test the quality of the USB connection between the computer and console. Poor quality USB cables, under-powered USB hubs, and other devices on the bus can interfere with communication.</p> <p>To test the quality of the USB connection to the console:</p> <pre><code>weectl device --check-usb\n</code></pre> <p>Let the utility run for at least a few minutes, or possibly an hour or two. It is not unusual to see a few bad reads in an hour, but if you see many bad reads within a few minutes, consider replacing the USB cable, USB hub, or removing other devices from the bus.</p>"},{"location":"hardware/fousb/#fousb_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> Fine Offset station data Database Field Observation Loop Archive barometer S S pressure pressure H H altimeter S S inTemp temperature_in H H outTemp temperature_out H H inHumidity humidity_in H H outHumidity humidity_out H H windSpeed wind_speed H H windDir wind_dir H H windGust wind_gust H H rain rain D D rain_total H H rainRate S S dewpoint dewpoint H S windchill windchill H S heatindex heatindex H S radiation<sup>1</sup> radiation D D luminosity<sup>1</sup> luminosity H H rxCheckPercent signal H outTempBatteryStatus battery H <p> <sup>1</sup> The radiation data are available only from 30xx stations. These stations include a luminosity sensor, from which the radiation is approximated. </p> <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/te923/","title":"TE923","text":"<p>Some station models will recognize up to 5 remote temperature/humidity sensor units. Use the hardware switch in each sensor unit to identify sensors. Use the <code>sensor_map</code> in <code>weewx.conf</code> to associate each sensor with a database field. </p> <p>The station has either 208 or 3442 history records, depending on the model. With an archive interval set to 5 minutes, that is just over a day (208 records) or about 23 days (3442 records).</p> <p>The TE923 driver will read history records from the station when WeeWX starts up, but it does not support hardware record generation.</p>"},{"location":"hardware/te923/#te923_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The TE923 can be configured with the utility <code>weectl device</code>.</p> <p>Note</p> <p>Make sure you stop <code>weewxd</code> before running <code>weectl device</code>.</p>"},{"location":"hardware/te923/#te923_help","title":"<code>--help</code>","text":"<p>Invoking <code>weectl device</code> with the <code>--help</code> option</p> <pre><code>weectl device /home/weewx/weewx.conf --help\n</code></pre> <p>will produce something like this:</p> <pre><code>Using configuration file /home/weewx/weewx.conf\nUsing TE923 driver version 0.21 (weewx.drivers.te923)\nUsage: weectl device [config_file] [options] [--debug] [--help]\n\nConfiguration utility for weewx devices.\n\nOptions:\n-h, --help            show this help message and exit\n--debug               display diagnostic information while running\n-y                    answer yes to every prompt\n--info                display weather station configuration\n--current             get the current weather conditions\n--history=N           display N history records\n--history-since=N     display history records since N minutes ago\n--minmax              display historical min/max data\n--get-date            display station date\n--set-date=YEAR,MONTH,DAY\nset station date\n--sync-date           set station date using system clock\n--get-location-local  display local location and timezone\n--set-location-local=CITY|USR,LONG_DEG,LONG_MIN,E|W,LAT_DEG,LAT_MIN,N|S,TZ,DST\nset local location and timezone\n--get-location-alt    display alternate location and timezone\n--set-location-alt=CITY|USR,LONG_DEG,LONG_MIN,E|W,LAT_DEG,LAT_MIN,N|S,TZ,DST\nset alternate location and timezone\n--get-altitude        display altitude\n--set-altitude=ALT    set altitude (meters)\n--get-alarms          display alarms\n--set-alarms=WEEKDAY,SINGLE,PRE_ALARM,SNOOZE,MAXTEMP,MINTEMP,RAIN,WIND,GUST\nset alarm state\n--get-interval        display archive interval\n--set-interval=INTERVAL\nset archive interval (minutes)\n--format=FORMAT       formats include: table, dict\n\nBe sure to stop weewx first before using. Mutating actions will request\nconfirmation before proceeding.\n</code></pre>"},{"location":"hardware/te923/#te923_info","title":"<code>--info</code>","text":"<p>Use <code>--info</code> to display the station configuration:</p> <pre><code>weectl device --info\n</code></pre> <p>This will result in something like:</p> <pre><code>Querying the station for the configuration...\naltitude: 16\nbat_1: True\nbat_2: True\nbat_3: True\nbat_4: True\nbat_5: True\nbat_rain: True\nbat_uv: False\nbat_wind: True\nlatitude: 43.35\nlongitude: -72.0\nversion_bar: 23\nversion_rcc: 16\nversion_sys: 41\nversion_uv: 20\nversion_wind: 38\n</code></pre>"},{"location":"hardware/te923/#te923_current","title":"<code>--current</code>","text":"<p>Use <code>--current</code> to display the current status of each sensor:</p> <pre><code>weectl device --current\n</code></pre> <p>This will result in something like:</p> <pre><code>Querying the station for current weather data...\ndateTime: 1454615168\nforecast: 5\nh_1: 41\nh_1_state: ok\nh_2: 48\nh_2_state: ok\nh_3: None\nh_3_state: no_link\nh_4: None\nh_4_state: no_link\nh_5: None\nh_5_state: no_link\nh_in: 44\nh_in_state: ok\nrain: 2723\nrain_state: ok\nslp: 1012.4375\nslp_state: ok\nstorm: 0\nt_1: 13.9\nt_1_state: ok\nt_2: 21.5\nt_2_state: ok\nt_3: None\nt_3_state: no_link\nt_4: None\nt_4_state: no_link\nt_5: None\nt_5_state: no_link\nt_in: 22.85\nt_in_state: ok\nuv: None\nuv_state: no_link\nwindchill: None\nwindchill_state: invalid\nwinddir: 12\nwinddir_state: invalid\nwindgust: None\nwindgust_state: invalid\nwindspeed: None\nwindspeed_state: invalid\n</code></pre>"},{"location":"hardware/te923/#te923_set_interval","title":"<code>--set-interval</code>","text":"<p>TE923 stations ship from the factory with an archive interval of 1 hour (3600 seconds). To change the station's interval to 5 minutes (300 seconds), do the following:</p> <pre><code>weectl device --set-interval=300\n</code></pre>"},{"location":"hardware/te923/#te923_history","title":"<code>--history=N</code>","text":"<p>Use the <code>--history</code> action to display records from the logger in tabular or dictionary format.</p> <p>For example, to display the most recent 30 records in dictionary format:</p> <pre><code>weectl device --history=30 --format=dict\n</code></pre>"},{"location":"hardware/te923/#te923_clear_memory","title":"<code>--clear-memory</code>","text":"<p>Use <code>--clear-memory</code> to erase all records from the logger memory.</p>"},{"location":"hardware/te923/#te923_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> TE923 station data Database Field Observation Loop Archive barometer barometer H H pressure S S altimeter S S inTemp t_in H H inHumidity h_in H H outTemp t_1 H H outHumidity h_1 H H outTempBatteryStatus bat_1 H outLinkStatus link_1 H windSpeed windspeed H H windDir winddir H H windGust windgust H H windBatteryStatus bat_wind H windLinkStatus link_wind H rain rain D D rain_total H H rainBatteryStatus bat_rain H rainLinkStatus link_rain H rainRate S S dewpoint S S windchill windchill H H heatindex S S UV<sup>1</sup> uv H H uvBatteryStatus bat_uv H uvLinkStatus link_uv H extraTemp1 t_2 H H extraHumid1 h_2 H H extraBatteryStatus1 bat_2 H extraLinkStatus1 link_2 H extraTemp2 t_3 H H extraHumid2 h_3 H H extraBatteryStatus2 bat_3 H extraLinkStatus2 link_3 H extraTemp3 t_4 H H extraHumid3 h_4 H H extraBatteryStatus3 bat_4 H extraLinkStatus3 link_4 H extraTemp4 t_5 H H extraHumid4 h_5 H H extraBatteryStatus4 bat_5 H extraLinkStatus4 link_5 H <p> Some stations support up to 5 remote temperature/humidity sensors. </p> <p> <sup>1</sup> The UV data are available only with the optional solar radiation sensor. </p> <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/ultimeter/","title":"Ultimeter","text":"<p>The Ultimeter driver operates the Ultimeter in Data Logger Mode, which results in sensor readings every 1/2 second or so.</p> <p>The Ultimeter driver ignores the maximum, minimum, and average values recorded by the station.</p>"},{"location":"hardware/ultimeter/#ultimeter_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The Ultimeter stations cannot be configured with the utility <code>weectl device</code>.</p>"},{"location":"hardware/ultimeter/#ultimeter_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> Ultimeter station data Database Field Observation Loop Archive barometer<sup>2</sup> barometer H pressure<sup>2</sup> S altimeter<sup>2</sup> S inTemp<sup>2</sup> temperature_in H outTemp temperature_out H inHumidity<sup>2</sup> humidity_in H outHumidity humidity_out H windSpeed wind_speed H windDir wind_dir H rain<sup>1</sup> rain D rain_total H rainRate<sup>1</sup> S dewpoint S windchill S heatindex S <p> <sup>1</sup> The rain and     rainRate are     available only on stations with the optional rain sensor. </p> <p> <sup>2</sup> Pressure, inside temperature, and inside humidity     data are not available on all types of Ultimeter stations. </p> <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/vantage/","title":"Vantage","text":"<p>The Davis Vantage stations include a variety of models and configurations. The WeeWX driver can communicate with a console or envoy using serial, USB, or TCP/IP interface.</p>"},{"location":"hardware/vantage/#vantage_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The Vantage stations can be configured with the utility <code>weectl device</code>.</p> <p>Note</p> <p>Make sure you stop <code>weewxd</code> before running <code>weectl device</code>.</p>"},{"location":"hardware/vantage/#vantage_help","title":"<code>--help</code>","text":"<p>Invoking <code>weectl device</code> with the <code>--help</code> option</p> <pre><code>weectl device /home/weewx/weewx.conf --help\n</code></pre> <p>will produce something like this:</p> <pre><code>Using configuration file /home/weewx-user/weewx-data/weewx.conf\nUsing driver weewx.drivers.vantage.\nUsing Vantage driver version 3.6.2 (weewx.drivers.vantage)\nUsage: weectl device --help\n       weectl device --info [config_file]\n       weectl device --current [config_file]\n       weectl device --clear-memory [config_file] [-y]\n       weectl device --set-interval=MINUTES [config_file] [-y]\n       weectl device --set-latitude=DEGREE [config_file] [-y]\n       weectl device --set-longitude=DEGREE [config_file] [-y]\n       weectl device --set-altitude=FEET [config_file] [-y]\n       weectl device --set-barometer=inHg [config_file] [-y]\n       weectl device --set-wind-cup=CODE [config_file] [-y]\n       weectl device --set-bucket=CODE [config_file] [-y]\n       weectl device --set-rain-year-start=MM [config_file] [-y]\n       weectl device --set-offset=VARIABLE,OFFSET [config_file] [-y]\n       weectl device --set-transmitter-type=CHANNEL,TYPE,TEMP,HUM,REPEATER_ID [config_file] [-y]\n       weectl device --set-retransmit=[OFF|ON|ON,CHANNEL] [config_file] [-y]\n       weectl device --set-temperature-logging=[LAST|AVERAGE] [config_file] [-y]\n       weectl device --set-time [config_file] [-y]\n       weectl device --set-dst=[AUTO|ON|OFF] [config_file] [-y]\n       weectl device --set-tz-code=TZCODE [config_file] [-y]\n       weectl device --set-tz-offset=HHMM [config_file] [-y]\n       weectl device --set-lamp=[ON|OFF] [config_file]\n       weectl device --dump [--batch-size=BATCH_SIZE] [config_file] [-y]\n       weectl device --logger-summary=FILE [config_file] [-y]\n       weectl device [--start | --stop] [config_file]\n\nConfigures the Davis Vantage weather station.\n\nOptions:\n  -h, --help            show this help message and exit\n  --debug               display diagnostic information while running\n  -y                    answer yes to every prompt\n  --info                To print configuration, reception, and barometer\n                        calibration information about your weather station.\n  --current             To print current LOOP information.\n  --clear-memory        To clear the memory of your weather station.\n  --set-interval=MINUTES\n                        Sets the archive interval to the specified number of\n                        minutes. Valid values are 1, 5, 10, 15, 30, 60, or\n                        120.\n  --set-latitude=DEGREE\n                        Sets the latitude of the station to the specified\n                        number of tenth degree.\n  --set-longitude=DEGREE\n                        Sets the longitude of the station to the specified\n                        number of tenth degree.\n  --set-altitude=FEET   Sets the altitude of the station to the specified\n                        number of feet.\n  --set-barometer=inHg  Sets the barometer reading of the station to a known\n                        correct value in inches of mercury. Specify 0 (zero)\n                        to have the console pick a sensible value.\n  --set-wind-cup=CODE   Set the type of wind cup. Specify '0' for small size;\n                        '1' for large size\n  --set-bucket=CODE     Set the type of rain bucket. Specify '0' for 0.01\n                        inches; '1' for 0.2 mm; '2' for 0.1 mm\n  --set-rain-year-start=MM\n                        Set the rain year start (1=Jan, 2=Feb, etc.).\n  --set-offset=VARIABLE,OFFSET\n                        Set the onboard offset for VARIABLE inTemp, outTemp,\n                        extraTemp[1-7], inHumid, outHumid, extraHumid[1-7],\n                        soilTemp[1-4], leafTemp[1-4], windDir) to OFFSET\n                        (Fahrenheit, %, degrees)\n  --set-transmitter-type=CHANNEL,TYPE,TEMP,HUM,REPEATER_ID\n                        Set the transmitter type for CHANNEL (1-8), TYPE\n                        (0=iss, 1=temp, 2=hum, 3=temp_hum, 4=wind, 5=rain,\n                        6=leaf, 7=soil, 8=leaf_soil, 9=sensorlink, 10=none),\n                        as extra TEMP station and extra HUM station (both 1-7,\n                        if applicable), REPEATER_ID (A-H, or 0=OFF)\n  --set-retransmit=OFF|ON|ON,CHANNEL\n                        Turn ISS retransmit 'ON' or 'OFF', using optional CHANNEL.\n  --set-temperature-logging=LAST|AVERAGE\n                        Set console temperature logging to either 'LAST' or\n                        'AVERAGE'.\n  --set-time            Set the onboard clock to the current time.\n  --set-dst=AUTO|ON|OFF\n                        Set DST to 'ON', 'OFF', or 'AUTO'\n  --set-tz-code=TZCODE  Set timezone code to TZCODE. See your Vantage manual\n                        for valid codes.\n  --set-tz-offset=HHMM  Set timezone offset to HHMM. E.g. '-0800' for U.S.\n                        Pacific Time.\n  --set-lamp=ON|OFF     Turn the console lamp 'ON' or 'OFF'.\n  --dump                Dump all data to the archive. NB: This may result in\n                        many duplicate primary key errors.\n  --batch-size=BATCH_SIZE\n                        Use with option --dump. Pages are read off the console\n                        in batches of BATCH_SIZE. A BATCH_SIZE of zero means\n                        dump all data first, then put it in the database. This\n                        can improve performance in high-latency environments,\n                        but requires sufficient memory to hold all station\n                        data. Default is 1 (one).\n  --logger-summary=FILE\n                        Save diagnostic summary to FILE (for debugging the\n                        logger).\n  --start               Start the logger.\n  --stop                Stop the logger.\n\nBe sure to stop weewxd first before using. Mutating actions will request\nconfirmation before proceeding.\n</code></pre>"},{"location":"hardware/vantage/#vantage_info","title":"<code>--info</code>","text":"<p>Use the <code>--info</code> option to display the current EEPROM settings:</p> <pre><code>weectl device --info\n</code></pre> <p>This will result in something like:</p> <pre>\nUsing configuration file /home/weewx/weewx.conf\nUsing driver weewx.drivers.vantage.\nUsing Vantage driver version 3.6.2 (weewx.drivers.vantage)\nQuerying...\nDavis Vantage EEPROM settings:\n\n    CONSOLE TYPE:                   Vantage Pro2\n\n    CONSOLE FIRMWARE:\n      Date:                         Dec 11 2012\n      Version:                      3.12\n\n    CONSOLE SETTINGS:\n      Archive interval:             300 (seconds)\n      Altitude:                     700 (foot)\n      Wind cup type:                large\n      Rain bucket type:             0.01 inches\n      Rain year start:              10\n      Onboard time:                 2023-05-01 07:35:25\n\n    CONSOLE DISPLAY UNITS:\n      Barometer:                    mbar\n      Temperature:                  degree_F\n      Rain:                         inch\n      Wind:                         mile_per_hour\n\n    CONSOLE STATION INFO:\n      Latitude (onboard):           +46.0\n      Longitude (onboard):          -121.6\n      Use manual or auto DST?       AUTO\n      DST setting:                  N/A\n      Use GMT offset or zone code?  ZONE_CODE\n      Time zone code:               4\n      GMT offset:                   N/A\n      Temperature logging:          AVERAGE\n\n    TRANSMITTERS:\n      Channel   Receive     Retransmit  Repeater  Type\n         1      inactive    N           NONE      iss\n         2      inactive    N           NONE      (N/A)\n         3      active      N           NONE      temp (as extra temperature 1)\n         4      active      N           8         temp_hum (as extra temperature 4 and extra humidity 1)\n         5      inactive    N           NONE      (N/A)\n         6      inactive    Y           NONE      (N/A)\n         7      inactive    N           NONE      (N/A)\n         8      inactive    N           NONE      (N/A)\n\n    RECEPTION STATS:\n      Total packets received:       2895\n      Total packets missed:         82\n      Number of resynchronizations: 0\n      Longest good stretch:         330\n      Number of CRC errors:         134\n\n    BAROMETER CALIBRATION DATA:\n      Current barometer reading:    29.821 inHg\n      Altitude:                     700 feet\n      Dew point:                    43 F\n      Virtual temperature:          56 F\n      Humidity correction factor:   1.7\n      Correction ratio:             1.026\n      Correction constant:          +0.036 inHg\n      Gain:                         0.000\n      Offset:                       -47.000\n\n    OFFSETS:\n      Wind direction:               +0 deg\n      Inside Temperature:           +0.0 F\n      Inside Humidity:              +0 %\n      Outside Temperature:          +0.0 F\n      Outside Humidity:             +0 %\n      Extra Temperature 1:          +0.0 F\n      Extra Temperature 4:          +0.0 F\n      Extra Humidity 1:             +0.0 F\n</pre> <p>The console version number is available only on consoles with firmware dates after about 2006.</p> <p>Highlighted values can be modified using the commands below.</p>"},{"location":"hardware/vantage/#vantage_current","title":"<code>--current</code>","text":"<p>This command will print a single LOOP packet.</p>"},{"location":"hardware/vantage/#vantage_clear_console_memory","title":"<code>--clear-memory</code>","text":"<p>This command will clear the logger memory after asking for confirmation.</p>"},{"location":"hardware/vantage/#vantage_archive_interval","title":"<code>--set-interval=N</code>","text":"<p>Use this command to change the archive interval of the internal logger. Valid intervals are 1, 5, 10, 15, 30, 60, or 120 minutes. However, if you are ftp'ing lots of files to a server, setting it to one minute may not give enough time to have them all uploaded before the next archive record is due. If this is the case, you should pick a longer archive interval, or trim the number of files you are using.</p> <p>An archive interval of five minutes works well for the Vantage stations. Because of the large amount of onboard memory they carry, going to a larger interval does not have any real advantages.</p> <p>Example: change the archive interval to 10 minutes:</p> <pre><code>weectl device --set-interval=10\n</code></pre>"},{"location":"hardware/vantage/#-set-altituden","title":"<code>--set-altitude=N</code>","text":"<p>Use this command to set the console's stored altitude. The altitude must be in feet.</p> <p>Example: change the altitude to 700 feet:</p> <pre><code>weectl device --set-altitude=700\n</code></pre>"},{"location":"hardware/vantage/#-set-barometern","title":"<code>--set-barometer=N</code>","text":"<p>Use this command to calibrate the barometer in your Vantage weather station. To use it, you must have a known correct barometer reading for your altitude. In practice, you will either have to move your console to a known-correct station (perhaps a nearby airport) and perform the calibration there, or reduce the barometer reading to your altitude. Otherwise, specify the value zero and the station will pick a sensible value.</p> <p>The barometer value must be in inches of Mercury.</p>"},{"location":"hardware/vantage/#vantage_rain_bucket_type","title":"<code>--set-bucket</code>","text":"<p>Normally, this is set by Davis, but if you have replaced your bucket with a different kind, you might want to reconfigure. For example, to change to a 0.1 mm bucket (bucket code <code>2</code>), use the following:</p> <pre><code>weectl device --set-bucket=2\n</code></pre>"},{"location":"hardware/vantage/#-set-rain-year-start","title":"<code>--set-rain-year-start</code>","text":"<p>The Davis Vantage series allows the start of the rain year to be something other than 1 January.</p> <p>For example, to set it to 1 October:</p> <pre><code>weectl device --set-rain-year-start=10\n</code></pre>"},{"location":"hardware/vantage/#vantage_setting_offsets","title":"<code>--set-offset</code>","text":"<p>The Davis instruments can correct sensor errors by adding an offset to their emitted values. This is particularly useful for Southern Hemisphere users. Davis fits the wind vane to the Integrated Sensor Suite (ISS) in a position optimized for Northern Hemisphere users, who face the solar panel to the south. Users south of the equator must orient the ISS's solar panel to the north to get maximal insolation, resulting in a 180\u00b0 error in the wind direction. The solution is to add a 180\u00b0 offset correction. You can do this with the following command:</p> <pre><code>weectl device --set-offset=windDir,180\n</code></pre>"},{"location":"hardware/vantage/#vantage_configuring_additional_sensors","title":"<code>--set-transmitter-type</code>","text":"<p>If you have additional sensors and/or repeaters for your Vantage station, you can configure them using your console. However, if you have a Davis Weather Envoy, it will not have a console! As an alternative, <code>weectl device</code> can do this using the command <code>--set-transmitter-type</code>.</p> <p>For example, to add an extra temperature sensor to channel 3 and no repeater is used, do the following:</p> <pre><code>weectl device --set-transmitter-type=3,1,2\n</code></pre> <p>This says to turn on channel 3, set its type to 1 (\"Temperature only\"), and it will show up in the database as <code>extraTemp2</code>. No repeater id was specified, so it defaults to \"no repeater.\"</p> <p>Here's another example, this time for a combined temperature / humidity sensor retransmitted via repeater A:</p> <pre><code>weectl device --set-transmitter-type=5,3,2,4,a\n</code></pre> <p>This will add the combined sensor to channel 5, set its type to 3 (\"Temperature and humidity\"), via Repeater A, and it will show up in the database as <code>extraTemp2</code> and <code>extraHumid4</code>.</p> <p>The <code>--help</code> option will give you the code for each sensor type and repeater id.</p> <p>If you have to use repeaters with your Vantage Pro2 station, please take a look at Installing Repeater Networks for Vantage Pro2 for how to set them up.</p>"},{"location":"hardware/vantage/#vantage_retransmit","title":"<code>--set-retransmit</code>","text":"<p>Use this command to tell your console whether to act as a retransmitter of ISS data.</p> <p>Example: Tell your console to retransmit ISS data using the first available channel:</p> <pre><code>weectl device --set-retransmit=on\n</code></pre> <p>Example: Tell your console to retransmit ISS data on channel 4:</p> <pre><code>weectl device --set-retransmit=on,4\n</code></pre> <p>Warning</p> <p>You can use only channels not actively used for reception. The command checks for this and will not accept channel numbers actively used for reception of sensor stations.</p> <p>Example: Tell your console to turn retransmission 'OFF':</p> <pre><code>weectl device --set-retransmit=off\n</code></pre>"},{"location":"hardware/vantage/#-set-dst","title":"<code>--set-dst</code>","text":"<p>Use the command to tell your console whether daylight savings time is in effect, or to have it set automatically based on the time zone.</p>"},{"location":"hardware/vantage/#vantage_time_zone","title":"<code>--set-tz-code</code>","text":"<p>This command can be used to change the time zone. Consult the Vantage manual for the code that corresponds to your time zone.</p> <p>For example, to set the time zone code to Central European Time (code 20):</p> <pre><code>weectl device --set-tz-code=20\n</code></pre> <p>Warning</p> <p>You can set either the time zone code or the time zone offset, but not both.</p>"},{"location":"hardware/vantage/#-set-tz-offset","title":"<code>--set-tz-offset</code>","text":"<p>If you live in an odd time zone that is perhaps not covered by the \"canned\" Davis time zones, you can set the offset from UTC using this command.</p> <p>For example, to set the time zone offset for Newfoundland Standard Time (UTC-03:30), use the following:</p> <pre><code>weectl device --set-tz-offset=-0330\n</code></pre> <p>Warning</p> <p>You can set either the time zone code or the time zone offset, but not both.</p>"},{"location":"hardware/vantage/#-set-lamp","title":"<code>--set-lamp</code>","text":"<p>Use this command to turn the console lamp on or off.</p>"},{"location":"hardware/vantage/#vantage_dumping_the_logger_memory","title":"<code>--dump</code>","text":"<p>Generally, WeeWX downloads only new archive records from the on-board logger in the Vantage. However, occasionally the memory in the Vantage will get corrupted, making this impossible. See the section WeeWX generates HTML pages, but it does not update them in the Wiki. The fix involves clearing the memory but, unfortunately, this means you may lose any data which might have accumulated in the logger memory, but not yet downloaded. By using the <code>--dump</code> command before clearing the memory, you might be able to save these data. </p> <p>Stop WeeWX first, then</p> <pre><code>weectl device --dump\n</code></pre> <p>This will dump all data archived in the Vantage memory directly to the database, without regard to whether or not they have been seen before. Because the command dumps all data, it may result in many duplicate primary key errors. These can be ignored.</p>"},{"location":"hardware/vantage/#-logger-summary","title":"<code>--logger-summary</code>","text":"<p>This command is useful for debugging the console logger. It will scan the logger memory, recording the timestamp in each page and index slot to the file <code>FILE</code>.</p> <p>Example:</p> <pre><code>weectl device --logger-summary=/var/tmp/summary.txt\n</code></pre>"},{"location":"hardware/vantage/#-start","title":"<code>--start</code>","text":"<p>Use this command to start the logger. There are occasions when an out-of-the-box logger needs this command.</p>"},{"location":"hardware/vantage/#-stop","title":"<code>--stop</code>","text":"<p>Use this command to stop the logger. This can be useful when servicing your weather station, and you don't want any bad data to be stored in the logger.</p>"},{"location":"hardware/vantage/#vantage_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> Vantage station data Database Field Observation Loop Archive barometer barometer H H pressure S S altimeter S S inTemp inTemp H H outTemp outTemp H H inHumidity inHumidity H H outHumidity outHumidity H H windSpeed windSpeed H H windDir windDir H H windGust windGust H H windGustDir windGustDir H H rain rain D H monthRain H H rainRate rainRate H H dewpoint S S windchill S S heatindex S S radiation radiation H H UV UV H H extraTemp1 extraTemp1 H H extraTemp2 extraTemp2 H H extraTemp3 extraTemp3 H H extraTemp4 extraTemp4 H extraTemp5 extraTemp5 H extraTemp6 extraTemp6 H extraTemp7 extraTemp7 H soilTemp1 soilTemp1 H H soilTemp2 soilTemp2 H H soilTemp3 soilTemp3 H H soilTemp4 soilTemp4 H H leafTemp1 leafTemp1 H H leafTemp2 leafTemp2 H H leafTemp3 leafTemp3 H H leafTemp4 leafTemp4 H H extraHumid1 extraHumid1 H H extraHumid2 extraHumid2 H H extraHumid3 extraHumid3 H extraHumid4 extraHumid4 H extraHumid5 extraHumid5 H extraHumid6 extraHumid6 H extraHumid7 extraHumid7 H soilMoist1 soilMoist1 H H soilMoist2 soilMoist2 H H soilMoist3 soilMoist3 H H soilMoist4 soilMoist4 H H leafWet1 leafWet1 H H leafWet2 leafWet2 H H leafWet3 leafWet3 H H leafWet4 leafWet4 H H txBatteryStatus txBatteryStatus H H consBatteryVoltage consBatteryVoltage H H wind_samples H <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/wmr100/","title":"WMR100","text":"<p>The station emits partial packets, which may confuse some online services.</p>"},{"location":"hardware/wmr100/#wmr100_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The WMR100 stations cannot be configured with the utility <code>weectl device</code>.</p>"},{"location":"hardware/wmr100/#wmr100_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> WMR100 station data Database Field Observation Loop Archive barometer S pressure pressure H altimeter S inTemp temperature_0 H outTemp temperature_1 H inHumidity humidity_0 H outHumidity humidity_1 H windSpeed wind_speed H windDir wind_dir H windGust wind_gust H rain rain D rain_total H rainRate rain_rate H dewpoint S windchill S heatindex S extraTemp1 temperature_2 H extraTemp2 temperature_3 H extraTemp3 temperature_4 H extraTemp4 temperature_5 H extraTemp5 temperature_6 H extraTemp6 temperature_7 H extraTemp7 temperature_8 H extraHumid1 humidity_2 H extraHumid2 humidity_3 H extraHumid3 humidity_4 H extraHumid4 humidity_5 H extraHumid5 humidity_6 H extraHumid6 humidity_7 H extraHumid7 humidity_8 H UV uv H inTempBatteryStatus battery_status_0 H outTempBatteryStatus battery_status_1 H rainBatteryStatus rain_battery_status H windBatteryStatus wind_battery_status H uvBatteryStatus uv_battery_status H extraBatteryStatus1 battery_status_2 H extraBatteryStatus2 battery_status_3 H extraBatteryStatus3 battery_status_4 H extraBatteryStatus4 battery_status_5 H extraBatteryStatus5 battery_status_6 H extraBatteryStatus6 battery_status_7 H extraBatteryStatus7 battery_status_8 H <p> Each packet contains a subset of all possible readings. For example, a temperature packet contains temperature_N and battery_status_N, a rain packet contains rain_total and rain_rate. </p> <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/wmr300/","title":"WMR300","text":"<p>A single WMR300 console supports 1 wind, 1 rain, 1 UV, and up to 8 temperature/humidity sensors.</p> <p>The WMR300 sensors send at different rates:</p> WMR300 transmission periods sensorperiod Wind2.5 to 3 seconds T/H10 to 12 seconds Rain20 to 24 seconds <p>The console contains the pressure sensor.  The console reports pressure every 15 minutes.</p> <p>The station emits partial packets, which may confuse some online services.</p> <p>The rain counter has a limit of 400 inches (10160 mm).  The counter does not wrap around; it must be reset when it hits the limit, otherwise additional rain data will not be recorded.</p> <p>The logger stores about 50,000 records.  When the logger fills up, it stops recording data.</p> <p>When WeeWX starts up it will attempt to download all records from the console since the last record in the archive database. This can take as much as couple of hours, depending on the number of records in the logger and the speed of the computer and disk.</p>"},{"location":"hardware/wmr300/#wrm300_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The WMR300 stations cannot be configured with the utility <code>weectl device</code>.</p>"},{"location":"hardware/wmr300/#wmr300_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> WMR300 station data Database Field Observation Loop Archive barometer barometer H H pressure pressure H S altimeter S S inTemp temperature_0 H H inHumidity humidity_0 H H windSpeed wind_avg H H windDir wind_dir H H windGust wind_gust H H windGustDir wind_gust_dir H H rain rain D D rain_total H H rainRate rain_rate H H outTemp temperature_1 H H outHumidity humidity_1 H H dewpoint dewpoint_1 H H heatindex heatindex_1 H H windchill windchill H H extraTemp1 temperature_2 H H extraHumid1 humidity_2 H H extraDewpoint1 dewpoint_2 H H extraHeatindex1 heatindex_2 H H extraTemp2 temperature_3 H H extraHumid2 humidity_3 H H extraDewpoint2 dewpoint_3 H H extraHeatindex2 heatindex_3 H H extraTemp3 temperature_4 H H extraHumid3 humidity_4 H H extraDewpoint3 dewpoint_4 H H extraHeatindex3 heatindex_4 H H extraTemp4 temperature_5 H H extraHumid4 humidity_5 H H extraDewpoint4 dewpoint_5 H H extraHeatindex4 heatindex_5 H H extraTemp5 temperature_6 H H extraHumid5 humidity_6 H H extraDewpoint5 dewpoint_6 H H extraHeatindex5 heatindex_6 H H extraTemp6 temperature_7 H H extraHumid6 humidity_7 H H extraDewpoint6 dewpoint_7 H H extraHeatindex6 heatindex_7 H H extraTemp7 temperature_8 H H extraHumid7 humidity_8 H H extraDewpoint7 dewpoint_8 H H extraHeatindex7 heatindex_8 H H <p>     Each packet contains a subset of all possible readings. </p> <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/wmr9x8/","title":"WMR9x8","text":"<p>The station includes a data logger, but the driver does not read records from the station.</p> <p>The station emits partial packets, which may confuse some online services.</p>"},{"location":"hardware/wmr9x8/#wmr9x8_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The WMR9x8 stations cannot be configured with the utility <code>weectl device</code>.</p>"},{"location":"hardware/wmr9x8/#wmr9x8_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> WMR9x8 station data Database Field Observation Loop Archive barometer barometer H pressure pressure H altimeter S inTemp temperature_in H outTemp temperature_out H inHumidity humidity_in H outHumidity humidity_out H windSpeed wind_speed H windDir wind_dir H windGust wind_gust H windGustDir wind_gust_dir H rain rain D rain_total H rainRate rain_rate H inDewpoint dewpoint_in H dewpoint dewpoint_out H windchill windchill H heatindex S UV uv H extraTemp1 temperature_1 H extraTemp2 temperature_2 H extraTemp3 temperature_3 H extraTemp4 temperature_4 H extraTemp5 temperature_5 H extraTemp6 temperature_6 H extraTemp7 temperature_7 H extraTemp8 temperature_8 H extraHumid1 humidity_1 H extraHumid2 humidity_3 H extraHumid3 humidity_3 H extraHumid4 humidity_4 H extraHumid5 humidity_5 H extraHumid6 humidity_6 H extraHumid7 humidity_7 H extraHumid8 humidity_8 H inTempBatteryStatus battery_status_in H outTempBatteryStatus battery_status_out H rainBatteryStatus rain_battery_status H windBatteryStatus wind_battery_status H extraBatteryStatus1 battery_status_1 H extraBatteryStatus2 battery_status_2 H extraBatteryStatus3 battery_status_3 H extraBatteryStatus4 battery_status_4 H extraBatteryStatus5 battery_status_5 H extraBatteryStatus6 battery_status_6 H extraBatteryStatus7 battery_status_7 H extraBatteryStatus8 battery_status_8 H <p>     Each packet contains a subset of all possible readings. For     example, a temperature packet contains     temperature_N and     battery_status_N, a rain packet contains     rain_total and     rain_rate. </p> <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/ws1/","title":"WS1","text":"<p>The WS1 stations produce data every 1/2 second or so.</p>"},{"location":"hardware/ws1/#ws1_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The WS1 stations cannot be configured with the utility <code>weectl device</code>.</p>"},{"location":"hardware/ws1/#ws1_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> WS1 station data Database Field Observation Loop Archive barometer S pressure pressure H altimeter S inTemp temperature_in H outTemp temperature_out H inHumidity humidity_in H outHumidity humidity_out H windSpeed wind_speed H windDir wind_dir H rain rain D rain_total H rainRate S dewpoint S windchill S heatindex S <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/ws23xx/","title":"WS23xx","text":"<p>The hardware interface is a serial port, but USB-serial converters can be used with computers that have no serial port. Beware that not every type of USB-serial converter will work. Converters based on ATEN UC-232A chipset are known to work.</p> <p>The station does not record wind gust or wind gust direction.</p> <p>The hardware calculates windchill and dewpoint.</p> <p>Sensors can be connected to the console with a wire.  If not wired, the sensors will communicate via a wireless interface.  When connected by wire, some sensor data are transmitted every 8 seconds.  With wireless, data are transmitted every 16 to 128 seconds, depending on wind speed and rain activity.</p> WS23xx transmission periods sensorperiod Wind 32 seconds when wind &gt; 22.36 mph (wireless)         128 seconds when wind &gt; 22.36 mph (wireless)         10 minutes (wireless after 5 failed attempts)         8 seconds (wired)      Temperature15 seconds Humidity20 seconds Pressure15 seconds <p>The station has 175 history records. That is just over 7 days of data with the factory default history recording interval of 60 minutes, or about 14 hours with a recording interval of 5 minutes.</p> <p>When WeeWX starts up it will attempt to download all records from the console since the last record in the archive database.</p>"},{"location":"hardware/ws23xx/#ws23xx_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The WS23xx stations can be configured with the utility <code>weectl device</code>.</p> <p>Note</p> <p>Make sure you stop <code>weewxd</code> before running <code>weectl device</code>.</p>"},{"location":"hardware/ws23xx/#ws23xx_help","title":"<code>--help</code>","text":"<p>Invoking <code>weectl device</code> with the <code>--help</code> option</p> <pre><code>weectl device --help\n</code></pre> <p>will produce something like this:</p> <pre><code>  WS23xx driver version 0.21\n  Usage: weectl device [config_file] [options] [--debug] [--help]\n\n  Configuration utility for weewx devices.\n\n  Options:\n  -h, --help         show this help message and exit\n  --debug            display diagnostic information while running\n  -y                 answer yes to every prompt\n  --info             display weather station configuration\n  --current          get the current weather conditions\n  --history=N        display N history records\n  --history-since=N  display history records since N minutes ago\n  --clear-memory     clear station memory\n  --set-time         set the station clock to the current time\n  --set-interval=N   set the station archive interval to N minutes\n\n  Mutating actions will request confirmation before proceeding.\n</code></pre>"},{"location":"hardware/ws23xx/#ws23xx_info","title":"<code>--info</code>","text":"<p>Display the station settings with the <code>--info</code> option.</p> <pre><code>weectl device --info\n</code></pre> <p>This will result in something like:</p> <pre><code>  buzzer: 0\n  connection time till connect: 1.5\n  connection type: 15\n  dew point: 8.88\n  dew point max: 18.26\n  dew point max alarm: 20.0\n  dew point max alarm active: 0\n  dew point max alarm set: 0\n  dew point max when: 978565200.0\n  dew point min: -2.88\n  dew point min alarm: 0.0\n  dew point min alarm active: 0\n  dew point min alarm set: 0\n  dew point min when: 978757260.0\n  forecast: 0\n  history interval: 5.0\n  history last record pointer: 8.0\n  history last sample when: 1385564760.0\n  history number of records: 175.0\n  history time till sample: 5.0\n  icon alarm active: 0\n  in humidity: 48.0\n</code></pre> <p>The line <code>history number of records</code> indicates how many records are in memory. The line <code>history interval</code> indicates the number of minutes between records.</p>"},{"location":"hardware/ws23xx/#ws23xx_set_interval","title":"<code>--set-interval</code>","text":"<p>WS23xx stations ship from the factory with an archive interval of 60 minutes (3600 seconds). To change the interval to 5 minutes, do the following:</p> <pre><code>weectl device --set-interval=5\n</code></pre> <p>Warning</p> <p>Changing the interval will clear the station memory.</p>"},{"location":"hardware/ws23xx/#ws23xx_history","title":"<code>--history</code>","text":"<p>WS23xx stations store records in a circular buffer \u2014 once the buffer fills, the oldest records are replaced by newer records. The console stores up to 175 records.</p> <p>For example, to display the latest 30 records from the console memory:</p> <pre><code>weectl device --history=30\n</code></pre>"},{"location":"hardware/ws23xx/#ws23xx_clear_memory","title":"<code>--clear-memory</code>","text":"<p>To clear the console memory:</p> <pre><code>weectl device --clear-memory\n</code></pre>"},{"location":"hardware/ws23xx/#ws23xx_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> WS23xx station data Database Field Observation Loop Archive barometer S S pressure pressure H H altimeter S S inTemp temperature_in H H outTemp temperature_out H H inHumidity humidity_in H H outHumidity humidity_out H H windSpeed wind_speed H H windDir wind_dir H H rain rain D D rain_total H H rainRate rain_rate H H dewpoint dewpoint H H windchill windchill H H heatindex S S <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"hardware/ws28xx/","title":"WS28xx","text":"<p>WeeWX communicates with a USB transceiver, which communicates with the station console, which in turn communicates with the sensors. The transceiver and console must be paired and synchronized.</p> <p>The sensors send data at different rates:</p> WS28xx transmission periods sensorperiod Wind17 seconds T/H13 seconds Rain19 seconds Pressure15 seconds <p>The wind and rain sensors transmit to the temperature/humidity device, then the temperature/humidity device retransmits to the weather station console. Pressure is measured by a sensor in the console.</p> <p>The station has 1797 history records. That is just over 6 days of data with an archive interval of 5 minutes.</p> <p>When WeeWX starts up it will attempt to download all records from the console since the last record in the archive database.</p> <p>The WS28xx driver sets the station archive interval to 5 minutes.</p> <p>The WS28xx driver does not support hardware archive record generation.</p>"},{"location":"hardware/ws28xx/#ws28xx_pairing","title":"Pairing","text":"<p>The console and transceiver must be paired. Pairing ensures that your transceiver is talking to your console, not your neighbor's console. Pairing should only have to be done once, although you might have to pair again after power cycling the console, for example after you replace the batteries.</p> <p>There are two ways to pair the console and the transceiver:</p> <ul> <li> <p>The WeeWX way. Be sure that WeeWX is not running. Run the configuration   utility, press and hold the [v] button on the console until you see 'PC'   in the display, then release the button. If the console pairs with the   transceiver, 'PC' will go away within a second or two. <pre><code>weectl device --pair\n\nPairing transceiver with console...\nPress and hold the [v] key until \"PC\" appears (attempt 1 of 3)\nTransceiver is paired to console\n</code></pre></p> </li> <li> <p>The HeavyWeather way. Follow the pairing instructions that came with the   station. You will have to run HeavyWeather on a Windows computer with the   USB transceiver. After HeavyWeather indicates the devices are paired, put   the USB transceiver in your WeeWX computer and start WeeWX. Do not power   cycle the station console, or you will have to start over.</p> </li> </ul> <p>If the console does not pair, you will see messages in the log such as this:</p> <pre><code>ws28xx: RFComm: message from console contains unknown device ID (id=165a resp=80 req=6)\n</code></pre> <p>Either approach to pairing may require multiple attempts.</p>"},{"location":"hardware/ws28xx/#ws28xx_synchronizing","title":"Synchronizing","text":"<p>After pairing, the transceiver and console must be synchronized in order to communicate. Synchronization will happen automatically at the top of each hour, or you can force synchronization by pressing the [SET] button momentarily. Do not press and hold the [SET] button \u2014 that modifies the console alarms.</p> <p>When the transceiver and console are synchronized, you will see lots of <code>ws28xx: RFComm</code> messages in the log when <code>debug=1</code>. When the devices are not synchronized, you will see messages like this about every 10 minutes:</p> <pre><code>Nov  7 19:12:17 raspi weewx[2335]: ws28xx: MainThread: no contact with console\n</code></pre> <p>If you see this, or if you see an extended gap in the weather data in the WeeWX plots, press momentarily the [SET] button, or wait until the top of the hour.</p> <p>When the transceiver has not received new data for awhile, you will see messages like this in the log:</p> <pre><code>Nov  7 19:12:17 raspi weewx[2335]: ws28xx: MainThread: no new weather data\n</code></pre> <p>If you see 'no new weather data' messages with the 'no contact with console' messages, it simply means that the transceiver has not been able to synchronize with the console. If you see only the 'no new weather data' messages, then the sensors are not communicating with the console, or the console may be defective.</p>"},{"location":"hardware/ws28xx/#ws28xx_alarms","title":"Alarms","text":"<p>When an alarm goes off, communication with the transceiver stops. The WS28xx driver clears all alarms in the station. It is better to create alarms in WeeWX, and the WeeWX alarms can do much more than the console alarms anyway.</p>"},{"location":"hardware/ws28xx/#ws28xx_configuration","title":"Configuring with <code>weectl device</code>","text":"<p>The WS28xx stations can be configured with the utility <code>weectl device</code>.</p> <p>Note</p> <p>Make sure you stop <code>weewxd</code> before running <code>weectl device</code>.</p>"},{"location":"hardware/ws28xx/#ws28xx_help","title":"<code>--help</code>","text":"<p>Invoking <code>weectl device</code> with the <code>--help</code> option</p> <pre><code>weectl device --help\n</code></pre> <p>will produce something like this:</p> <pre><code>  WS28xx driver version 0.33\n  Usage: weectl device [config_file] [options] [--debug] [--help]\n\n  Configuration utility for weewx devices.\n\n  Options:\n  -h, --help           show this help message and exit\n  --debug              display diagnostic information while running\n  -y                   answer yes to every prompt\n  --check-transceiver  check USB transceiver\n  --pair               pair the USB transceiver with station console\n  --info               display weather station configuration\n  --set-interval=N     set logging interval to N minutes\n  --current            get the current weather conditions\n  --history=N          display N history records\n  --history-since=N    display history records since N minutes ago\n  --maxtries=MAXTRIES  maximum number of retries, 0 indicates no max\n\n  Mutating actions will request confirmation before proceeding.\n</code></pre>"},{"location":"hardware/ws28xx/#-pair","title":"<code>--pair</code>","text":"<p>The console and transceiver must be paired. This can be done either by using this command, or by running the program HeavyWeather on a Windows PC.</p> <p>Be sure that WeeWX is not running. Run the command:</p> <pre><code>weectl device --pair\n\nPairing transceiver with console...\nPress and hold the [v] key until \"PC\" appears (attempt 1 of 3)\nTransceiver is paired to console\n</code></pre> <p>Press and hold the [v] button on the console until you see 'PC' in the display, then release the button. If the console pairs with the transceiver, 'PC' will go away within a second or two.</p> <p>If the console does not pair, you will see messages in the log such as this:</p> <pre><code>ws28xx: RFComm: message from console contains unknown device ID (id=165a resp=80 req=6)\n</code></pre> <p>Pairing may require multiple attempts.</p> <p>After pairing, the transceiver and console must be synchronized in order to communicate. This should happen automatically.</p>"},{"location":"hardware/ws28xx/#-info","title":"<code>--info</code>","text":"<p>Display the station settings with the <code>--info</code> option.</p> <pre><code>weectl device --info\n</code></pre> <p>This will result in something like:</p> <pre><code>  alarm_flags_other: 0\n  alarm_flags_wind_dir: 0\n  checksum_in: 1327\n  checksum_out: 1327\n  format_clock: 1\n  format_pressure: 0\n  format_rain: 1\n  format_temperature: 0\n  format_windspeed: 4\n  history_interval: 1\n  indoor_humidity_max: 70\n  indoor_humidity_max_time: None\n  indoor_humidity_min: 45\n  indoor_humidity_min_time: None\n  indoor_temp_max: 40.0\n  indoor_temp_max_time: None\n  indoor_temp_min: 0.0\n  indoor_temp_min_time: None\n  lcd_contrast: 4\n  low_battery_flags: 0\n  outdoor_humidity_max: 70\n  outdoor_humidity_max_time: None\n  outdoor_humidity_min: 45\n  outdoor_humidity_min_time: None\n  outdoor_temp_max: 40.0\n  outdoor_temp_max_time: None\n  outdoor_temp_min: 0.0\n  outdoor_temp_min_time: None\n  pressure_max: 1040.0\n  pressure_max_time: None\n  pressure_min: 960.0\n  pressure_min_time: None\n  rain_24h_max: 50.0\n  rain_24h_max_time: None\n  threshold_storm: 5\n  threshold_weather: 3\n  wind_gust_max: 12.874765625\n  wind_gust_max_time: None\n</code></pre>"},{"location":"hardware/ws28xx/#ws28xx_data","title":"Station data","text":"<p>The following table shows which data are provided by the station hardware and which are calculated by WeeWX.</p> WS28xx station data Database Field Observation Loop Archive barometer S S pressure pressure H H altimeter S S inTemp temperature_in H H outTemp temperature_out H H inHumidity humidity_in H H outHumidity humidity_out H H windSpeed wind_speed H H windDir wind_dir H H windGust wind_gust H H windGustDir wind_gust_dir H H rain rain D D rain_total H H rainRate rain_rate H dewpoint S S windchill windchill H H heatindex heatindex H H rxCheckPercent rssi H windBatteryStatus wind_battery_status H rainBatteryStatus rain_battery_status H outTempBatteryStatus battery_status_out H inTempBatteryStatus battery_status_in H <p> H indicates data provided by Hardware D indicates data calculated by the Driver S indicates data calculated by the StdWXCalculate Service </p>"},{"location":"quickstarts/","title":"Quickstarts","text":"<p>If you're an old hand at installing software on Unix systems, you may be able to use one of our Quickstart guides:</p> <ul> <li>Debian - including Ubuntu, Mint, Raspberry Pi    OS, Devuan. Uses <code>apt</code>.</li> <li>Redhat - including Fedora, CentOS, Rocky. Uses <code>yum</code>.</li> <li>SUSE - including openSUSE. Uses <code>zypper</code>.</li> <li>pip - any operating system. Uses <code>pip</code></li> <li>git - any operating system. Run directly from repository.</li> </ul>"},{"location":"quickstarts/debian/","title":"Installation on Debian systems","text":"<p>This is a guide to installing WeeWX from a DEB package on systems based on Debian, including Ubuntu, Mint, and Raspberry Pi OS.</p> <p>WeeWX V5 requires Python 3.7 or greater, which is only available on Debian 10 or later.  For older systems, either use WeeWX V4, or install Python 3.7 then install WeeWX V5 using pip.</p>"},{"location":"quickstarts/debian/#configure-apt","title":"Configure <code>apt</code>","text":"<p>The first time you install WeeWX, you must configure <code>apt</code> so that it will trust weewx.com, and know where to find the WeeWX releases.</p> <ol> <li> <p>Tell your system to trust weewx.com.</p> <pre><code>wget -qO - https://weewx.com/keys.html | \\\nsudo gpg --dearmor --output /etc/apt/trusted.gpg.d/weewx.gpg\n</code></pre> </li> <li> <p>Tell <code>apt</code> where to find the WeeWX repository.</p> <pre><code>echo \"deb [arch=all] https://weewx.com/apt/python3 buster main\" | \\\nsudo tee /etc/apt/sources.list.d/weewx.list\n</code></pre> </li> </ol> <p>If you encounter errors, please consult the FAQ.</p>"},{"location":"quickstarts/debian/#install","title":"Install","text":"<p>Use <code>apt</code> to install WeeWX. The installer will prompt for a location, latitude/longitude, altitude, station type, and parameters specific to your station hardware.  When you are done, WeeWX will be running in the background as a daemon.</p> <pre><code>sudo apt update\nsudo apt install weewx\n</code></pre>"},{"location":"quickstarts/debian/#verify","title":"Verify","text":"<p>After about 5 minutes (the exact length of time depends on your archive interval), copy the following and paste into a web browser:</p> <pre><code>/var/www/html/weewx/index.html\n</code></pre> <p>You should see your station information and data.</p> <p>Check the system log <code>/var/log/syslog</code> for problems.</p>"},{"location":"quickstarts/debian/#configure","title":"Configure","text":"<p>If you chose the simulator as your station type, then at some point you will probably want to switch to using real hardware. This is how to reconfigure.</p> <pre><code># Stop the daemon\nsudo systemctl stop weewx\n# Reconfigure to use your hardware\nsudo weectl station reconfigure\n# Delete the old database\nsudo rm /var/lib/weewx/weewx.sdb\n# Start the daemon\nsudo systemctl start weewx\n</code></pre>"},{"location":"quickstarts/debian/#customize","title":"Customize","text":"<p>To enable uploads or to customize reports, modify the configuration file. See the Customization Guide for instructions, and the application and skin references for all the options.</p> <p>Use any text editor, such as <code>nano</code>:</p> <pre><code>sudo nano /etc/weewx/weewx.conf\n</code></pre> <p>WeeWX must be restarted for the changes to take effect. <pre><code>sudo systemctl restart weewx\n</code></pre></p>"},{"location":"quickstarts/debian/#upgrade","title":"Upgrade","text":"<p>Upgrade to the latest version like this:</p> <pre><code>sudo apt update\nsudo apt install weewx\n</code></pre> <p>The upgrade process will not modify the WeeWX databases.</p> <p>Unmodified files will be upgraded. If modifications have been made to the WeeWX configuration, you will be prompted whether you want to keep the existing configuration or accept the new configuration. Either way, a copy of the option you did not choose will be saved.</p> <p>For example, if <code>/etc/weewx/weewx.conf</code> was modified, you will see a message something like this:</p> <pre><code>Configuration file `/etc/weewx/weewx.conf'\n  ==&gt; Modified (by you or by a script) since installation.\n  ==&gt; Package distributor has shipped an updated version.\n  What would you like to do about it ?  Your options are:\n            Y or I  : install the package maintainer's version\n            N or O  : keep your currently-installed version\n              D     : show the differences between the versions\n              Z     : start a shell to examine the situation\n         The default action is to keep your current version.\n*** weewx.conf (Y/I/N/O/D/Z) [default=N] ?\n</code></pre> <p>Choosing <code>Y</code> or <code>I</code> (install the new version) will place your old configuration in <code>/etc/weewx/weewx.conf.dpkg-old</code>, where it can be compared with the new version in <code>/etc/weewx/weewx.conf</code>.</p> <p>Choosing <code>N</code> or <code>O</code> (keep the current version) will place the new configuration in <code>/etc/weewx/weewx.conf.X.Y.Z</code>, where <code>X.Y.Z</code> is the new version number. It can then be compared with your old version which will be in <code>/etc/weewx/weewx.conf</code>.</p> <p>Note</p> <p>In most cases you should choose <code>N</code> (the default).</p>"},{"location":"quickstarts/debian/#uninstall","title":"Uninstall","text":"<p>To uninstall WeeWX, but retain configuration files and data:</p> <pre><code>sudo apt remove weewx\n</code></pre> <p>To uninstall WeeWX, deleting configuration files but retaining data:</p> <pre><code>sudo apt purge weewx\n</code></pre> <p>To delete data:</p> <pre><code>sudo rm -r /var/lib/weewx\nsudo rm -r /var/www/html/weewx\n</code></pre>"},{"location":"quickstarts/git/","title":"Running WeeWX from a git repository","text":"<p>Because WeeWX is pure-Python and does not need to be compiled, it can be run directly from a git repository without \"installing\" it first. This approach is perhaps most appropriate for developers, but it is also useful on older operating systems or on platforms with tight memory and/or storage constraints.</p> <p>This technique can also be used to run from a source directory expanded from a zip/tar file.</p> <p>Although you do not need root privileges to run WeeWX this way, you will need them to set up a daemon and, perhaps, to change device permissions.</p>"},{"location":"quickstarts/git/#install-pre-requisites","title":"Install pre-requisites","text":"<p>Before starting, you must install the pre-requisite Python and Python modules.</p> <ol> <li> <p>Ensure that Python 3.7 or later is installed.</p> </li> <li> <p>Ensure that <code>pip</code> and <code>venv</code> are installed.</p> </li> <li> <p>Create and activate a virtual environment in your home directory:</p> <pre><code>python3 -m venv ~/weewx-venv\nsource ~/weewx-venv/bin/activate\n</code></pre> </li> <li> <p>Install the minimum WeeWX dependencies:</p> <pre><code>python3 -m pip install CT3\npython3 -m pip install configobj\npython3 -m pip install Pillow\n</code></pre> </li> <li> <p>Depending on your situation, you may want to install these additional dependencies:</p> <pre><code># If your hardware uses a serial port\npython3 -m pip install pyserial\n# If your hardware uses a USB port\npython3 -m pip install pyusb\n# If you want extended celestial information:\npython3 -m pip install ephem\n# If you use MySQL or Maria\npython3 -m pip install PyMySQL[rsa]\n</code></pre> </li> </ol>"},{"location":"quickstarts/git/#get-the-code","title":"Get the code","text":"<p>Use <code>git</code> to clone the WeeWX repository into a directory called <code>weewx</code> in your home directory<sup>1</sup>:</p> <pre><code>git clone https://github.com/weewx/weewx ~/weewx\n</code></pre> <p>Note</p> <p>For systems with very little space, you may want to create a shallow clone: <pre><code>git clone --depth 1 https://github.com/weewx/weewx ~/weewx\n</code></pre></p>"},{"location":"quickstarts/git/#provision-a-new-station","title":"Provision a new station","text":"<p>Now that you have the prerequisites and the WeeWX code, you can provision a new station:</p> <pre><code># If necessary, activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Provision a new station\npython3 ~/weewx/src/weectl.py station create\n</code></pre> <p>The tool <code>weectl</code> will ask you a series of questions, then create a directory <code>weewx-data</code> in your home directory with a new configuration file. It will also install skins, documentation, utilitiy files, and examples in the same directory. The database and reports will also go into that directory, but only after you run <code>weewxd</code>, as shown in the following step.</p>"},{"location":"quickstarts/git/#run-weewxd","title":"Run <code>weewxd</code>","text":"<p>The program <code>weewxd</code> does the data collection, archiving, uploading, and report generation.  You can run it directly, or as a daemon.</p> <p>When you run <code>weewxd</code> directly, it will print data to the screen. It will stop when you log out, or when you terminate it with <code>control-c</code>.</p> <pre><code># If necessary, activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Run weewxd\npython3 ~/weewx/src/weewxd.py\n</code></pre> <p>To run <code>weewxd</code> as a daemon, install a systemd or init file that is appropriate for your operating system. Be sure to use the full path in the virtual environment to the Python interpreter and <code>weewxd.py</code>. Examples are included in the directory <code>~/weewx-data/util</code>.</p>"},{"location":"quickstarts/git/#verify","title":"Verify","text":"<p>After about 5 minutes (the exact length of time depends on your archive interval), copy the following and paste into a web browser. You should see your station information and data.</p> <pre><code>~/weewx-data/public_html/index.html\n</code></pre> <p>Note</p> <p>Not all browsers understand the tilde (\"<code>~</code>\") mark. You may have to substitute an explicit path to your home directory, for example, <code>file:///home/jackhandy</code> instead of <code>~</code>.</p> <p>If you have problems, check the system log for entries from <code>weewxd</code>.</p>"},{"location":"quickstarts/git/#customize","title":"Customize","text":"<p>To enable uploads or to customize reports, modify the configuration file. See the Customization Guide for instructions, and the application and skin references for all the  options.</p> <pre><code>nano ~/weewx-data/weewx.conf\n</code></pre> <p>The executable <code>weewxd</code> must be restarted for the changes to take effect.</p>"},{"location":"quickstarts/git/#upgrade","title":"Upgrade","text":"<p>Update the code by pulling the latest:</p> <pre><code>cd ~/weewx &amp;&amp; git pull\n</code></pre> <p>Then restart <code>weewxd</code></p>"},{"location":"quickstarts/git/#uninstall","title":"Uninstall","text":"<p>Before you uninstall, be sure that <code>weewxd</code> is not running.</p> <p>Then simply delete the git clone:</p> <pre><code>rm -rf ~/weewx\n</code></pre> <p>If desired, delete the data directory:</p> <pre><code>rm -r ~/weewx-data\n</code></pre> <ol> <li> <p>Of course, the directory you clone into does not have to be <code>~/weewx</code>. It can be any directory. Just be sure to replace <code>~/weewx</code> with your directory's path in the rest of the instructions.\u00a0\u21a9</p> </li> </ol>"},{"location":"quickstarts/pip/","title":"Installation using pip","text":"<p>This is a guide to installing WeeWX using <code>pip</code>. It can be used on almost any operating system (including macOS) that offers Python v3.7 or greater. Python 2, or earlier versions of Python 3, will not work.</p> <p>Although you do not need root privileges to install and configure WeeWX using <code>pip</code>, you will need them to set up a daemon, and you may need them to change device permissions.</p> <p>While there are many ways to install WeeWX using <code>pip</code> (see the wiki document <code>pip</code> install strategies for a partial list), we recommend creating a Python virtual environment, because it is the least likely to disturb the rest of your system. It is worth reading about <code>venv</code>, the module used to create a virtual environment, in the Python3 documentation.</p> <p>Note</p> <p>You may need to install <code>pip</code> and <code>venv</code> first. This usually involves a  command such as</p> <pre><code>sudo apt install python3-pip python3-venv\n</code></pre> <p>See Installing <code>pip</code> with Linux Package Managers.</p>"},{"location":"quickstarts/pip/#install-in-a-virtual-environment","title":"Install in a virtual environment","text":"<p>To install WeeWX in a virtual environment, follow the directions below for your system. If you plan to use MySQL or MariaDB, be sure to see the <code>MySQL/MariaDB</code> tab as well.</p> <p>When you are finished, the WeeWX executables and dependencies will have been installed inside the virtual environment.</p> DebianRedhat 8Redhat 9openSUSEmacOSOtherMySQL/MariaDB <p><pre><code>sudo apt update\n# If necessary, install pip and venv\nsudo apt install python3-pip -y\nsudo apt install python3-venv -y\n# Create the virtual environment\npython3 -m venv ~/weewx-venv\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Install WeeWX into the virtual environment\npython3 -m pip install weewx\n</code></pre> Tested with Debian 10, 12, RPi OS 32-bit, Ubuntu 20.04, and 22.04.</p> <p><pre><code>sudo yum update\n# Check your version of Python. You must have 3.7 or later\npython3 -V\n# If it is less than Python 3.7, install a later version of Python.\n# For example, this would install Python 3.11. Afterwards, you must\n# remember to invoke Python using \"python3.11\", NOT \"python3\"\nsudo yum install python3.11 -y\nsudo yum install python3.11-pip -y\n# Create the virtual environment\npython3.11 -m venv ~/weewx-venv\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Install WeeWX into the virtual environment\npython3.11 -m pip install weewx\n</code></pre> Tested with Rocky 8.7.</p> <p><pre><code>sudo yum update\nsudo yum install python3-pip -y\n# Create the virtual environment\npython3 -m venv ~/weewx-venv\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Install WeeWX into the virtual environment\npython3 -m pip install weewx\n</code></pre> Tested with Rocky 9.1 and 9.2.</p> <p><pre><code>sudo zypper refresh\n# Check your version of Python. You must have 3.7 or later\npython3 -V\n# If it is less than Python 3.7, install a later version of Python.\n# For example, this would install Python 3.11. Afterwards, you must\n# remember to invoke Python using \"python3.11\", NOT \"python3\"\nsudo zypper install -y python311\n# Create the virtual environment\npython3.11 -m venv ~/weewx-venv\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Install WeeWX into the virtual environment\npython3.11 -m pip install weewx\n</code></pre> Tested with openSUSE Leap 15.5.</p> <p><pre><code># Create the virtual environment\npython3 -m venv ~/weewx-venv\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Install WeeWX into the virtual environment\npython3 -m pip install weewx\n</code></pre> Tested on macOS 13.4 (Ventura) </p> <pre><code># Create the virtual environment\npython3 -m venv ~/weewx-venv\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Install WeeWX into the virtual environment\npython3 -m pip install weewx\n</code></pre> <p>If you plan on using MySQL or MariaDB with <code>sha256_password</code> or <code>caching_sha2_password</code> authentication, you will also need to install the module <code>cryptography</code>. On some operating systems this can be a bit of a struggle, but the following usually works. The key step is to update <code>pip</code> before trying the install.</p> <pre><code># Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Make sure pip is up-to-date\npython3 -m pip install pip --upgrade\n# Install cryptography\npython3 -m pip install cryptography\n</code></pre>"},{"location":"quickstarts/pip/#provision-a-new-station","title":"Provision a new station","text":"<p>While the instructions above install WeeWX, they do not set up the configuration specific to your station, nor do they set up the reporting skins. That is the job of the tool <code>weectl</code>.</p> <pre><code># Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Create the station data\nweectl station create\n</code></pre> <p>The tool <code>weectl</code> will ask you a series of questions, then create a directory <code>weewx-data</code> in your home directory with a new configuration file. It will also install skins, documentation, utilitiy files, and examples in the same directory. The database and reports will also go into that directory, but only after you run <code>weewxd</code>, as shown in the following step.</p>"},{"location":"quickstarts/pip/#run-weewxd","title":"Run <code>weewxd</code>","text":"<p>The program <code>weewxd</code> does the data collection, archiving, uploading, and report generation.  You can run it directly, or as a daemon.</p>"},{"location":"quickstarts/pip/#run-directly","title":"Run directly","text":"<p>When you run WeeWX directly, it will print data to the screen. WeeWX will stop when you log out, or when you terminate it with <code>control-c</code>.</p> <pre><code># Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Run weewxd\nweewxd\n</code></pre>"},{"location":"quickstarts/pip/#run-as-a-daemon","title":"Run as a daemon","text":"<p>To make WeeWX start when the system is booted, run <code>weewxd</code> as a daemon. The steps to configure <code>weewxd</code> to run as a daemon depend on your operating system, and require root privileges.</p> systemdsysVmacOS <pre><code># Systems that use systemd, e.g., Debian, Redhat, SUSE\nsudo cp ~/weewx-data/util/systemd/weewx.service /etc/systemd/system\nsudo systemctl daemon-reload\nsudo systemctl enable weewx\nsudo systemctl start weewx\n</code></pre> <p>Note</p> <p>The resulting daemon will be run using your username. If you prefer to use run as <code>root</code>, you will have to modify the file <code>/etc/systemd/system/weewx.service</code>.</p> <pre><code># Systems that use SysV init, e.g., Slackware, Devuan, Puppy, DD-WRT\nsudo cp ~/weewx-data/util/init.d/weewx.debian /etc/init.d/weewx\nsudo chmod +x /etc/init.d/weewx\nsudo update-rc.d weewx defaults 98\nsudo /etc/init.d/weewx start     </code></pre> <p>Note</p> <p>The resulting daemon will be run using your username. If you prefer to use run as <code>root</code>, you will have to modify the file <code>/etc/init.d/weewx</code>.</p> <pre><code>sudo cp ~/weewx-data/util/launchd/com.weewx.weewxd.plist /Library/LaunchDaemons\nsudo launchctl load /Library/LaunchDaemons/com.weewx.weewxd.plist\n</code></pre>"},{"location":"quickstarts/pip/#verify","title":"Verify","text":"<p>After about 5 minutes (the exact length of time depends on your archive interval), copy the following and paste into a web browser. You should see your station information and data.</p> <pre><code>~/weewx-data/public_html/index.html\n</code></pre> <p>Note</p> <p>Not all browsers understand the tilde (\"<code>~</code>\") mark. You may have to substitute an explicit path to your home directory, for example, <code>file:///home/jackhandy</code> instead of <code>~</code>.</p> <p>If you have problems, check the system log for entries from <code>weewxd</code>.</p>"},{"location":"quickstarts/pip/#configure","title":"Configure","text":"<p>If you chose the simulator as your station type, then at some point you will probably want to switch to using real hardware. This is how to reconfigure.</p> systemdsysVmacOS <pre><code># Stop the weewx daemon:\nsudo systemctl stop weewx\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Reconfigure to use your hardware\nweectl station reconfigure\n# Remove the old database\nrm ~/weewx-data/archive/weewx.sdb\n# Start the weewx daemon\nsudo systemctl start weewx\n</code></pre> <pre><code># Stop the weewx daemon:\nsudo /etc/init.d/weewx stop\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Reconfigure to use your hardware\nweectl station reconfigure\n# Remove the old database\nrm ~/weewx-data/archive/weewx.sdb\n# Start the weewx daemon\nsudo /etc/init.d/weewx start\n</code></pre> <pre><code># Stop the weewx daemon:\nsudo launchctl unload /Library/LaunchDaemons/com.weewx.weewxd.plist\n# Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Reconfigure to use your hardware\nweectl station reconfigure\n# Remove the old database\nrm ~/weewx-data/archive/weewx.sdb\n# Start the weewx daemon\nsudo launchctl load /Library/LaunchDaemons/com.weewx.weewxd.plist\n</code></pre>"},{"location":"quickstarts/pip/#customize","title":"Customize","text":"<p>To enable uploads or to customize reports, modify the configuration file. See the Customization Guide for instructions, and the application and skin references for all the options.</p> <p>Use any text editor, such as <code>nano</code>:</p> <pre><code>nano ~/weewx-data/weewx.conf\n</code></pre> <p>WeeWX must be restarted for the changes to take effect.</p> systemdsysVmacOS <pre><code>sudo systemctl restart weewx\n</code></pre> <pre><code>sudo /etc/init.d/weewx stop\nsudo /etc/init.d/weewx start\n</code></pre> <pre><code>sudo launchctl unload /Library/LaunchDaemons/com.weewx.weewxd.plist\nsudo launchctl load /Library/LaunchDaemons/com.weewx.weewxd.plist\n</code></pre>"},{"location":"quickstarts/pip/#upgrade","title":"Upgrade","text":"<p>Get the latest release using <code>pip</code>:</p> <pre><code># Activate the WeeWX virtual environment\nsource ~/weewx-venv/bin/activate\n# Upgrade the WeeWX code\npython3 -m pip install weewx --upgrade\n</code></pre> <p>Optional: You may want to upgrade your documentation and examples. <pre><code>weectl station upgrade --what docs examples util\n</code></pre></p> <p>Optional: You may want to upgrade your skins, although this may break or remove modifications you have made to them. Your old skins will be saved in a timestamped directory. <pre><code>weectl station upgrade --what skins\n</code></pre></p> <p>Optional: You may want to upgrade your configuration file.  This is only necessary in the rare case that a new WeeWX release is not backward compatible with older configuration files. <pre><code>weectl station upgrade --what config\n</code></pre></p>"},{"location":"quickstarts/pip/#uninstall","title":"Uninstall","text":"<p>Before you uninstall, be sure that <code>weewxd</code> is not running.</p> <p>If you installed a daemon configuration, remove it.</p> systemdsysVmacOS <pre><code>sudo systemctl stop weewx\nsudo systemctl disable weewx\nsudo rm /etc/systemd/system/weewx.service\n</code></pre> <pre><code>sudo /etc/rc.d/init.d/weewx stop\nsudo update-rc.d weewx remove\nsudo rm /etc/init.d/weewx\n</code></pre> <pre><code>sudo launchctl unload /Library/LaunchDaemons/com.weewx.weewxd.plist\nsudo rm /Library/LaunchDaemons/com.weewx.weewxd.plist\n</code></pre> <p>To delete the applications and code, remove the WeeWX virtual environment:</p> <pre><code>rm -r ~/weewx-venv\n</code></pre> <p>Finally, if desired, to delete the database, skins, and other utilities, remove the data directory:</p> <pre><code>rm -r ~/weewx-data\n</code></pre>"},{"location":"quickstarts/redhat/","title":"Installation on Redhat systems","text":"<p>This is a guide to installing WeeWX from an RPM package on systems based on Redhat, including Fedora, CentOS, or Rocky.</p> <p>WeeWX V5 requires Python 3.7 or greater, which is only available on Redhat 8 or later.  For older systems, either use WeeWX V4, or install Python 3.7 then install WeeWX V5 using pip.</p>"},{"location":"quickstarts/redhat/#install-pre-requisites","title":"Install pre-requisites","text":"<p>Not everything that WeeWX uses is included in the standard Redhat repositories, so you must first enable the EPEL repositories (\"Extra Packages for Enterprise Linux\") then install the WeeWX prerequisites.</p> <pre><code>sudo yum install epel-release\nsudo yum install python3-cheetah\n</code></pre>"},{"location":"quickstarts/redhat/#configure-yum","title":"Configure yum","text":"<p>The first time you install WeeWX, you must configure <code>yum</code> so that it will trust weewx.com, and know where to find the WeeWX releases.</p> <ol> <li> <p>Tell your system to trust weewx.com:</p> <pre><code>sudo rpm --import https://weewx.com/keys.html\n</code></pre> </li> <li> <p>Tell <code>yum</code> where to find the WeeWX repository.</p> <pre><code>curl -s https://weewx.com/yum/weewx-el8.repo | \\\nsudo tee /etc/yum.repos.d/weewx.repo\n</code></pre> </li> </ol>"},{"location":"quickstarts/redhat/#install","title":"Install","text":"<p>Install WeeWX using <code>yum</code> or <code>dnf</code>. When you are done, WeeWX will be running the <code>Simulator</code> in the background as a daemon.</p> <pre><code>sudo yum install weewx\n</code></pre>"},{"location":"quickstarts/redhat/#verify","title":"Verify","text":"<p>After 5 minutes, copy the following and paste into a web browser:</p> <pre><code>/var/www/html/weewx/index.html\n</code></pre> <p>You should see simulated data.</p> <p>Check the system log <code>/var/log/messages</code> for problems.</p>"},{"location":"quickstarts/redhat/#configure","title":"Configure","text":"<p>To switch from the <code>Simulator</code> to real hardware, reconfigure the driver.</p> <pre><code># Stop the daemon\nsudo systemctl stop weewx\n# Reconfigure to use your hardware\nsudo weectl station reconfigure\n# Delete the old database\nsudo rm /var/lib/weewx/weewx.sdb\n# Start the daemon:\nsudo systemctl start weewx\n</code></pre>"},{"location":"quickstarts/redhat/#customize","title":"Customize","text":"<p>To enable uploads or to customize reports, modify the configuration file. See the Customization Guide for instructions, and the application and skin references for all the options.</p> <p>Use any text editor, such as <code>nano</code>:</p> <pre><code>sudo nano /etc/weewx/weewx.conf\n</code></pre> <p>WeeWX must be restarted for the changes to take effect. <pre><code>sudo systemctl restart weewx\n</code></pre></p>"},{"location":"quickstarts/redhat/#upgrade","title":"Upgrade","text":"<p>Upgrade to the latest version like this: <pre><code>sudo yum update weewx\n</code></pre></p> <p>The upgrade process will not modify the WeeWX databases.</p> <p>Unmodified files will be upgraded. If modifications have been made to the configuration, <code>rpm</code> will display a message about any differences between the changes and the new configuration. Any new changes from the upgrade will be noted as files with a <code>.rpmnew</code> extension and the modified files will be left untouched.</p> <p>For example, if <code>/etc/weewx/weewx.conf</code> was modified, <code>rpm</code> will present a message something like this:</p> <pre><code>warning: /etc/weewx/weewx.conf created as /etc/weewx/weewx.conf.rpmnew\n</code></pre>"},{"location":"quickstarts/redhat/#uninstall","title":"Uninstall","text":"<p>To uninstall WeeWX, deleting configuration files but retaining data:</p> <pre><code>sudo yum remove weewx\n</code></pre> <p>To delete data:</p> <pre><code>sudo rm -r /var/lib/weewx\nsudo rm -r /var/www/html/weewx\n</code></pre>"},{"location":"quickstarts/suse/","title":"Installation on SUSE systems","text":"<p>This is a guide to installing WeeWX from an RPM package systems based on SUSE, such as openSUSE Leap.</p> <p>WeeWX V5 requires Python 3.7 or greater, which is only available on SUSE-15 or later.  For older systems, either use WeeWX V4, or install Python 3.7 then install WeeWX V5 using pip.</p>"},{"location":"quickstarts/suse/#configure-zypper","title":"Configure zypper","text":"<p>The first time you install WeeWX, you must configure <code>zypper</code> so that it will trust weewx.com, and know where to find the WeeWX releases.</p> <ol> <li> <p>Tell your system to trust weewx.com:</p> <pre><code>sudo rpm --import https://weewx.com/keys.html\n</code></pre> </li> <li> <p>Tell <code>zypper</code> where to find the WeeWX repository.</p> <pre><code>curl -s https://weewx.com/suse/weewx-suse15.repo | \\\nsudo tee /etc/zypp/repos.d/weewx.repo\n</code></pre> </li> </ol>"},{"location":"quickstarts/suse/#install","title":"Install","text":"<p>Install WeeWX using <code>zypper</code>. When you are done, WeeWX will be running the <code>Simulator</code> in the background as a daemon.</p> <pre><code>sudo zypper install weewx\n</code></pre>"},{"location":"quickstarts/suse/#verify","title":"Verify","text":"<p>After 5 minutes, copy the following and paste into a web browser:</p> <pre><code>/var/www/html/weewx/index.html\n</code></pre> <p>You should see simulated data.</p> <p>Check the system log <code>/var/log/messages</code> for problems.</p>"},{"location":"quickstarts/suse/#configure","title":"Configure","text":"<p>To switch from the <code>Simulator</code> to real hardware, reconfigure the driver.</p> <pre><code># Stop the daemon\nsudo systemctl stop weewx\n# Reconfigure to use your hardware\nsudo weectl station reconfigure\n# Delete the old database\nsudo rm /var/lib/weewx/weewx.sdb\n# Start the daemon\nsudo systemctl start weewx\n</code></pre>"},{"location":"quickstarts/suse/#customize","title":"Customize","text":"<p>To enable uploads or to customize reports, modify the configuration file. See the Customization Guide for instructions, and the application and skin references for all the options.</p> <p>Use any text editor, such as <code>nano</code>: <pre><code>sudo nano /etc/weewx/weewx.conf\n</code></pre></p> <p>WeeWX must be restarted for the changes to take effect. <pre><code>sudo systemctl restart weewx\n</code></pre></p>"},{"location":"quickstarts/suse/#upgrade","title":"Upgrade","text":"<p>Upgrade to the latest version like this: <pre><code>sudo zypper update weewx\n</code></pre></p> <p>The upgrade process will not modify the WeeWX databases.</p> <p>Unmodified files will be upgraded. If modifications have been made to the configuration, <code>rpm</code> will display a message about any differences between the changes and the new configuration. Any new changes from the upgrade will be noted as files with a <code>.rpmnew</code> extension and the modified files will be left untouched.</p> <p>For example, if <code>/etc/weewx/weewx.conf</code> was modified, <code>rpm</code> will present a message something like this:</p> <pre><code>warning: /etc/weewx/weewx.conf created as /etc/weewx/weewx.conf.rpmnew\n</code></pre>"},{"location":"quickstarts/suse/#uninstall","title":"Uninstall","text":"<p>To uninstall WeeWX, deleting configuration files but retaining data:</p> <p><pre><code>sudo zypper remove weewx\n</code></pre> To delete data:</p> <pre><code>sudo rm -r /var/lib/weewx\nsudo rm -r /var/www/html/weewx\n</code></pre>"},{"location":"reference/aggtypes/","title":"Aggregation types","text":"Aggregation types Aggregation type Meaning avg The average value in the aggregation period. avg_ge(val) The number of days when the average value is greater than or equal to val. Aggregation             period must be one day or longer. The argument val is a             ValueTuple.          avg_le(val) The number of days when the average value is less than or equal to val. Aggregation period             must be one day or longer. The argument val is a             ValueTuple.          count The number of non-null values in the aggregation period.          diff The difference between the last and first value in the aggregation period.          exists Returns True if the observation type exists in the database. first The first non-null value in the aggregation period. firsttime The time of the first non-null value in the aggregation period.          gustdir The direction of the max gust in the aggregation period.          has_data Returns True if the observation type              exists either in the database or as an xtype and is non-null.          last The last non-null value in the aggregation period. lasttime The time of the last non-null value in the aggregation period.          max The maximum value in the aggregation period. maxmin The maximum daily minimum in the aggregation period. Aggregation period must be one day or longer.          maxmintime The time of the maximum daily minimum. maxsum The maximum daily sum in the aggregation period. Aggregation period must be one day or longer.          maxsumtime The time of the maximum daily sum. maxtime The time of the maximum value. max_ge(val) The number of days when the maximum value is greater than or equal to val. Aggregation             period must be one day or longer. The argument val is a             ValueTuple.          max_le(val) The number of days when the maximum value is less than or equal to val. Aggregation period             must be one day or longer. The argument val is a             ValueTuple.          meanmax The average daily maximum in the aggregation period. Aggregation period must be one day or longer.          meanmin The average daily minimum in the aggregation period. Aggregation period must be one day or longer.          min The minimum value in the aggregation period. minmax The minimum daily maximum in the aggregation period. Aggregation period must be one day or longer.          minmaxtime The time of the minimum daily maximum. minsum The minimum daily sum in the aggregation period. Aggregation period must be one day or longer.          minsumtime The time of the minimum daily sum. mintime The time of the minimum value. min_ge(val) The number of days when the minimum value is greater than or equal to val. Aggregation             period must be one day or longer. The argument val is a             ValueTuple.          min_le(val) The number of days when the minimum value is less than or equal to val. Aggregation period             must be one day or longer. The argument val is a             ValueTuple.          not_null              Returns truthy if any value over the aggregation period is non-null.          rms The root mean square value in the aggregation period.          sum The sum of values in the aggregation period. sum_ge(val) The number of days when the sum of value is greater than or equal to val. Aggregation             period must be one day or longer. The argument val is a             ValueTuple.          sum_le(val) The number of days when the sum of value is less than or equal to val. Aggregation period             must be one day or longer. The argument val is a             ValueTuple.          tderiv              The time derivative between the last and first value in the aggregation period. This is the             difference in value divided by the difference in time.          vecavg The vector average speed in the aggregation period. vecdir The vector averaged direction during the aggregation period."},{"location":"reference/durations/","title":"Durations","text":"<p>Rather than give a value in seconds, many durations can be expressed using a shorthand notation. For example, in a skin configuration file <code>skin.conf</code>, a value for <code>aggregate_interval</code> can be  given as either</p> <pre><code>aggregate_interval = 3600\n</code></pre> <p>or</p> <pre><code>aggregate_interval = 1h\n</code></pre> <p>The same notation can be used in trends. For example:</p> <pre><code>&lt;p&gt;Barometer trend over the last 2 hours: $trend(time_delta='2h').barometer&lt;/p&gt;\n</code></pre> <p>Here is a summary of the notation:</p> Example Meaning <code>10800</code> 3 hours <code>3h</code> 3 hours <code>1d</code> 1 day <code>2w</code> 2 weeks <code>1m</code> 1 month <code>1y</code> 1 year <code>hour</code> Synonym for <code>1h</code> <code>day</code> Synonym for <code>1d</code> <code>week</code> Synonym for <code>1w</code> <code>month</code> Synonym for <code>1m</code> <code>year</code> Synonym for <code>1y</code>"},{"location":"reference/units/","title":"Units","text":"<p>WeeWX offers three different unit systems:</p> The standard unit systems used within WeeWX Name Encoded value Note US 0x01 U.S. Customary METRICWX 0x11 Metric, with rain related measurements in mm and speeds in m/s METRIC 0x10 Metric, with rain related measurements in cm and speeds in km/hr <p>The table below lists all the unit groups, their members, which units are options for the group, and what the defaults are for each standard unit system.</p> Unit groups, members and options Group Members Unit options US METRICWX METRIC group_altitude altitude cloudbase          foot  meter          foot meter meter group_amp amp amp amp amp group_angle degree_angleradian degree_angle degree_angle degree_angle group_boolean boolean boolean boolean boolean group_concentration no2pm1_0pm2_5pm10_0 microgram_per_meter_cubed microgram_per_meter_cubed microgram_per_meter_cubed microgram_per_meter_cubed group_count leafWet1leafWet2lightning_disturber_countlightning_noise_countlightning_strike_count count count count count group_data byte bit byte byte byte group_db noise dB dB dB dB group_deltatime daySunshineDurrainDursunshineDurDoc second minutehourday second second second group_degree_day cooldeg heatdeg growdeg          degree_F_day degree_C_day degree_F_day degree_C_day degree_C_day group_direction gustdir  vecdir  windDir  windGustDir degree_compass degree_compass degree_compass degree_compass group_distance windrunlightning_distance milekm mile km km group_energy kilowatt_hourmega_joulewatt_hourwatt_second watt_hour watt_hour watt_hour group_energy2 kilowatt_hourwatt_hourwatt_second watt_second watt_second watt_second group_fraction coco2nh3o3pbso2 ppm ppm ppm ppm group_frequency hertz hertz hertz hertz group_illuminance illuminance lux lux lux lux group_interval interval minute minute minute minute group_length inch cm          inch cm cm group_moisture soilMoist1  soilMoist2  soilMoist3  soilMoist4          centibar centibar centibar centibar group_percent              cloudcoverextraHumid1  extraHumid2  inHumidity  outHumidity pop             rxCheckPercentsnowMoisture          percent percent percent percent group_power kilowattwatt watt watt watt group_pressure              barometer  altimeter  pressure                       inHgmbarhPakPa          inHg mbar mbar group_pressurerate              barometerRate  altimeterRate  pressureRate                       inHg_per_hour  mbar_per_hour  hPa_per_hour  kPa_per_hour          inHg_per_hour mbar_per_hour mbar_per_hour group_radiation maxSolarRad  radiation watt_per_meter_squared watt_per_meter_squared watt_per_meter_squared watt_per_meter_squared group_rain rainEThailsnowDepthsnowRate inch  cm  mm          inch mm cm group_rainrate rainRate  hailRate          inch_per_hour  cm_per_hour  mm_per_hour          inch_per_hour mm_per_hour cm_per_hour group_speed wind  windGust  windSpeed  windgustvec  windvec          mile_per_hour  km_per_hour  knot  meter_per_second  beaufort          mile_per_hour meter_per_second km_per_hour group_speed2 rms  vecavg          mile_per_hour2  km_per_hour2  knot2  meter_per_second2          mile_per_hour2 meter_per_second2 km_per_hour2 group_temperature appTemp  dewpoint  extraTemp1  extraTemp2  extraTemp3  heatindex              heatingTemp  humidex  inTemp  leafTemp1  leafTemp2  outTemp  soilTemp1              soilTemp2  soilTemp3  soilTemp4  windchill  THSW          degree_C degree_F  degree_E degree_K          degree_F degree_C degree_C group_time dateTime unix_epoch  dublin_jd          unix_epoch unix_epoch unix_epoch group_uv UV uv_index uv_index uv_index uv_index group_volt consBatteryVoltage  heatingVoltage  referenceVoltage  supplyVoltage          volt volt volt volt group_volume cubic_foot gallon liter          gallon liter liter group_NONE NONE NONE NONE NONE NONE"},{"location":"reference/valuehelper/","title":"Class ValueHelper","text":"<p>Class <code>ValueHelper</code> contains all the information necessary to do the proper formatting of a value, including a unit label.</p>"},{"location":"reference/valuehelper/#instance-attribute","title":"Instance attribute","text":""},{"location":"reference/valuehelper/#valuehelpervalue_t","title":"ValueHelper.value_t","text":"<p>Returns the <code>ValueTuple</code> instance held internally.</p>"},{"location":"reference/valuehelper/#instance-methods","title":"Instance methods","text":""},{"location":"reference/valuehelper/#valuehelperstr","title":"ValueHelper.str()","text":"<p>Formats the value as a string, including a unit label, and returns it.</p>"},{"location":"reference/valuehelper/#valuehelperformatformat_stringnone-none_stringnone-add_labeltrue-localizetrue","title":"ValueHelper.format(format_string=None, None_string=None, add_label=True, localize=True)","text":"<p>Format the value as a string, using various specified options, and return it. Unless otherwise specified, a label is included.</p> <p>Its parameters:</p> <ul> <li> <p><code>format_string</code> A string to be used for formatting. It must include one, and only one, format specifier.</p> </li> <li> <p><code>None_string</code> In the event of a value of Python <code>None</code>, this string will be substituted. If <code>None</code>, then a default string from <code>skin.conf</code> will be used.</p> </li> <li> <p><code>add_label</code> If truthy, then an appropriate unit label will be attached. Otherwise, no label is attached.</p> </li> <li> <p><code>localize</code> If truthy, then the results will be localized. For example, in some locales, a comma will be used as the decimal specifier.</p> </li> </ul>"},{"location":"reference/valuetuple/","title":"Class ValueTuple","text":"<p>A value, along with the unit it is in, can be represented by a 3-way tuple called a \"value tuple\". They are used throughout WeeWX. All WeeWX routines can accept a simple unadorned 3-way tuple as a value tuple, but they return the type <code>ValueTuple</code>. It is useful because its contents can be accessed using named attributes. You can think of it as a unit-aware value, useful for converting to and from other units.</p> <p>The following attributes, and their index, are present:</p> Index Attribute Meaning 0 value The data value(s). Can be a series (e.g., [20.2, 23.2, ...]) or a scalar             (e.g., 20.2)          1 unit The unit it is in (\"degree_C\") 2 group The unit group (\"group_temperature\") <p>It is valid to have a datum value of <code>None</code>.</p> <p>It is also valid to have a unit type of <code>None</code> (meaning there is no information about the unit the value is in). In this case, you won't be able to convert it to another unit.</p> <p>Here are some examples:</p> <pre><code>from weewx.units import ValueTuple\n\nfreezing_vt = ValueTuple(0.0, \"degree_C\", \"group_temperature\")\nbody_temperature_vt = ValueTuple(98.6, \"degree_F\", group_temperature\")\nstation_altitude_vt = ValueTuple(120.0, \"meter\", \"group_altitude\")\n</code></pre>"},{"location":"reference/skin-options/almanac/","title":"[Almanac]","text":"<p>This section controls what text to use for the almanac.</p>"},{"location":"reference/skin-options/almanac/#moon_phases","title":"moon_phases","text":"<p>This option is a comma separated list of labels to be used for the eight phases of the moon.</p> <p>Default is <code>New, Waxing crescent, First quarter, Waxing gibbous, Full, Waning gibbous, Last quarter, Waning crescent</code>.</p>"},{"location":"reference/skin-options/cheetahgenerator/","title":"[CheetahGenerator]","text":"<p>This section contains the options for the Cheetah generator. It applies to <code>skin.conf</code> only.</p>"},{"location":"reference/skin-options/cheetahgenerator/#search_list","title":"search_list","text":"<p>This is the list of search list objects that will be scanned by the template engine, looking for tags. See the section Defining new tags and the Cheetah documentation for details on search lists. If no <code>search_list</code> is specified, a default list will be used.</p>"},{"location":"reference/skin-options/cheetahgenerator/#search_list_extensions","title":"search_list_extensions","text":"<p>This defines one or more search list objects that will be appended to the <code>search_list</code>. For example, if you are using the \"seven day\" and \"forecast\" search list extensions, the option would look like</p> <pre><code>search_list_extensions = user.seven_day.SevenDay, user.forecast.ForecastVariables\n</code></pre>"},{"location":"reference/skin-options/cheetahgenerator/#encoding","title":"encoding","text":"<p>As Cheetah goes through the template, it substitutes strings for all tag values. This option controls which encoding to use for the new strings. The encoding can be chosen on a per-file basis. All the encodings listed in the Python documentation Standard Encodings are available, as well as these WeeWX-specific encodings:</p> Encoding Comments html_entities  Non 7-bit characters will be represented as HTML entities (e.g., the degree sign will be represented as \"&amp;#176;\")          strict_ascii Non 7-bit characters will be ignored. normalized_ascii  Replace accented characters with non-accented analogs (e.g., '\u00f6' will be replaced with 'o').          <p>The encoding <code>html_entities</code> is the default. Other common choices are <code>utf8</code>, <code>cp1252</code> (a.k.a. Windows-1252), and <code>latin1</code>.</p>"},{"location":"reference/skin-options/cheetahgenerator/#template","title":"template","text":"<p>The name of a template file. A template filename must end with <code>.tmpl</code>. Filenames are case-sensitive. If the template filename has the letters <code>YYYY</code>, <code>MM</code>, <code>WW</code> or <code>DD</code> in its name, these will be substituted for the year, month, week and day of month, respectively. So, a template with the name <code>summary-YYYY-MM.html.tmpl</code> would have name <code>summary-2010-03.html</code> for the month of March 2010.</p>"},{"location":"reference/skin-options/cheetahgenerator/#generate_once","title":"generate_once","text":"<p>When set to <code>True</code>, the template is processed only on the first invocation of the report engine service. This feature is useful for files that do not change when data values change, such as HTML files that define a layout. The default is <code>False</code>.</p>"},{"location":"reference/skin-options/cheetahgenerator/#stale_age","title":"stale_age","text":"<p>File staleness age, in seconds. If the file is older than this age it will be generated from the template. If no <code>stale_age</code> is specified, then the file will be generated every time the generator runs.</p> <p>Note</p> <p>Precise control over when a run is available through use of the <code>report_timing</code> option. The <code>report_timing</code> option uses a CRON-like syntax to specify precisely when a report should be run. See the guide Scheduling report generation for details.</p>"},{"location":"reference/skin-options/cheetahgenerator/#summarybyday","title":"[[SummaryByDay]]","text":"<p>The <code>SummaryByDay</code> section defines some special behavior. Each template in this section will be used multiple times, each time with a different per-day timespan. Be sure to include <code>YYYY</code>, <code>MM</code>, and <code>DD</code> in the filename of any template in this section.</p>"},{"location":"reference/skin-options/cheetahgenerator/#summarybymonth","title":"[[SummaryByMonth]]","text":"<p>The <code>SummaryByMonth</code> section defines some special behavior. Each template in this section will be used multiple times, each time with a different per-month timespan. Be sure to include <code>YYYY</code> and <code>MM</code> in the filename of any template in this section.</p>"},{"location":"reference/skin-options/cheetahgenerator/#summarybyyear","title":"[[SummaryByYear]]","text":"<p>The <code>SummaryByYear</code> section defines some special behavior. Each template in this section will be used multiple times, each time with a different per-year timespan. Be sure to include <code>YYYY</code> in the filename of any template in this section.</p>"},{"location":"reference/skin-options/copygenerator/","title":"[CopyGenerator]","text":"<p>This section is used by generator <code>weewx.reportengine.CopyGenerator</code> and controls which files are to be copied over from the skin directory to the destination directory. Think of it as \"file generation,\" except that rather than going through the template engine, the files are simply copied over. It is useful for making sure CSS and Javascript files are in place.</p>"},{"location":"reference/skin-options/copygenerator/#copy_once","title":"copy_once","text":"<p>This option controls which files get copied over on the first invocation of the report engine service. Typically, this is things such as style sheets or background GIFs. Wildcards can be used.</p>"},{"location":"reference/skin-options/copygenerator/#copy_always","title":"copy_always","text":"<p>This is a list of files that should be copied on every invocation. Wildcards can be used.</p> <p>Here is the <code>[CopyGenerator]</code> section from the Standard <code>skin.conf</code></p> <pre><code>[CopyGenerator]\n# This section is used by the generator CopyGenerator\n\n# List of files to be copied only the first time the generator runs\ncopy_once = backgrounds/*, weewx.css, mobile.css, favicon.ico\n\n# List of files to be copied each time the generator runs\n# copy_always = \n</code></pre> <p>The Standard skin includes some background images, CSS files, and icons that need to be copied once. There are no files that need to be copied every time the generator runs.</p>"},{"location":"reference/skin-options/extras/","title":"[Extras]","text":"<p>This section is available to add any static tags you might want to use in your templates.</p> <p>As an example, the <code>skin.conf</code> file for the Seasons skin includes three options:</p> Skin option Template tag <code>radar_img</code> <code>$Extras.radar_img</code> <code>radar_url</code> <code>$Extras.radar_url</code> <code>googleAnalyticsId</code> <code>$Extras.googleAnalyticsId</code> <p>If you take a look at the template <code>radar.inc</code> you will see examples of testing for these tags.</p>"},{"location":"reference/skin-options/extras/#radar_img","title":"radar_img","text":"<p>Set to an URL to show a local radar image for your region.</p>"},{"location":"reference/skin-options/extras/#radar_url","title":"radar_url","text":"<p>If the radar image is clicked, the browser will go to this URL. This is usually used to show a more detailed, close-up, radar picture.</p> <p>For me in Oregon, setting the two options to:</p> <pre><code>[Extras]\nradar_img = http://radar.weather.gov/ridge/lite/N0R/RTX_loop.gif\nradar_url = http://radar.weather.gov/ridge/radar.php?product=NCR&amp;rid=RTX&amp;loop=yes\n</code></pre> <p>results in a nice image of a radar centered on Portland, Oregon. When you click on it, it gives you a detailed, animated view. If you live in the USA, take a look at the NOAA radar website to find a nice one that will work for you. In other countries, you will have to consult your local weather service.</p>"},{"location":"reference/skin-options/extras/#googleanalyticsid","title":"googleAnalyticsId","text":"<p>If you have a Google Analytics ID, you can set it here. The Google Analytics Javascript code will then be included, enabling analytics of your website usage. If commented out, the code will not be included.</p>"},{"location":"reference/skin-options/extras/#extending-extras","title":"Extending <code>[Extras]</code>","text":"<p>Other tags can be added in a similar manner, including subsections. For example, say you have added a video camera, and you would like to add a still image with a hyperlink to a page with the video. You want all of these options to be neatly contained in a subsection.</p> <pre><code>[Extras]\n[[video]]\nstill = video_capture.jpg\nhyperlink = http://www.eatatjoes.com/video.html\n</code></pre> <p>Then in your template you could refer to these as:</p> <pre><code>&lt;a href=\"$Extras.video.hyperlink\"&gt;\n    &lt;img src=\"$Extras.video.still\" alt=\"Video capture\"/&gt;\n&lt;/a&gt;\n</code></pre>"},{"location":"reference/skin-options/generators/","title":"[Generators]","text":"<p>This section defines the list of generators that should be run.</p>"},{"location":"reference/skin-options/generators/#generator_list","title":"generator_list","text":"<p>This option controls which generators get run for this skin. It is a comma separated list. The generators will be run in this order.</p> <p>For example, the Standard skin uses three generators: <code>CheetahGenerator</code>, <code>ImageGenerator</code>, and <code>CopyGenerator</code>. Here is the <code>[Generators]</code> section from the Standard <code>skin.conf</code></p> <pre><code>[Generators]\ngenerator_list = weewx.cheetahgenerator.CheetahGenerator, weewx.imagegenerator.ImageGenerator, weewx.reportengine.CopyGenerator\n</code></pre>"},{"location":"reference/skin-options/imagegenerator/","title":"[ImageGenerator]","text":"<p>This section describes the various options available to the image generator.</p> Part names in a WeeWX image"},{"location":"reference/skin-options/imagegenerator/#general-options","title":"General options","text":"<p>These are options that affect the overall image.</p>"},{"location":"reference/skin-options/imagegenerator/#anti_alias","title":"anti_alias","text":"<p>Setting to 2 or more might give a sharper image, with fewer jagged edges. Experimentation is in order. Default is <code>1</code>.</p> A GIF showing the same imagewith <code>anti_alias=1</code>, <code>2</code>, and <code>4</code>."},{"location":"reference/skin-options/imagegenerator/#chart_background_color","title":"chart_background_color","text":"<p>The background color of the chart itself. Optional. Default is <code>#d8d8d8</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#chart_gridline_color","title":"chart_gridline_color","text":"<p>The color of the chart grid lines. Optional. Default is <code>#a0a0a0</code></p> Example of day/night bands in a one week image"},{"location":"reference/skin-options/imagegenerator/#daynight_day_color","title":"daynight_day_color","text":"<p>The color to be used for the daylight band. Optional. Default is <code>#ffffff</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#daynight_edge_color","title":"daynight_edge_color","text":"<p>The color to be used in the transition zone between night and day. Optional. Default is <code>#efefef</code>, a mid-gray.</p>"},{"location":"reference/skin-options/imagegenerator/#daynight_night_color","title":"daynight_night_color","text":"<p>The color to be used for the nighttime band. Optional. Default is <code>#f0f0f0</code>, a dark gray.</p>"},{"location":"reference/skin-options/imagegenerator/#image_background_color","title":"image_background_color","text":"<p>The background color of the whole image. Optional. Default is <code>#f5f5f5</code> (\"SmokeGray\")</p>"},{"location":"reference/skin-options/imagegenerator/#image_width","title":"image_width","text":""},{"location":"reference/skin-options/imagegenerator/#image_height","title":"image_height","text":"<p>The width and height of the image in pixels. Optional. Default is 300 x 180 pixels.</p>"},{"location":"reference/skin-options/imagegenerator/#show_daynight","title":"show_daynight","text":"<p>Set to <code>true</code> to show day/night bands in an image. Otherwise, set to false. This only looks good with day or week plots. Optional. Default is <code>false</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#skip_if_empty","title":"skip_if_empty","text":"<p>If set to <code>true</code>, then skip the generation of the image if all data in it are null. If set to a time period, such as <code>month</code> or <code>year</code>, then skip the generation of the image if all data in that period are null. Default is <code>false</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#stale_age","title":"stale_age","text":"<p>Image file staleness age, in seconds. If the image file is older than this age it will be generated. If no <code>stale_age</code> is specified, then the image file will be generated every time the generator runs.</p>"},{"location":"reference/skin-options/imagegenerator/#unit","title":"unit","text":"<p>Normally, the unit used in a plot is set by whatever unit group the types are in. However, this option allows overriding the unit used in a specific plot.</p>"},{"location":"reference/skin-options/imagegenerator/#label-options","title":"Label options","text":"<p>These are options for the various labels used in the image.</p>"},{"location":"reference/skin-options/imagegenerator/#axis_label_font_color","title":"axis_label_font_color","text":"<p>The color of the x- and y-axis label font. Optional. Default is <code>black</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#axis_label_font_path","title":"axis_label_font_path","text":"<p>The path to the font to be used for the x- and y-axis labels. Optional. If not given, or if WeeWX cannot find the font, then the default PIL font will be used.</p>"},{"location":"reference/skin-options/imagegenerator/#axis_label_font_size","title":"axis_label_font_size","text":"<p>The size of the x- and y-axis labels in pixels. Optional. The default is <code>10</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#bottom_label_font_color","title":"bottom_label_font_color","text":"<p>The color of the bottom label font. Optional. Default is <code>black</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#bottom_label_font_path","title":"bottom_label_font_path","text":"<p>The path to the font to be used for the bottom label. Optional. If not given, or if WeeWX cannot find the font, then the default PIL font will be used.</p>"},{"location":"reference/skin-options/imagegenerator/#bottom_label_font_size","title":"bottom_label_font_size","text":"<p>The size of the bottom label in pixels. Optional. The default is <code>10</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#bottom_label_format","title":"bottom_label_format","text":"<p>The format to be used for the bottom label. It should be a strftime format. Optional. Default is <code>'%m/%d/%y %H:%M'</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#bottom_label_offset","title":"bottom_label_offset","text":"<p>The margin of the bottom label from the bottom of the plot. Default is 3.</p>"},{"location":"reference/skin-options/imagegenerator/#top_label_font_path","title":"top_label_font_path","text":"<p>The path to the font to be used for the top label. Optional. If not given, or if WeeWX cannot find the font, then the default PIL font will be used.</p>"},{"location":"reference/skin-options/imagegenerator/#top_label_font_size","title":"top_label_font_size","text":"<p>The size of the top label in pixels. Optional. The default is <code>10</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#unit_label_font_color","title":"unit_label_font_color","text":"<p>The color of the unit label font. Optional. Default is <code>black</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#unit_label_font_path","title":"unit_label_font_path","text":"<p>The path to the font to be used for the unit label. Optional. If not given, or if WeeWX cannot find the font, then the default PIL font will be used.</p>"},{"location":"reference/skin-options/imagegenerator/#unit_label_font_size","title":"unit_label_font_size","text":"<p>The size of the unit label in pixels. Optional. The default is <code>10</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#x_interval","title":"x_interval","text":"<p>The time interval in seconds between x-axis tick marks. Optional. If not given, a suitable default will be chosen.</p>"},{"location":"reference/skin-options/imagegenerator/#x_label_format","title":"x_label_format","text":"<p>The format to be used for the time labels on the x-axis. It should be a strftime format. Optional. If not given, a sensible format will be chosen automatically.</p>"},{"location":"reference/skin-options/imagegenerator/#x_label_spacing","title":"x_label_spacing","text":"<p>Specifies the ordinal increment between labels on the x-axis: For example, 3 means a label every 3rd tick mark. Optional. The default is <code>2</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#y_label_side","title":"y_label_side","text":"<p>Specifies if the y-axis labels should be on the left, right, or both sides of the graph. Valid values are <code>left</code>, <code>right</code> or <code>both</code>. Optional.  Default is <code>left</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#y_label_spacing","title":"y_label_spacing","text":"<p>Specifies the ordinal increment between labels on the y-axis: For example, 3 means a label every 3rd tick mark. Optional. The default is <code>2</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#y_nticks","title":"y_nticks","text":"<p>The nominal number of ticks along the y-axis. The default is <code>10</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#plot-scaling-options","title":"Plot scaling options","text":""},{"location":"reference/skin-options/imagegenerator/#time_length","title":"time_length","text":"<p>The nominal length of the time period to be covered in seconds. Alternatively, a duration notation can be used. The exact length of the x-axis is chosen by the plotting engine to cover this period. Optional. Default is <code>86400</code> (one day).</p>"},{"location":"reference/skin-options/imagegenerator/#yscale","title":"yscale","text":"<p>A 3-way tuple (<code>ylow</code>, <code>yhigh</code>, <code>min_interval</code>), where <code>ylow</code> and <code>yhigh</code> are the minimum and maximum y-axis values, respectively, and <code>min_interval</code> is the minimum tick interval. If set to <code>None</code>, the corresponding value will be automatically chosen. Optional. Default is <code>None, None, None</code>. (Choose the y-axis minimum, maximum, and minimum increment automatically.)</p>"},{"location":"reference/skin-options/imagegenerator/#compass-rose-options","title":"Compass rose options","text":"Example of a vector plot with a compass rosein the lower-left"},{"location":"reference/skin-options/imagegenerator/#rose_label","title":"rose_label","text":"<p>The label to be used in the compass rose to indicate due North. Optional. Default is <code>N</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#rose_label_font_path","title":"rose_label_font_path","text":"<p>The path to the font to be used for the rose label (the letter \"N,\" indicating North). Optional. If not given, or if WeeWX cannot find the font, then the default PIL font will be used.</p>"},{"location":"reference/skin-options/imagegenerator/#rose_label_font_size","title":"rose_label_font_size","text":"<p>The size of the compass rose label in pixels. Optional. The default is <code>10</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#rose_label_font_color","title":"rose_label_font_color","text":"<p>The color of the compass rose label. Optional. Default is the same color as the rose itself.</p>"},{"location":"reference/skin-options/imagegenerator/#vector_rotate","title":"vector_rotate","text":"<p>Causes the vectors to be rotated by this many degrees. Positive is clockwise. If westerly winds dominate at your location (as they do at mine), then you may want to specify <code>+90</code> for this option. This will cause the average vector to point straight up, rather than lie flat against the x-axis. Optional. The default is <code>0</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#plot-line-options","title":"Plot line options","text":"<p>These are options shared by all the plot lines.</p>"},{"location":"reference/skin-options/imagegenerator/#chart_line_colors","title":"chart_line_colors","text":"<p>Each chart line is drawn in a different color. This option is a list of those colors. If the number of lines exceeds the length of the list, then the colors wrap around to the beginning of the list. Optional. In the case of bar charts, this is the color of the outline of the bar. Default is <code>#0000ff, #00ff00, #ff0000</code>. Individual line color can be overridden by using option <code>color</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#chart_fill_colors","title":"chart_fill_colors","text":"<p>A list of the color to be used as the fill of the bar charts. Optional. The default is to use the same color as the outline color (option <code>chart_line_colors</code>).</p>"},{"location":"reference/skin-options/imagegenerator/#chart_line_width","title":"chart_line_width","text":"<p>Each chart line can be drawn using a different line width. This option is a list of these widths. If the number of lines exceeds the length of the list, then the widths wrap around to the beginning of the list. Optional. Default is <code>1, 1, 1</code>. Individual line widths can be overridden by using option <code>width</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#individual-line-options","title":"Individual line options","text":"<p>These are options that are set for individual lines.</p>"},{"location":"reference/skin-options/imagegenerator/#aggregate_interval","title":"aggregate_interval","text":"<p>The time period over which the data should be aggregated, in seconds.  Alternatively, a duration notation can be used.  Required if <code>aggregate_type</code> has been set. </p>"},{"location":"reference/skin-options/imagegenerator/#aggregate_type","title":"aggregate_type","text":"<p>The default is to plot every data point, but this is probably not a good idea for any plot longer than a day. By setting this option, you can aggregate data by a set time interval. Available aggregation types include <code>avg</code>, <code>count</code>, <code>cumulative</code>, <code>diff</code>, <code>last</code>, <code>max</code>, <code>min</code>, <code>sum</code>, and <code>tderiv</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#color","title":"color","text":"<p>This option is to override the color for an individual line. Optional. Default is to use the color in <code>chart_line_colors</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#data_type","title":"data_type","text":"<p>The SQL data type to be used for this plot line. For more information, see the section Including a type more than once in a plot. Optional. The default is to use the section name.</p>"},{"location":"reference/skin-options/imagegenerator/#fill_color","title":"fill_color","text":"<p>This option is to override the fill color for a bar chart. Optional. Default is to use the color in <code>chart_fill_colors</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#label","title":"label","text":"<p>The label to be used for this plot line in the top label. Optional. The default is to use the SQL variable name.</p>"},{"location":"reference/skin-options/imagegenerator/#line_gap_fraction","title":"line_gap_fraction","text":"<p>If there is a gap between data points bigger than this fractional amount of the x-axis, then a gap will be drawn, rather than a connecting line. See Section Line gaps. Optional. The default is to always draw the line.</p>"},{"location":"reference/skin-options/imagegenerator/#line_type","title":"line_type","text":"<p>The type of line to be used. Choices are <code>solid</code> or <code>none</code>. Optional. Default is <code>solid</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#marker_size","title":"marker_size","text":"<p>The size of the marker. Optional. Default is <code>8</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#marker_type","title":"marker_type","text":"<p>The type of marker to be used to mark each data point. Choices are <code>cross</code>, <code>x</code>, <code>circle</code>, <code>box</code>, or <code>none</code>. Optional. Default is <code>none</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#plot_type","title":"plot_type","text":"<p>The type of plot for this line. Choices are <code>line</code>, <code>bar</code>, or <code>vector</code>. Optional. Default is <code>line</code>.</p>"},{"location":"reference/skin-options/imagegenerator/#width","title":"width","text":"<p>This option is to override the line width for an individual line. Optional. Default is to use the width in <code>chart_line_width</code>.</p>"},{"location":"reference/skin-options/introduction/","title":"Skin options","text":"<p>The skin configuration options control report behavior, including:</p> <ul> <li>how files and plots are generated</li> <li>how files and plots look</li> <li>how data are displayed</li> <li>how units are displayed</li> <li>which language is used</li> </ul> <p>Options that control the behavior of a skin are specified in the skin configuration file <code>skin.conf</code>.</p> <p>Language-dependent labels and texts are specified in the language files, located in the skin's <code>lang</code> directory.</p> <p>UTF-8 is used throughout the skin configuration file, just as it is throughout the WeeWX configuration file.</p>"},{"location":"reference/skin-options/labels/","title":"[Labels]","text":"<p>This section defines various labels.</p>"},{"location":"reference/skin-options/labels/#hemispheres","title":"hemispheres","text":"<p>Comma separated list for the labels to be used for the four hemispheres. The default is <code>N, S, E, W</code>.</p>"},{"location":"reference/skin-options/labels/#latlon_formats","title":"latlon_formats","text":"<p>Comma separated list for the formatting to be used when converting latitude and longitude to strings. There should be three elements:</p> <ol> <li>The format to be used for whole degrees of latitude</li> <li>The format to be used for whole degrees of longitude</li> <li>The format to be used for minutes.</li> </ol> <p>This allows you to decide whether you want leading zeroes. The default includes leading zeroes and is <code>\"%02d\", \"%03d\", \"%05.2f\"</code>.</p>"},{"location":"reference/skin-options/labels/#generic","title":"[[Generic]]","text":"<p>This section specifies default labels to be used for each observation type. For example, options</p> <pre><code>inTemp  = Temperature inside the house\noutTemp = Outside Temperature\nUV      = UV Index\n</code></pre> <p>would cause the given labels to be used for plots of <code>inTemp</code> and <code>outTemp</code>. If no option is given, then the observation type itself will be used (e.g., <code>outTemp</code>).</p>"},{"location":"reference/skin-options/texts/","title":"[Texts]","text":"<p>The section <code>[Texts]</code> holds static texts that are used in the templates. Generally there are multiple language files, one for each supported language, named by the language codes defined in ISO\u00a0639-1. The entries give the translation of the texts to the target language. For example,</p> <pre><code>[Texts]\n\"Current Conditions\" = \"Aktuelle Werte\"\n</code></pre> <p>would cause \"Aktuelle Werte\" to be used whereever <code>$gettext(\"Current Conditions\"</code> appeared. See the section on <code>$gettext</code>.</p> <p>Note</p> <p>Strings that include commas must be included in single or double quotes. Otherwise, they will be misinterpreted as a list.</p>"},{"location":"reference/skin-options/units/","title":"[Units]","text":"<p>This section controls how units are managed and displayed.</p>"},{"location":"reference/skin-options/units/#groups","title":"[[Groups]]","text":"<p>This section lists all the Unit Groups and specifies which measurement unit is to be used for each one of them.</p> <p>As there are many different observational measurement types (such as <code>outTemp</code>, <code>barometer</code>, etc.) used in WeeWX (more than 50 at last count), it would be tedious, not to say possibly inconsistent, to specify a different measurement system for each one of them. At the other extreme, requiring all of them to be \"U.S. Customary\" or \"Metric\" seems overly restrictive. WeeWX has taken a middle route and divided all the different observation types into 12 different unit groups. A unit group is something like <code>group_temperature</code>. It represents the measurement system to be used by all observation types that are measured in temperature, such as inside temperature (type <code>inTemp</code>), outside temperature (<code>outTemp</code>), dewpoint (<code>dewpoint</code>), wind chill (<code>windchill</code>), and so on. If you decide that you want unit group <code>group_temperature</code> to be measured in <code>degree_C</code> then you are saying all members of its group will be reported in degrees Celsius.</p> <p>Note that the measurement unit is always specified in the singular. That is, specify <code>degree_C</code> or <code>foot</code>, not <code>degrees_C</code> or <code>feet</code>. See the reference section Units for more information, including a concise summary of the groups, their members, and which options can be used for each group.</p>"},{"location":"reference/skin-options/units/#group_altitude","title":"group_altitude","text":"<p>Which measurement unit to be used for altitude. Possible options are <code>foot</code> or <code>meter</code>.</p>"},{"location":"reference/skin-options/units/#group_direction","title":"group_direction","text":"<p>Which measurement unit to be used for direction. The only option is <code>degree_compass</code>.</p>"},{"location":"reference/skin-options/units/#group_distance","title":"group_distance","text":"<p>Which measurement unit to be used for distance (such as for wind run). Possible options are <code>mile</code> or <code>km</code>.</p>"},{"location":"reference/skin-options/units/#group_moisture","title":"group_moisture","text":"<p>The measurement unit to be used for soil moisture. The only option is <code>centibar</code>.</p>"},{"location":"reference/skin-options/units/#group_percent","title":"group_percent","text":"<p>The measurement unit to be used for percentages. The only option is <code>percent</code>.</p>"},{"location":"reference/skin-options/units/#group_pressure","title":"group_pressure","text":"<p>The measurement unit to be used for pressure. Possible options are one of <code>inHg</code> (inches of mercury), <code>mbar</code>, <code>hPa</code>, or <code>kPa</code>.</p>"},{"location":"reference/skin-options/units/#group_pressurerate","title":"group_pressurerate","text":"<p>The measurement unit to be used for rate of change in pressure. Possible options are one of <code>inHg_per_hour</code> (inches of mercury per hour), <code>mbar_per_hour</code>, <code>hPa_per_hour</code>, or <code>kPa_per_hour</code>.</p>"},{"location":"reference/skin-options/units/#group_radiation","title":"group_radiation","text":"<p>The measurement unit to be used for radiation. The only option is <code>watt_per_meter_squared</code>.</p>"},{"location":"reference/skin-options/units/#group_rain","title":"group_rain","text":"<p>The measurement unit to be used for precipitation. Options are <code>inch</code>, <code>cm</code>, or <code>mm</code>.</p>"},{"location":"reference/skin-options/units/#group_rainrate","title":"group_rainrate","text":"<p>The measurement unit to be used for rate of precipitation. Possible options are one of <code>inch_per_hour</code>, <code>cm_per_hour</code>, or <code>mm_per_hour</code>.</p>"},{"location":"reference/skin-options/units/#group_speed","title":"group_speed","text":"<p>The measurement unit to be used for wind speeds. Possible options are one of <code>mile_per_hour</code>, <code>km_per_hour</code>, <code>knot</code>, <code>meter_per_second</code>, or <code>beaufort</code>.</p>"},{"location":"reference/skin-options/units/#group_speed2","title":"group_speed2","text":"<p>This group is similar to <code>group_speed</code>, but is used for calculated wind speeds which typically have a slightly higher resolution. Possible options are one <code>mile_per_hour2</code>, <code>km_per_hour2</code>, <code>knot2</code>, or <code>meter_per_second2</code>.</p>"},{"location":"reference/skin-options/units/#group_temperature","title":"group_temperature","text":"<p>The measurement unit to be used for temperatures. Options are <code>degree_C</code>, <code>degree_E</code>, <code>degree_F</code>, or <code>degree_K</code>.</p>"},{"location":"reference/skin-options/units/#group_volt","title":"group_volt","text":"<p>The measurement unit to be used for voltages. The only option is <code>volt</code>.</p>"},{"location":"reference/skin-options/units/#stringformats","title":"[[StringFormats]]","text":"<p>This section is used to specify what string format is to be used for each unit when a quantity needs to be converted to a string. Typically, this happens with y-axis labeling on plots and for statistics in HTML file generation. For example, the options</p> <pre><code>degree_C = %.1f\ninch     = %.2f\n</code></pre> <p>would specify that the given string formats are to be used when formatting any temperature measured in degrees Celsius or any precipitation amount measured in inches, respectively. The formatting codes are those used by Python, and are very similar to C's <code>sprintf()</code> codes.</p> <p>You can also specify what string to use for an invalid or unavailable measurement (value <code>None</code>). For example,</p> <pre><code>NONE = \" N/A \"\n</code></pre>"},{"location":"reference/skin-options/units/#labels","title":"[[Labels]]","text":"<p>This section specifies what label is to be used for each measurement unit type. For example, the options</p> <pre><code>degree_F = \u00b0F\ninch     = ' in'\n</code></pre> <p>would cause all temperatures to have unit labels <code>\u00b0F</code> and all precipitation to have labels <code>in</code>. If any special symbols are to be used (such as the degree sign) they should be encoded in UTF-8. This is generally what most text editors use if you cut-and-paste from a character map.</p> <p>If the label includes two values, then the first is assumed to be the singular form, the second the plural form. For example,</p> <pre><code>foot   = \" foot\",   \" feet\"\n...\nday    = \" day\",    \" days\"\nhour   = \" hour\",   \" hours\"\nminute = \" minute\", \" minutes\"\nsecond = \" second\", \" seconds\"\n</code></pre>"},{"location":"reference/skin-options/units/#timeformats","title":"[[TimeFormats]]","text":"<p>This section specifies what time format to use for different time contexts. For example, you might want to use a different format when displaying the time in a day, versus the time in a month. It uses strftime() formats. The default looks like this:</p> <pre><code>    [[TimeFormats]]\nhour        = %H:%M\nday         = %X\nweek        = %X (%A)\nmonth       = %x %X\nyear        = %x %X\nrainyear    = %x %X\ncurrent     = %x %X\nephem_day   = %X\nephem_year  = %x %X\n</code></pre> <p>The specifiers <code>%x</code>, <code>%X</code>, and <code>%A</code> code locale dependent date, time, and weekday names, respectively. Hence, if you set an appropriate environment variable <code>LANG</code>, then the date and times should follow local conventions (see section Environment variable LANG for details on how to do this). However, the results may not look particularly nice, and you may want to change them. For example, I use this in the U.S.:</p> <pre><code>    [[TimeFormats]]\n#\n# More attractive formats that work in most Western countries.\n#\nday        = %H:%M\nweek       = %H:%M on %A\nmonth      = %d-%b-%Y %H:%M\nyear       = %d-%b-%Y %H:%M\nrainyear   = %d-%b-%Y %H:%M\ncurrent    = %d-%b-%Y %H:%M\nephem_day  = %H:%M\nephem_year = %d-%b-%Y %H:%M\n</code></pre> <p>The last two formats, <code>ephem_day</code> and <code>ephem_year</code> allow the formatting to be set for almanac times The first, <code>ephem_day</code>, is used for almanac times within the day, such as sunrise or sunset. The second, <code>ephem_year</code>, is used for almanac times within the year, such as the next equinox or full moon.</p>"},{"location":"reference/skin-options/units/#ordinates","title":"[[Ordinates]]","text":""},{"location":"reference/skin-options/units/#directions","title":"directions","text":"<p>Set to the abbreviations to be used for ordinal directions. By default, this is <code>N, NNE, NE, ENE, E, ESE, SE, SSE, S, SSW, SW, WSW, W, WNW, NW, NNW, N</code>.</p>"},{"location":"reference/skin-options/units/#degreedays","title":"[[DegreeDays]]","text":""},{"location":"reference/skin-options/units/#heating_base","title":"heating_base","text":""},{"location":"reference/skin-options/units/#cooling_base","title":"cooling_base","text":""},{"location":"reference/skin-options/units/#growing_base","title":"growing_base","text":"<p>Set to the base temperature for calculating heating, cooling, and growing degree-days, along with the unit to be used. Examples:</p> <pre><code>heating_base = 65.0, degree_F\ncooling_base = 20.0, degree_C\ngrowing_base = 50.0, degree_F\n</code></pre>"},{"location":"reference/skin-options/units/#trend","title":"[[Trend]]","text":""},{"location":"reference/skin-options/units/#time_delta","title":"time_delta","text":"<p>Set to the time difference over which you want trends to be calculated. Alternatively, a duration notation can be used. The default is 3 hours.</p>"},{"location":"reference/skin-options/units/#time_grace","title":"time_grace","text":"<p>When searching for a previous record to be used in calculating a trend, a record within this amount of <code>time_delta</code> will be accepted. Default is 300 seconds.</p>"},{"location":"reference/weewx-options/data-bindings/","title":"[DataBindings]","text":"<p>A \"data binding\" associates storage characteristics with a specific database. Each binding contains a database from the <code>[Databases]</code> section plus parameters such as schema, table name, and mechanism for aggregating data.</p>"},{"location":"reference/weewx-options/data-bindings/#wx_binding","title":"[[wx_binding]]","text":"<p>This is the binding normally used for weather data. A typical <code>[[wx_binding]]</code> section looks something like this:</p> <pre><code>[[wx_binding]]\ndatabase = archive_sqlite\ntable_name = archive\nmanager = weewx.manager.DaySummaryManager\nschema = schemas.wview_extended.schema\n</code></pre> <p>What follows is more detailed information about each of the binding options.</p>"},{"location":"reference/weewx-options/data-bindings/#database","title":"database","text":"<p>The actual database to be used \u2014 it should match one of the sections in <code>[Databases]</code>. Should you decide to use a MySQL database, instead of the default SQLite database, this is the place to change it. See the section Configuring MySQL/MariaDB for details.</p> <p>Required.</p>"},{"location":"reference/weewx-options/data-bindings/#table_name","title":"table_name","text":"<p>Internally, the archive data is stored in one, long, flat table. This is the name of that table. Normally this does not need to be changed.</p> <p>Optional. Default is <code>archive</code>.</p>"},{"location":"reference/weewx-options/data-bindings/#manager","title":"manager","text":"<p>The name of the class to be used to manage the table.</p> <p>Optional. Default is class <code>weewx.manager.DaySummaryManager</code>. This class stores daily summaries in the database. Normally, this does not need to be changed.</p>"},{"location":"reference/weewx-options/data-bindings/#schema","title":"schema","text":"<p>A Python structure holding the schema to be used to initialize the database. After initialization, it is not used.</p> <p>Optional. Default is <code>schemas.wview_extended.schema</code>, which is a superset of the schema used by the wview weather system.</p>"},{"location":"reference/weewx-options/database-types/","title":"[DatabaseTypes]","text":"<p>This section defines default parameters for various databases.</p>"},{"location":"reference/weewx-options/database-types/#sqlite","title":"[[SQLite]]","text":"<p>This section defines default values for SQLite databases. They can be overridden by individual databases.</p>"},{"location":"reference/weewx-options/database-types/#driver","title":"driver","text":"<p>The sqlite driver name. Required.</p>"},{"location":"reference/weewx-options/database-types/#sqlite_root","title":"SQLITE_ROOT","text":"<p>The location of the directory that contains the SQLite database files. If this is a relative path, it is relative to <code>WEEWX_ROOT</code>.</p>"},{"location":"reference/weewx-options/database-types/#timeout","title":"timeout","text":"<p>When the database is accessed by multiple threads and one of these threads modifies the database, the SQLite database is locked until the transaction is completed. The timeout option specifies how long other threads should wait in seconds for the lock to go away before raising an exception.</p> <p>The default is <code>5</code>.</p>"},{"location":"reference/weewx-options/database-types/#isolation_level","title":"isolation_level","text":"<p>Set the current isolation level. See the pysqlite documentation on isolation levels for more information. There is no reason to change this, but it is here for completeness.</p> <p>Default is <code>None</code> (autocommit).</p>"},{"location":"reference/weewx-options/database-types/#mysql","title":"[[MySQL]]","text":"<p>This section defines default values for MySQL databases. They can be overridden by individual databases.</p> <p>Note</p> <p>If you choose the MySQL database, it is assumed that you know how to administer it. In particular, you will have to set up a user with appropriate create and modify privileges.</p> <p>Tip</p> <p>In what follows, if you wish to connect to a MySQL server using a Unix socket instead of a TCP/IP connection, set <code>host</code> to an empty string (<code>''</code>), then add an option <code>unix_socket</code> with the socket address. <pre><code>[[MySQL]]\n...\nhost = ''\nunix_socket = /var/run/mysqld/mysqld.sock\n...\n</code></pre></p>"},{"location":"reference/weewx-options/database-types/#driver_1","title":"driver","text":"<p>The MySQL driver name. Required.</p>"},{"location":"reference/weewx-options/database-types/#host","title":"host","text":"<p>The name of the server on which the database is located.</p> <p>Default is <code>localhost</code>.</p>"},{"location":"reference/weewx-options/database-types/#user","title":"user","text":"<p>The username to be used to log into the server.</p> <p>Required.</p>"},{"location":"reference/weewx-options/database-types/#password","title":"password","text":"<p>The password.</p> <p>Required.</p>"},{"location":"reference/weewx-options/database-types/#port","title":"port","text":"<p>The port number to be used.</p> <p>Optional.</p> <p>Default is <code>3306</code>.</p>"},{"location":"reference/weewx-options/database-types/#engine","title":"engine","text":"<p>The type of MySQL database storage engine to be used. This should not be changed without a good reason. Default is <code>INNODB</code>.</p>"},{"location":"reference/weewx-options/databases/","title":"[Databases]","text":"<p>This section lists actual databases. The name of each database is given in double brackets, for example, <code>[[archive_sqlite]]</code>. Each database section contains the parameters necessary to create and manage the database. The number of parameters varies depending on the type of database.</p>"},{"location":"reference/weewx-options/databases/#archive_sqlite","title":"[[archive_sqlite]]","text":"<p>This definition uses the SQLite database engine to store data. SQLite is open-source, simple, lightweight, highly portable, and memory efficient. For most purposes it serves nicely.</p>"},{"location":"reference/weewx-options/databases/#database_type","title":"database_type","text":"<p>Set to <code>SQLite</code> to signal that this is a SQLite database. The definitions that go with type <code>SQLite</code> are defined in section <code>[DatabaseTypes] / [[SQLite]]</code>.</p>"},{"location":"reference/weewx-options/databases/#database_name","title":"database_name","text":"<p>The path to the SQLite file. If the path is relative, it is relative to <code>SQLITE_ROOT</code>. Default is <code>weewx.sdb</code>.</p>"},{"location":"reference/weewx-options/databases/#timeout","title":"timeout","text":"<p>How many seconds to wait before raising an error when a table is locked. Default is <code>5</code>.</p>"},{"location":"reference/weewx-options/databases/#archive_mysql","title":"[[archive_mysql]]","text":"<p>This definition uses the MySQL database engine to store data. It is free, highly-scalable, but more complicated to administer.</p>"},{"location":"reference/weewx-options/databases/#database_type_1","title":"database_type","text":"<p>Set to <code>MySQL</code> to signal that this is a MySQL database. The definitions that go with type <code>MySQL</code> are defined in section <code>[DatabaseTypes] / [[MySQL]]</code>.</p>"},{"location":"reference/weewx-options/databases/#database_name_1","title":"database_name","text":"<p>The name of the database. Default is <code>weewx</code>.</p>"},{"location":"reference/weewx-options/engine/","title":"[Engine]","text":"<p>This section is used to configure the internal service engine in WeeWX. It is for advanced customization. Details on how to do this can be found in the Services section of the Customization Guide.</p>"},{"location":"reference/weewx-options/engine/#services","title":"[[Services]]","text":"<p>Internally, WeeWX consists of many services, each responsible for some aspect of the program's functionality. After an event happens, such as the arrival of a new LOOP packet, any interested service gets a chance to do some useful work on the event. For example, a service might manipulate the packet, print it out, store it in a database, etc. This section controls which services are loaded and in what order they get their opportunity to do that work. Before WeeWX v2.6, this section held one, long, option called <code>service_list</code>, which held the names of all the services that should be run. Since then, this list has been broken down into smaller lists.</p> <p>Service lists are run in the order given below.</p> Service list Function <code>prep_services</code> Perform any actions before the main loop is run. <code>data_services</code> Augment data, before it is processed. <code>process_services</code> Process, filter, and massage the data. <code>xtype_services</code> Add derived types to the data stream. <code>archive_services</code> Record the data in a database. <code>restful_services</code> Upload processed data to an external RESTful service. <code>report_services</code> Run any reports. <p>For reference, here is the standard set of services that are run with the default distribution.</p> Service list Function <code>prep_services</code> <code>weewx.engine.StdTimeSynch</code> <code>data_services</code> <code>process_services</code> <code>weewx.engine.StdConvert</code> <code>weewx.engine.StdCalibrate</code> <code>weewx.engine.StdQC</code> <code>weewx.wxservices.StdWXCalculate</code> <code>xtype_services</code> <code>weewx.wxxtypes.StdWXXTypes</code> <code>weewx.wxxtypes.StdPressureCooker</code> <code>weewx.wxxtypes.StdRainRater</code> <code>weewx.wxxtypes.StdDelta</code> <code>archive_services</code> <code>weewx.engine.StdArchive</code> <code>restful_services</code> <code>weewx.restx.StdStationRegistry</code> <code>weewx.restx.StdWunderground</code> <code>weewx.restx.StdPWSweather</code> <code>weewx.restx.StdCWOP</code> <code>weewx.restx.StdWOW</code> <code>weewx.restx.StdAWEKAS</code> <code>report_services</code> <code>weewx.engine.StdPrint</code> <code>weewx.engine.StdReport</code> <p>If you're the type who likes to clean out your car trunk after every use, then you may also be the type who wants to pare this down to the bare minimum. However, this will only make a slight difference in execution speed and memory use.</p>"},{"location":"reference/weewx-options/engine/#prep_services","title":"prep_services","text":"<p>These services get called before any others. They are typically used to prepare the console. For example, the service <code>weewx.wxengine.StdTimeSynch</code>, which is responsible for making sure the console's clock is up-to-date, is a member of this group.</p>"},{"location":"reference/weewx-options/engine/#data_services","title":"data_services","text":"<p>Augment data before processing. Typically, this means adding fields to a LOOP packet or archive record.</p>"},{"location":"reference/weewx-options/engine/#process_services","title":"process_services","text":"<p>Services in this group tend to process any incoming data. They typically do things like quality control, or unit conversion, or sensor calibration.</p>"},{"location":"reference/weewx-options/engine/#xtype_services","title":"xtype_services","text":"<p>These are services that use the WeeWX XTypes system to augment the data. Typically, they calculate derived variables such as <code>dewpoint</code>, <code>ET</code>, <code>rainRate</code>, etc.</p>"},{"location":"reference/weewx-options/engine/#archive_services","title":"archive_services","text":"<p>Once data have been processed, services in this group archive them.</p>"},{"location":"reference/weewx-options/engine/#restful_services","title":"restful_services","text":"<p>RESTful services, such as the Weather Underground, or CWOP, are in this group. They need processed data that have been archived, hence they are run after the preceeding groups.</p>"},{"location":"reference/weewx-options/engine/#report_services","title":"report_services","text":"<p>The various reporting services run in this group, including the standard reporting engine.</p>"},{"location":"reference/weewx-options/general/","title":"General options","text":"<p>The options declared at the top are not part of any section.</p>"},{"location":"reference/weewx-options/general/#debug","title":"debug","text":"<p>Set to <code>1</code> to have the program perform extra debug checks, as well as emit extra information in the log file. This is strongly recommended if you are having trouble. Set to <code>2</code> for even more information. Otherwise, set to <code>0</code>. Default is <code>0</code> (no debug).</p>"},{"location":"reference/weewx-options/general/#weewx_root","title":"WEEWX_ROOT","text":"<p>Set to the root directory of the WeeWX file hierarchy for this station. Normally, this is set automatically by the installation process. Required. No default.</p>"},{"location":"reference/weewx-options/general/#user_root","title":"USER_ROOT","text":"<p>The location of the user package, relative to <code>WEEWX_ROOT</code>. WeeWX will look for any user-installed extensions in this directory. Default is <code>bin/user</code>.</p>"},{"location":"reference/weewx-options/general/#log_success","title":"log_success","text":"<p>If set to <code>true</code>, the default will be to log a successful operation (for example, the completion of a report, or uploading to the Weather Underground, etc.) to the system log. Default is <code>true</code>.</p>"},{"location":"reference/weewx-options/general/#log_failure","title":"log_failure","text":"<p>If set to <code>true</code>, the default will be to log an unsuccessful operation (for example, failure to generate a report, or failure to upload to the Weather Underground, etc.) to the system log. Default is <code>true</code>.</p>"},{"location":"reference/weewx-options/general/#socket_timeout","title":"socket_timeout","text":"<p>Set to how long to wait in seconds before declaring a socket time out. This is used by many services such as FTP, or the uploaders. Twenty (20) seconds is reasonable. Default is <code>20</code>.</p>"},{"location":"reference/weewx-options/general/#gc_interval","title":"gc_interval","text":"<p>Set to how often garbage collection should be performed in seconds by the Python runtime engine. Default is every <code>10800</code> (3 hours).</p>"},{"location":"reference/weewx-options/general/#loop_on_init","title":"loop_on_init","text":"<p>Normally, if a hardware driver fails to load, WeeWX will exit, on the assumption that there is likely a configuration problem and so retries are useless. However, in some cases, drivers can fail to load for intermittent reasons, such as a network failure. In these cases, it may be useful to have WeeWX do a retry. Setting this option to <code>true</code> will cause WeeWX to keep retrying indefinitely. Default is <code>false</code>.`</p>"},{"location":"reference/weewx-options/general/#retry_wait","title":"retry_wait","text":"<p>If a retry is called for, how long to wait in seconds. Default is <code>60</code>.</p>"},{"location":"reference/weewx-options/introduction/","title":"Application options","text":"<p>Application options are specified in a configuration file, nominally called <code>weewx.conf</code>. This is a big text file, which holds the configuration information about your installation of WeeWX. This includes things such as:</p> <ul> <li>The type of hardware you have.</li> <li>The name of your station.</li> <li>What kind of database to use and where is it located.</li> <li>How to recognize out-of-range observations, etc.</li> </ul> <p>Note</p> <p>The location of the configuration file will depend on your installation method. For example, if you installed using pip, then the nominal location is <code>~/weewx-data/weewx.conf</code>. For other installation methods, the location depends on your operating system. See the section Where to find things.</p> <p>Note</p> <p>There is another configuration file for presentation-specific options. This file is called <code>skin.conf</code>, and there is one for each skin. It is described in the reference guide  Skin options.</p> <p>The following sections are the definitive guide to the many configuration options available. There are many more options than you are likely to need \u2014 you can safely ignore most of them. The truly important ones, the ones you are likely to have to customize for your station, are highlighted.</p> <p>Default values are provided for many options, meaning that if they are not listed in the configuration file at all, WeeWX will pick sensible values. When the documentation gives a \"default value\" this is what it means.</p>"},{"location":"reference/weewx-options/introduction/#option-hierarchy","title":"Option hierarchy","text":"<p>In general, options closer to the \"root\" of weewx.conf are overridden by options closer to the leaves. Here's an example:</p> <pre><code>log_success = false\n...\n[StdRESTful]\n    log_success = true\n    ...\n    [[Wunderground]]\n        log_success = false     # Wunderground will not be logged\n        ...\n    [[WOW]]\n        log_success = true      # WOW will be logged\n        ...\n    [[CWOP]]\n                                # CWOP will be logged (inherits from [StdRESTful])\n        ...\n</code></pre> <p>In this example, at the top level, <code>log_success</code> is set to false. So, unless set otherwise, successful operations will not be logged. However, for <code>StdRESTful</code> operations, it is set to true, so for these services, successful operations will be logged, unless set otherwise by an individual service. Looking at the individual services, successful operations for</p> <ul> <li><code>Wunderground</code> will not be logged (set explicitly)</li> <li><code>WOW</code> will be logged (set explicitly)</li> <li><code>CWOP</code> will be logged (inherits from <code>StdRESTful</code>)</li> </ul>"},{"location":"reference/weewx-options/introduction/#boolean-values","title":"Boolean values","text":"<p>The following will evaluate True: <code>true</code>, <code>True</code>, <code>yes</code>, <code>Yes</code>, <code>1</code>.</p> <p>The following will evaluate False: <code>false</code>, <code>False</code>, <code>no</code>, <code>No</code>, <code>0</code>.</p>"},{"location":"reference/weewx-options/stations/","title":"[Station]","text":"<p>This section covers options relating to your weather station setup.</p>"},{"location":"reference/weewx-options/stations/#general-settings","title":"General Settings","text":"<p>This applies to all station types</p>"},{"location":"reference/weewx-options/stations/#location","title":"location","text":"<p>The station location should be a UTF-8 string that describes the geography of where your weather station is located. Required. No default.</p> <pre><code>location = \"A small ranch in Kentucky\"\n</code></pre>"},{"location":"reference/weewx-options/stations/#latitude","title":"latitude","text":""},{"location":"reference/weewx-options/stations/#longitude","title":"longitude","text":"<p>The lat/lon should be set in decimal degrees, negative for southern and western hemispheres, respectively. Required. No default.</p> <pre><code>latitude = 38.8977\nlongitude = -77.0366\n</code></pre>"},{"location":"reference/weewx-options/stations/#altitude","title":"altitude","text":"<p>Normally the altitude is downloaded from your hardware, but not all stations support this. Set to the altitude of your console and the unit used to measure that altitude.</p> <p>Note</p> <p>If you live in a high-rise building, the altitude of the console (which is where the pressure gauge is located), can be considerably different from the ground altitude. You want the altitude of the console.</p> <p>Example:</p> <pre><code>altitude = 700, foot\n</code></pre> <p>An example in meters: <pre><code>altitude = 220, meter\n</code></pre></p>"},{"location":"reference/weewx-options/stations/#station_type","title":"station_type","text":"<p>Set to the type of hardware you are using.</p> <pre><code>station_type = Simulator\n</code></pre> <p>Note</p> <p>Whatever option you choose, you must have a matching section in your configuration file. For example, if you choose <code>station_type = Simulator</code>, then you will need a [Simulator] section. While you can do this by hand, it is tedious and error-prone. The better way to add the needed section is by using the utility <code>weectl station reconfigure</code>. If the needed section is missing, this utility will automatically inject it into the configuration file.</p> <p>Valid station types include:</p> Option Description Simulator A software weather station simulator. Useful for testing and debugging. AcuRite AcuRite 5-in-1 stations with USB interface. CC3000 RainWise CC3000 data logger. FineOffsetUSB Fine Offset 10xx, 20xx, and 30xx stations. TE923 Hideki TE923 stations. Ultimeter PeetBros Ultimeter stations Vantage Davis Vantage weather stations. WMR100 Oregon Scientific WMR100 series stations. WMR300 Oregon Scientific WMR300 series stations. WMR9x8 Oregon Scientific WMR-918/968 series stations WS1 Argent Data Systems WS1 stations. WS23xx La Crosse 23xx stations. WS28xx La Crosse 28xx stations."},{"location":"reference/weewx-options/stations/#station_url","title":"station_url","text":"<p>If you have a website, you may optionally specify an URL for its HTML server. It will be included in the RSS file generated by WeeWX and, if you choose to opt into the station registry, it will also be included in the map of WeeWX stations. It must be a valid URL. In particular, it must start with either <code>http://</code> or <code>https://</code>.</p> <p>Example:</p> <pre><code>station_url = https://www.mywebsite.com\n</code></pre>"},{"location":"reference/weewx-options/stations/#rain_year_start","title":"rain_year_start","text":"<p>Normally the start of the rain year is downloaded from your hardware, but not all stations support this. Set to the start of your rain year, for example, if your rain year starts in October, set it to <code>10</code>. Default is <code>1</code>.</p> <pre><code>rain_year_start = 1\n</code></pre>"},{"location":"reference/weewx-options/stations/#week_start","title":"week_start","text":"<p>Start of the week. <code>0</code>=Monday, <code>1</code>= Tuesday, ... , <code>6</code> = Sunday. Default is <code>6</code> (Sunday).</p> <pre><code>week_start = 6\n</code></pre>"},{"location":"reference/weewx-options/stations/#simulator","title":"[Simulator]","text":"<p>This section is for options relating to the software weather station simulator that comes with WeeWX.</p>"},{"location":"reference/weewx-options/stations/#loop_interval","title":"loop_interval","text":"<p>The time (in seconds) between emitting loop packets. Default is <code>2.5</code>.</p>"},{"location":"reference/weewx-options/stations/#mode","title":"mode","text":"<p>One of either <code>simulator</code> or <code>generator</code>. Default is <code>simulator</code>.</p> mode Description <code>simulator</code> Real-time simulator. It will sleep between emitting packets. <code>generator</code> Emit packets as fast as it can. Useful for testing."},{"location":"reference/weewx-options/stations/#start","title":"start","text":"<p>The local start time for the generator in the format <code>YYYY-mm-ddTHH:MM</code>. An example would be <code>2012-03-30T18:30</code>. This would code 30-March-2012, at 6:30pm, local time. Optional. Default is the present time.</p>"},{"location":"reference/weewx-options/stations/#acurite","title":"[AcuRite]","text":"<p>This section is for options relating to the AcuRite 5-in-1 series of weather stations with USB connectors.</p>"},{"location":"reference/weewx-options/stations/#model","title":"model","text":"<p>Set to the station model. For example, \"AcuRite 01035\", \"AcuRite 01036\", or \"02032C\"</p>"},{"location":"reference/weewx-options/stations/#use_constants","title":"use_constants","text":"<p>Some stations (01035, 01036) use the HP038 sensor, which contains constants that define how the pressure and temperature should be interpreted. Other stations (02032, 02064) use the MS5607 sensor, which requires a different calculation to determine the pressure and temperature from the sensor. When <code>use_constants=True</code>, the driver will use the constants to determine which type of sensor is in the station and will adjust the calculation accordingly. A value of <code>False</code> causes the driver to use a linear approximation, regardless of the type of sensors. The default is <code>True</code>.</p>"},{"location":"reference/weewx-options/stations/#cc3000","title":"[CC3000]","text":"<p>This section is for options relating to the RainWise Mark III weather stations and CC3000 data logger.</p>"},{"location":"reference/weewx-options/stations/#port","title":"port","text":"<p>The serial port, e.g., <code>/dev/ttyS0</code>. When using a USB-Serial converter, the port will be something like <code>/dev/ttyUSB0</code>. Default is <code>/dev/ttyUSB0</code></p>"},{"location":"reference/weewx-options/stations/#debug_serial","title":"debug_serial","text":""},{"location":"reference/weewx-options/stations/#debug_openclose","title":"debug_openclose","text":""},{"location":"reference/weewx-options/stations/#debug_checksum","title":"debug_checksum","text":"<p>The <code>debug_serial</code>, <code>debug_openclose</code>, and <code>debug_checksum</code> can be set to one to produce debugging information in the WeeWX log. The defaults for these options are zero.</p>"},{"location":"reference/weewx-options/stations/#logger_threshold","title":"logger_threshold","text":"<p>The <code>logger_threshold</code> specifies the number of records in the CC3000 station's memory at which the station memory's should be cleared. If logger_threshold is not specified, or if zero is specified, the station's memory will never be cleared. In this case, when the memory fills up, new archive records will no longer be saved in memory. Note: the CC3000's memory will hold about 35,000 records. The default is 0 (i.e., never clear memory).</p>"},{"location":"reference/weewx-options/stations/#max_tries","title":"max_tries","text":"<p>The <code>max_tries</code> option specifies how many times WeeWX should retry communicating with the CC3000 station when a serial communications error occurs. The default is <code>5</code>.</p>"},{"location":"reference/weewx-options/stations/#model_1","title":"model","text":"<p>The option <code>model</code> specifies the name of the hardware reported to WeeWX. The default is <code>CC3000</code>.</p>"},{"location":"reference/weewx-options/stations/#polling_interval","title":"polling_interval","text":"<p>The <code>polling_interval</code> determines how often WeeWX will query the station for data in seconds. The default is <code>2</code>. Note: 2 seconds is a good choice as this is the rate at which the CC3000 receives updates from the Rainwise Mark III Weather Station.</p>"},{"location":"reference/weewx-options/stations/#sensor_map","title":"sensor_map","text":"<p>This option defines the mapping between temperature values in the database and the remote sensors. Two additional temperature sensors are supported.</p> <p>For example, this would associate <code>extraTemp1</code> with the second optional temperature sensor:</p> <pre><code>[[sensor_map]]\n    extraTemp1 = TEMP 2\n</code></pre> <p>See the CC3000 Station data table in the Hardware guide for a complete listing of sensor names and the default database fields for each sensor.</p>"},{"location":"reference/weewx-options/stations/#use_station_time","title":"use_station_time","text":"<p>The <code>use_station_time</code> specifies whether the loop packets read by weewx should use the time specified in the CC3000 station packet or the computer time. The default is <code>True</code> (i.e., to use CC3000 station time).</p>"},{"location":"reference/weewx-options/stations/#fineoffsetusb","title":"[FineOffsetUSB]","text":"<p>This section is for options relating to the Fine Offset series of weather stations with USB connectors.</p> <p>Warning</p> <p>The following settings are highly recommended for Fine Offset stations. Using hardware record generation or adaptive polling is more likely to cause USB communication failure. Using hardware record generation will cause delays in report generation.</p> <pre><code>[FineOffsetUSB]\n    polling_mode = PERIODIC\n    polling_interval = 60\n[StdArchive]\n    record_generation = software\n</code></pre>"},{"location":"reference/weewx-options/stations/#model_2","title":"model","text":"<p>Set to the station model. For example, <code>WH1080</code>, <code>WS2080</code>, <code>WH3081</code>, etc.</p>"},{"location":"reference/weewx-options/stations/#polling_mode","title":"polling_mode","text":"<p>One of <code>PERIODIC</code> or <code>ADAPTIVE</code>. In <code>PERIODIC</code> mode, WeeWX queries the console at regular intervals determined by the polling_interval. In <code>ADAPTIVE</code> mode, WeeWX attempts to query the console at times when it is not reading data from the sensors or writing data to memory. See the section Polling mode and interval in the Hardware Guide for more details. The default is <code>PERIODIC</code>.</p>"},{"location":"reference/weewx-options/stations/#polling_interval_1","title":"polling_interval","text":"<p>The frequency, in seconds, at which WeeWX will poll the console for data. This setting applies only when the polling_mode is <code>PERIODIC</code>. Default is <code>60</code>.</p>"},{"location":"reference/weewx-options/stations/#data_format","title":"data_format","text":"<p>There are two classes of hardware, the 10xx/20xx consoles and the 30xx consoles. Unlike the 10xx/20xx consoles, the 30xx consoles record luminosity and UV, so they have a different data format. Use the <code>data_format</code> to indicate which type of hardware you have. Possible values are <code>1080</code> (for the 10xx and 20xx consoles) and <code>3080</code> (for the 30xx consoles). Default is <code>1080</code>.</p>"},{"location":"reference/weewx-options/stations/#te923","title":"[TE923]","text":"<p>This section is for options relating to the Hideki TE923 series of weather stations.</p>"},{"location":"reference/weewx-options/stations/#model_3","title":"model","text":"<p>Set to the station model. For example, Meade TE923W or TFA Nexus. Default is <code>TE923</code>.</p>"},{"location":"reference/weewx-options/stations/#sensor_map_1","title":"sensor_map","text":"<p>This option defines the mapping between temperature / humidity values in the database and the remote sensors. Up to 5 remote sensors are supported. A switch on each sensor determines which of 5 channels that sensor will use. For example, if the switch on the sensor is set to 3, the temperature from that sensor will be <code>t_3</code> and the humidity from that sensor will be <code>h_3</code>.</p> <p>For example, this would associate <code>outTemp</code> and <code>outHumidity</code> with sensor 4:</p> <pre><code>[[sensor_map]]\noutTemp = t_4\noutHumidity = h_4\n</code></pre> <p>See the TE923 section of the Hardware Guide for a complete listing of sensor names and their corresponding default database field.</p>"},{"location":"reference/weewx-options/stations/#ultimeter","title":"[Ultimeter]","text":"<p>This section is for options relating to the PeetBros Ultimeter weather stations.</p>"},{"location":"reference/weewx-options/stations/#port_1","title":"port","text":"<p>The serial port, e.g., <code>/dev/ttyS0</code>. When using a USB-Serial converter, the port will be something like <code>/dev/ttyUSB0</code>. Default is <code>/dev/ttyUSB0</code></p>"},{"location":"reference/weewx-options/stations/#model_4","title":"model","text":"<p>Set to the station model. For example, <code>Ultimeter 2000</code> or <code>Ultimeter 800</code>. Default is <code>Ultimeter</code>.</p>"},{"location":"reference/weewx-options/stations/#vantage","title":"[Vantage]","text":"<p>This section is for options relating to the Davis Vantage series of hardware (VantagePro, VantagePro2 or VantageVue).</p>"},{"location":"reference/weewx-options/stations/#type","title":"type","text":"<p>Set to either <code>serial</code>, for a serial or USB connection to the VantagePro (by far the most common), or to <code>ethernet</code> for the WeatherLinkIP. No default.</p>"},{"location":"reference/weewx-options/stations/#port_2","title":"port","text":"<p>If you chose <code>serial</code>, for <code>type</code>, then set to the serial port name used by the station. For example, <code>/dev/ttyUSB0</code> is a common location for USB ports, <code>/dev/ttyS0</code> for serial ports. Otherwise, not required. No default.</p>"},{"location":"reference/weewx-options/stations/#host","title":"host","text":"<p>If you chose <code>ethernet</code>, then specify either the IP address (e.g., <code>192.168.0.1</code>) or hostname (e.g., <code>console.mydomain.com</code>) to the console. Otherwise, not required. No default.</p>"},{"location":"reference/weewx-options/stations/#baudrate","title":"baudrate","text":"<p>Set to the baudrate of the station. The default is <code>19200</code>.</p>"},{"location":"reference/weewx-options/stations/#tcp_port","title":"tcp_port","text":"<p>The port where WeatherLinkIP will be listening. Default is <code>22222</code>.</p>"},{"location":"reference/weewx-options/stations/#tcp_send_delay","title":"tcp_send_delay","text":"<p>How long to wait in seconds after sending a socket packet to the WeatherLinkIP before looking for input. Default is <code>0.5</code>.</p>"},{"location":"reference/weewx-options/stations/#loop_request","title":"loop_request","text":"<p>The type of LOOP packet to use for LOOP data. Options are <code>1</code> (type LOOP1); <code>2</code> (type LOOP2); or <code>3</code> (alternate between). </p> <p>Type LOOP2 packets have the advantage of including gauge pressure, altimeter, heat index, THSW, and a few other types, so they do not have to be calculated in software. On the other hand, they do not include any of the extra Davis sensors, such as soil moisture, leaf temperature, etc.</p> <p>If you decide to alternate between packet types (option <code>3</code>), then the console will send a type LOOP1 packet, followed by a type LOOP2 packet. This means that for certain types, and depending on the options specified in <code>[StdWXCalculate]</code>, the value that is used by WeeWX can flip between hardware and software values with every packet. In this case, you should be sure to specify option <code>hardware</code> for types <code>pressure</code>, <code>altimeter</code>, <code>dewpoint</code>, <code>windchill</code>, and <code>heatindex</code>. This way, only hardware values will be used.</p> <p>Info</p> <p>Not all stations support LOOP2 data. You need firmware version 1.90 or later.</p> <p>Default is <code>1</code> (use LOOP1 type packets).</p>"},{"location":"reference/weewx-options/stations/#iss_id","title":"iss_id","text":"<p>Set to the ID number of the Integrated Sensor Suite (ISS). This is used in the formula to calculate reception quality for wireless stations. Default is <code>1</code>.</p>"},{"location":"reference/weewx-options/stations/#timeout","title":"timeout","text":"<p>How many seconds to wait for a response from the station before giving up. Default is <code>5</code>.</p>"},{"location":"reference/weewx-options/stations/#wait_before_retry","title":"wait_before_retry","text":"<p>How many seconds to wait before retrying. Unless you have a good reason to change it, this value should be left at the default, as it is long enough for the station to offer new data, but not so long as to go into a new loop packet (which arrive every 2 seconds). Default is <code>1.2</code>.</p>"},{"location":"reference/weewx-options/stations/#max_tries_1","title":"max_tries","text":"<p>How many times to try again before giving up. Default is <code>4</code>.</p>"},{"location":"reference/weewx-options/stations/#wmr100","title":"[WMR100]","text":"<p>This section is for options relating to the Oregon Scientific WMR100 series of weather stations with USB connectors.</p>"},{"location":"reference/weewx-options/stations/#model_5","title":"model","text":"<p>Set to the station model. For example, <code>WMR100</code> or <code>WMRS200</code>.</p>"},{"location":"reference/weewx-options/stations/#sensor_map_2","title":"sensor_map","text":"<p>This option defines the mapping between observations from remote sensors and the fields in the database.</p> <p>For example, this would associate <code>extraTemp1</code> with the remote T/H sensor on channel 5:</p> <pre><code>[[sensor_map]]\n    extraTemp1 = temperature_5\n</code></pre> <p>See the WMR100 section of the Hardware guide for a complete listing of sensor names and the default database fields for each sensor.</p>"},{"location":"reference/weewx-options/stations/#wmr300","title":"[WMR300]","text":"<p>This section is for options relating to the Oregon Scientific WMR300 series of weather stations with USB connectors.</p>"},{"location":"reference/weewx-options/stations/#model_6","title":"model","text":"<p>Set to the station model. For example, <code>WMR300</code> or <code>WMR300A</code>.</p>"},{"location":"reference/weewx-options/stations/#sensor_map_3","title":"sensor_map","text":"<p>This option defines the mapping between temperature / humidity values in the database and the remote sensors. Up to 8 remote sensors are supported.</p> <p>For example, this would associate <code>outTemp</code> and <code>outHumidity</code> with sensor 4:</p> <pre><code>[[sensor_map]]\n    outTemp = temperature_4\n    outHumidity = humidity_4\n</code></pre> <p>See the WMR300 section of the Hardware guide for a complete listing of sensor names and the default database fields for each sensor.</p>"},{"location":"reference/weewx-options/stations/#wmr9x8","title":"[WMR9x8]","text":"<p>This section is for options relating to the Oregon Scientific WMR-918/968 series of weather stations with serial connectors.</p>"},{"location":"reference/weewx-options/stations/#type_1","title":"type","text":"<p>For the moment, only <code>serial</code> is supported.</p>"},{"location":"reference/weewx-options/stations/#port_3","title":"port","text":"<p>Along with the serial option above, you must set the serial port name used by the station. For example, <code>/dev/ttyUSB0</code> is a common location for USB ports, <code>/dev/ttyS0</code> for serial ports. No default.</p>"},{"location":"reference/weewx-options/stations/#model_7","title":"model","text":"<p>Set to the station model. For example, <code>WMR968</code> or <code>WMR918</code>.</p>"},{"location":"reference/weewx-options/stations/#sensor_map_4","title":"sensor_map","text":"<p>This option defines the mapping between observations from remote sensors and the fields in the database.</p> <p>For example, this would associate <code>extraTemp1</code> with the remote T/H sensor on channel 5:</p> <pre><code>[[sensor_map]]\n    extraTemp1 = temperature_5\n    extraHumid1 = humidity_5\n</code></pre> <p>See the WMR9x8 sectioin of the Hardware guide for a complete listing of sensor names and the default database fields for each sensor.</p>"},{"location":"reference/weewx-options/stations/#ws1","title":"[WS1]","text":"<p>This section is for options relating to the Argent Data Systems WS1 weather stations.</p>"},{"location":"reference/weewx-options/stations/#mode_1","title":"mode","text":"<p>Select whether to connect via a serial line (option <code>serial</code>), or via an IP connection using TCP (option <code>tcp</code>), or UDP (option <code>udp</code>). Default is <code>serial</code>.</p>"},{"location":"reference/weewx-options/stations/#port_4","title":"port","text":"<p>The port to be used. For a serial connection, this will be something like <code>/dev/ttyUSB0</code>. For a TCP or UDP connection, it will be an IP address and port, such as <code>192.168.1.12:3000</code> Default is <code>/dev/ttyUSB0</code>.</p>"},{"location":"reference/weewx-options/stations/#polling_interval_2","title":"polling_interval","text":"<p>The <code>polling_interval</code> determines how often in seconds that WeeWX will query the station for data. The default is <code>1</code>.</p>"},{"location":"reference/weewx-options/stations/#ws23xx","title":"[WS23xx]","text":"<p>This section is for options relating to the La Crosse WS-23xx series of weather stations.</p>"},{"location":"reference/weewx-options/stations/#port_5","title":"port","text":"<p>The serial port, e.g., <code>/dev/ttyS0</code>. When using a USB-Serial converter, the port will be something like <code>/dev/ttyUSB0</code>. Default is <code>/dev/ttyUSB0</code></p>"},{"location":"reference/weewx-options/stations/#model_8","title":"model","text":"<p>Set to the station model. For example, <code>WS-2315</code>, <code>LaCrosse WS2317</code>, etc. Default is <code>LaCrosse WS23xx</code>.</p>"},{"location":"reference/weewx-options/stations/#polling_interval_3","title":"polling_interval","text":"<p>The <code>polling_interval</code> determines how often WeeWX will query the station for data. If <code>polling_interval</code> is not specified (the default), WeeWX will automatically use a polling interval based on the type of connection between the station and the sensors (wired or wireless). When connected with a wire, the console updates sensor data every 8 seconds. When connected wirelessly, the console updates from 16 to 128 seconds, depending on sensor activity.</p>"},{"location":"reference/weewx-options/stations/#ws28xx","title":"[WS28xx]","text":"<p>This section is for options relating to the La Crosse WS-28xx series of weather stations.</p>"},{"location":"reference/weewx-options/stations/#transceiver_frequency","title":"transceiver_frequency","text":"<p>Radio frequency to use between USB transceiver and console. Specify either <code>US</code> or <code>EU</code>. <code>US</code> uses 915 MHz, <code>EU</code> uses 868.3 MHz. Default is <code>US</code>.</p>"},{"location":"reference/weewx-options/stations/#model_9","title":"model","text":"<p>Set to the station model. For example, <code>LaCrosse WS2810</code>, <code>TFA Primus</code>, etc. Default is <code>LaCrosse WS28xx</code>.</p>"},{"location":"reference/weewx-options/stdarchive/","title":"[StdArchive]","text":"<p>The <code>StdArchive</code> service stores data into a database.</p>"},{"location":"reference/weewx-options/stdarchive/#archive_interval","title":"archive_interval","text":"<p>If your station hardware supports data logging then the archive interval will be downloaded from the station. Otherwise, you must specify it here in seconds, and it must be evenly divisible by 60. Optional. Default is <code>300</code>.</p>"},{"location":"reference/weewx-options/stdarchive/#archive_delay","title":"archive_delay","text":"<p>How long to wait in seconds after the top of an archiving interval before fetching new data off the station. For example, if your archive interval is 5 minutes and archive_delay is set to 15, then the data will be fetched at 00:00:15, 00:05:15, 00:10:15, etc. This delay is to give the station a few seconds to archive the data internally, and in case your server has any other tasks to do at the top of the minute. Default is <code>15</code>.</p>"},{"location":"reference/weewx-options/stdarchive/#record_generation","title":"record_generation","text":"<p>Set to whether records should be downloaded off the hardware (recommended), or generated in software. If set to <code>hardware</code>, then WeeWX tries to download archive records from your station. However, not all types of stations support this, in which case WeeWX falls back to software generation. A setting of <code>hardware</code> will work for most users. A notable exception is users who have cobbled together homebrew serial interfaces for the Vantage stations that do not include memory for a logger. These users should set this option to <code>software</code>, forcing software record generation. Default is <code>hardware</code>.</p>"},{"location":"reference/weewx-options/stdarchive/#record_augmentation","title":"record_augmentation","text":"<p>When performing hardware record generation, this option will attempt to augment the record with any additional observation types that it can extract out of the LOOP packets. Default is <code>true</code>.</p>"},{"location":"reference/weewx-options/stdarchive/#loop_hilo","title":"loop_hilo","text":"<p>Set to <code>true</code> to have LOOP data and archive data to be used for high / low statistics. Set to <code>false</code> to have only archive data used. If your sensor emits lots of spiky data, setting to <code>false</code> may help. Default is <code>true</code>.</p>"},{"location":"reference/weewx-options/stdarchive/#log_success","title":"log_success","text":"<p>If you set a value for <code>log_success</code> here, it will override the value set at the top-level  and will apply only to archiving operations.</p>"},{"location":"reference/weewx-options/stdarchive/#log_failure","title":"log_failure","text":"<p>If you set a value for <code>log_failure</code> here, it will override the value set at the top-level  and will apply only to archiving operations.</p>"},{"location":"reference/weewx-options/stdarchive/#data_binding","title":"data_binding","text":"<p>The data binding to be used to store the data. This should match one of the bindings in the <code>[DataBindings]</code> section. Optional. Default is <code>wx_binding</code>.</p>"},{"location":"reference/weewx-options/stdcalibrate/","title":"[StdCalibrate]","text":"<p>The <code>StdCalibrate</code> service offers an opportunity to correct for any calibration errors in your instruments. It is very general and flexible.</p> <p>Because this service is normally run after <code>StdConvert</code>, the units to be used should be the same as the target unit system chosen in <code>StdConvert</code>. It is also important that this service be run before the archiving service <code>StdArchive</code>, so that it is the corrected data that are stored.</p> <p>In a default configuration, calibrations are applied to observations from the hardware. They are not applied to derived calculations since the <code>StdWXCalculate</code> service runs after <code>StdCalibrate</code>.</p>"},{"location":"reference/weewx-options/stdcalibrate/#corrections","title":"[[Corrections]]","text":"<p>In this section you list all correction expressions. For example, say that you know your outside thermometer reads high by 0.2\u00b0F. You could add the expression:</p> <pre><code>outTemp = outTemp - 0.2\n</code></pre> <p>Perhaps you need a linear correction around a reference temperature of 68\u00b0F:</p> <pre><code>outTemp = outTemp + (outTemp-68) * 0.02\n</code></pre> <p>It is even possible to do corrections involving more than one variable. Suppose you have a temperature sensitive barometer:</p> <pre><code>barometer = barometer + (outTemp-32) * 0.0091\n</code></pre> <p>All correction expressions are run in the order given.</p> <p>Both LOOP data and archive data will be corrected.</p> <p>If you are using a Davis Vantage instrument and all you require is a simple correction offset, this can also be done in the hardware. See your manual for instructions.</p>"},{"location":"reference/weewx-options/stdconvert/","title":"[StdConvert]","text":"<p>The <code>StdConvert</code> service acts as a filter for units, converting the unit system coming off your hardware to a target output unit system. All downstream services, including the archiving service, will then see this unit system. Hence, your data will be stored in the database using whatever unit system you specify here.</p> <p>Once chosen, the unit system in the database cannot be changed!</p> <p>WeeWX does not allow you to mix unit systems within the databases. You must choose a unit system and then stick with it. This means that users coming from wview (which uses US Customary) should not change the default setting. Having said this, there is a way of reconfiguring the database to use another unit system. See the section Changing the unit system in an existing database in the Customization Guide.</p> <p>Note</p> <p>This service only affects the units used in the databases. In particular, it has nothing to do with what units are displayed in plots or files. Those units are specified in the skin configuration file, as described in the Customization Guide, under section Changing unit systems. Because of this, unless you have a special purpose application, there is really no good reason to change from the default, which is <code>US</code>.</p> <p>Warning</p> <p>If, despite these precautions, you do decide to change the units of data stored in the database, be sure to read the sections <code>[StdCalibrate]</code> and <code>[StdQC]</code>, and change the units there as well!</p>"},{"location":"reference/weewx-options/stdconvert/#target_unit","title":"target_unit","text":"<p>Set to either <code>US</code>, <code>METRICWX</code>, or <code>METRIC</code>. The difference between <code>METRICWX</code> and <code>METRIC</code> is that the former uses <code>mm</code> instead of <code>cm</code> for rain, and <code>m/s</code> instead of <code>km/hr</code> for wind speed. See the reference section Units for the exact differences beween each of these options.</p> <p>Default is <code>US</code>.</p>"},{"location":"reference/weewx-options/stdqc/","title":"[StdQC]","text":"<p>The <code>StdQC</code> service offers a very simple Quality Control that only checks that values are within a minimum and maximum range.</p> <p>Because this service is normally run after <code>StdConvert</code>, the units to be used should be the same as the target unit system chosen in <code>StdConvert</code>. It is also important that it be run after the calibration service, <code>StdCalibrate</code> and before the archiving service <code>StdArchive</code>, so that it is the calibrated and corrected data that are stored.</p> <p>In a default configuration, quality control checks are applied to observations from the hardware. They are not applied to derived calculations since the <code>StdWXCalculate</code> service runs after the quality control.</p>"},{"location":"reference/weewx-options/stdqc/#minmax","title":"[[MinMax]]","text":"<p>In this section you list the observation types you wish to have checked, along with their minimum and maximum values. If not specified, the units should are in the same unit system as specified in <code>[StdConvert]</code>.</p> <p>For example,</p> <pre><code>[[MinMax]]\noutTemp = -40, 120\nbarometer = 28, 32.5\noutHumidity = 0, 100 </code></pre> <p>With <code>target_unit=US</code> (the default), if a temperature should fall outside the inclusive range -40 \u00b0F through 120 \u00b0F, then it will be set to the null value, <code>None</code>, and ignored. In a similar manner, the acceptable values for barometric pressure would be 28 through 32.5 inHg, for humidity 0 through 100%.</p> <p>You can also specify units.</p> <p>For example,</p> <pre><code>[[MinMax]]\noutTemp = -40, 60, degree_C\nbarometer = 28, 32.5, inHg\n</code></pre> <p>In this example, if a temperature should fall outside the inclusive range -40 \u00b0C through 60 \u00b0C, then it will be set to the null value, <code>None</code>, and ignored. In a similar manner, the acceptable values for barometric pressure would be 28 through 32.5 inHg. Since the units have been specified, these values apply no matter what the <code>target_unit</code>.</p> <p>Both LOOP and archive data will be checked.</p> <p>Knowing the details of how your hardware encodes data helps to minimize the number of observations that need to be checked. For example, the VP2 devotes only one unsigned byte to storing wind speed, and even then <code>0xff</code> is devoted to a bad value, so the only possible values that could appear are 0 through 126 mph, a reasonable range. So, for the VP2, there is no real point in checking wind speed.</p>"},{"location":"reference/weewx-options/stdreport/","title":"[StdReport]","text":"<p>This section is for configuring the <code>StdReport</code> service, which controls what reports are to be generated. While it can be highly customized for your individual situation, this documentation describes the section as shipped in the standard distribution.</p> <p>Each report is represented by a subsection, marked with double brackets (e.g., <code>[[MyReport]]</code>). Any options for the report should be placed under it. The standard report service will go through the subsections, running each report in order.</p> <p>WeeWX ships with the following subsections:</p> subsection Description [[SeasonsReport]] A full-featured single-page skin. Statistics and plots are revealed by touch or button press. [[SmartphoneReport]] A skin formatted for smaller screens, with a look-and-feel reminiscent of first-generation Apple iPhone. [[MobileReport]] A static skin formatted for very small screens, with a look-and-feel reminiscent of WindowsCE or PalmOS. [[StandardReport]] The original skin that shipped for many years as the default report. It uses static HTML and images, and requires few resources to generate and display. [[FTP]] No presentation elements. Uses the reporting machinery to transfer files to a remote server using FTP. [[RSYNC]] No presentation elements. Uses the reporting machinery to transfer files to a remote server using rsync. <p>Order matters. The reports that generate HTML and images, that is, <code>SeasonsReport</code>, <code>SmartphoneReport</code>, <code>MobileReport</code>, and <code>StandardReport</code>, are run first, then the reports that move them to a webserver, <code>FTP</code> and <code>RSYNC</code>, are run. This insures that report generation is done before the results are sent off.</p> <p>Details for how to customize reports are in the section Customizing reports, in the Customization Guide.</p>"},{"location":"reference/weewx-options/stdreport/#skin_root","title":"SKIN_ROOT","text":"<p>The directory where the skins live.</p> <p>If a relative path is specified, it is relative to <code>WEEWX_ROOT</code>.</p>"},{"location":"reference/weewx-options/stdreport/#html_root","title":"HTML_ROOT","text":"<p>The target directory for the generated files. Generated files and images wil l be put here.</p> <p>If a relative path is specified, it is relative to <code>WEEWX_ROOT</code>.</p>"},{"location":"reference/weewx-options/stdreport/#log_success","title":"log_success","text":"<p>If you set a value for <code>log_success</code> here, it will override the value set at the top-level and will apply only to reporting. In addition, <code>log_success</code> can be set for individual reports by putting them under the appropriate subsection (e.g., under <code>[[Seasons]]</code>).</p>"},{"location":"reference/weewx-options/stdreport/#log_failure","title":"log_failure","text":"<p>If you set a value for log_failure here, it will override the value set at the top-level and will apply only to reporting. In addition, <code>log_failure</code> can be set for individual reports by putting them under the appropriate subsection (e.g., under <code>[[Seasons]]</code>).</p>"},{"location":"reference/weewx-options/stdreport/#data_binding","title":"data_binding","text":"<p>The data source to be used for the reports. It should match a binding given in section <code>[DataBindings]</code>. The binding can be overridden in individual reports. Optional. Default is <code>wx_binding</code>.</p>"},{"location":"reference/weewx-options/stdreport/#report_timing","title":"report_timing","text":"<p>This parameter uses a cron-like syntax that determines when a report will be run. The setting can be overridden in individual reports, so it is possible to run each report with a different schedule. Refer to the separate document Scheduling report generation for how to control when reports are run. Optional. By default, a value is missing, which causes each report to run on each archive interval.</p>"},{"location":"reference/weewx-options/stdreport/#standard-weewx-reports","title":"Standard WeeWX reports","text":"<p>These are the four reports that are included in the standard distribution of WeeWX, and which actually generate HTML files and plots. They all use US Customary units by default (but this can be changed by setting the option <code>unit_system</code>).</p>"},{"location":"reference/weewx-options/stdreport/#seasonsreport","title":"[[SeasonsReport]]","text":""},{"location":"reference/weewx-options/stdreport/#smartphonereport","title":"[[SmartphoneReport]]","text":""},{"location":"reference/weewx-options/stdreport/#mobilereport","title":"[[MobileReport]]","text":""},{"location":"reference/weewx-options/stdreport/#standardreport","title":"[[StandardReport]]","text":"<p>They all have the following options in common:</p>"},{"location":"reference/weewx-options/stdreport/#lang","title":"lang","text":"<p>Which language the skin should be localized in. The value is a two-character language code as defined in ISO 639-1. This option only works with skins that have been internationalized. All skins that ship with WeeWX have been internationalized, but only a handful of languages are included. To see which language a skin supports, look in the subdirectory <code>lang</code> in the skin's directory. For example, if you see a file <code>fr.conf</code>, then the skin can be localized in French.</p>"},{"location":"reference/weewx-options/stdreport/#unit_system","title":"unit_system","text":"<p>Which unit system to use with the skin. Choices are <code>US</code>, <code>METRIC</code>, or <code>METRICWX</code>. See the reference section Units for definitions of these unit systems. Individual units can be overridden. See the section Changing unit systems in the Customization Guide for more details.</p>"},{"location":"reference/weewx-options/stdreport/#enable","title":"enable","text":"<p>Set to <code>true</code> to enable the processing of this skin. Set to <code>false</code> to disable. If this option is missing, <code>true</code> is assumed.</p>"},{"location":"reference/weewx-options/stdreport/#skin","title":"skin","text":"<p>Where to find the skin. This should be a directory under <code>SKIN_ROOT</code>. Inside the directory should be any templates used by the skin and a skin configuration file, <code>skin.conf</code>.</p>"},{"location":"reference/weewx-options/stdreport/#html_root_1","title":"HTML_ROOT","text":"<p>If you put a value for <code>HTML_ROOT</code> here, it will override the value directly under <code>[StdReport]</code>.</p>"},{"location":"reference/weewx-options/stdreport/#ftp","title":"[[FTP]]","text":"<p>While this \"report\" does not actually generate anything, it uses the report machinery to upload files from directory <code>HTML_ROOT</code> to a remote webserver. It does an incremental update, that is, it only FTPs any files that have changed, saving the outgoing bandwidth of your Internet connection.</p>"},{"location":"reference/weewx-options/stdreport/#enable_1","title":"enable","text":"<p>Set to <code>true</code> (the default) to enable FTP. Set to <code>false</code> to disable.</p>"},{"location":"reference/weewx-options/stdreport/#user","title":"user","text":"<p>Set to the username you use for your FTP connection to your web server. Required. No default.</p>"},{"location":"reference/weewx-options/stdreport/#password","title":"password","text":"<p>Set to the password you use for your FTP connection to your web server. Required. No default.</p>"},{"location":"reference/weewx-options/stdreport/#server","title":"server","text":"<p>Set to the name of your web server (e.g., <code>www.acme.com</code>). Required. No default</p>"},{"location":"reference/weewx-options/stdreport/#path","title":"path","text":"<p>Set to the path where the weather data will be stored on your webserver (e.g., <code>/weather</code>). Required. No default.</p> <p>Note</p> <p>Some FTP servers require a leading slash ('<code>/</code>'), some do not.</p>"},{"location":"reference/weewx-options/stdreport/#secure_ftp","title":"secure_ftp","text":"<p>Set to <code>true</code> to use FTP (FTPS) over TLS. This is an extension to the FTP protocol that uses a Secure Socket Layer (SSL) protocol, not to be confused with SFTP, which uses a Secure Socket Shell protocol. Not all FTP servers support this. In particular, the Microsoft FTP server seems to do a poor job of it. Optional. Default is <code>false</code></p>"},{"location":"reference/weewx-options/stdreport/#secure_data","title":"secure_data","text":"<p>If a secure session is requested (option <code>secure_ftp=true</code>), should we attempt a secure data connection as well? This option is useful due to a bug in the Python FTP client library. See WeeWx GitHub Issue #284. Optional. Default is <code>true</code>.</p>"},{"location":"reference/weewx-options/stdreport/#reuse_ssl","title":"reuse_ssl","text":"<p>Some FTP servers (notably PureFTP) reuse ssl connections with FTPS. Unfortunately, the Python library has a bug that prematurely closes such connections. See https://bit.ly/2Lrywla. Symptom is an exception OSError: [Errno 0], or a 425 error (\"425 Unable to build data connection: Operation not permitted\"). This option activates a workaround for Python versions greater than 3.6. It won't work for earlier versions. Optional. Default is <code>false</code>.</p>"},{"location":"reference/weewx-options/stdreport/#port","title":"port","text":"<p>Set to the port ID of your FTP server. Default is <code>21</code>.</p>"},{"location":"reference/weewx-options/stdreport/#passive","title":"passive","text":"<p>Set to <code>1</code> if you wish to use the more modern, FTP passive mode, <code>0</code> if you wish to use active mode. Passive mode generally works better through firewalls, but not all FTP servers do a good job of supporting it. See Active FTP vs. Passive FTP, a Definitive Explanation for a good explanation of the difference. Default is <code>1</code> (passive mode).</p>"},{"location":"reference/weewx-options/stdreport/#max_tries","title":"max_tries","text":"<p>WeeWX will try up to this many times to FTP a file up to your server before giving up. Default is <code>3</code>.</p>"},{"location":"reference/weewx-options/stdreport/#ftp_encoding","title":"ftp_encoding","text":"<p>The vast majority of FTP servers send their responses back using UTF-8 encoding. However, there are a few oddballs that respond using Latin-1. This option allows you to specify an alternative encoding.</p>"},{"location":"reference/weewx-options/stdreport/#ciphers","title":"ciphers","text":"<p>Some clients require a higher cipher level than the FTP server is capable of delivering. The symptom is an error something like:</p> <pre><code>ssl.SSLError: [SSL: DH_KEY_TOO_SMALL] dh key too small (_ssl.c:997)`\n</code></pre> <p>This option allows you to specify a custom level. For example, in this case, you might want to specify:</p> <pre><code>ciphers='DEFAULT@SECLEVEL=1'\n</code></pre> <p>However, if possible, you are always better off upgrading the FTP server.</p>"},{"location":"reference/weewx-options/stdreport/#rsync","title":"[[RSYNC]]","text":"<p>While this \"report\" does not actually generate anything, it uses the report machinery to upload files from directory <code>HTML_ROOT</code> to a remote webserver using rsync. Fast, efficient, and secure, it does an incremental update, that is, it only synchronizes those parts of a file that have changed, saving the outgoing bandwidth of your Internet connection.</p> <p>If you wish to use rsync, you must configure passwordless ssh using public/private key authentication from the user account that WeeWX runs, to the user account on the remote machine where the files will be copied.</p>"},{"location":"reference/weewx-options/stdreport/#enable_2","title":"enable","text":"<p>Set to <code>true</code> (the default) to enable rsync. Set to <code>false</code> to disable.</p>"},{"location":"reference/weewx-options/stdreport/#server_1","title":"server","text":"<p>Set to the name of your server. This name should appear in your <code>.ssh/config</code> file. Required. No default</p>"},{"location":"reference/weewx-options/stdreport/#user_1","title":"user","text":"<p>Set to the ssh username you use for your rsync connection to your web server. The local user that WeeWX runs as must have passwordless ssh configured for user@server. Required. No default.</p>"},{"location":"reference/weewx-options/stdreport/#path_1","title":"path","text":"<p>Set to the path where the weather data will be stored on your webserver (e.g., <code>/var/www/html/weather</code>). Make sure <code>user</code> has write privileges in this directory. Required. No default.</p>"},{"location":"reference/weewx-options/stdreport/#port_1","title":"port","text":"<p>The port to use for the ssh connection. Default is to use the default port for the <code>ssh</code> command (generally 22).</p>"},{"location":"reference/weewx-options/stdreport/#delete","title":"delete","text":"<p>Files that don't exist in the local report are removed from the remote location. </p> <p>Warning</p> <p>USE WITH CAUTION! If you make a mistake in setting the path, this can cause unexpected files to be deleted on the remote server. </p> <p>Valid values are <code>1</code> to enable and <code>0</code> to disable. Required. Default is <code>0</code>.</p>"},{"location":"reference/weewx-options/stdreport/#defaults","title":"[[Defaults]]","text":"<p>This section defines default values for all reports. You can set:</p> <ul> <li>The unit system to be used</li> <li>Overrides for individual units</li> <li>Which language to be used</li> <li>Number and time formats</li> <li>Labels to be used</li> <li>Calculation options for some derived values.</li> </ul> <p>See the section Processing order in the Customization Guide for more details.</p>"},{"location":"reference/weewx-options/stdrestful/","title":"[StdRESTful]","text":"<p>This section is for configuring the StdRESTful services, which upload to simple RESTful services such as:</p> <ul> <li>Weather Underground</li> <li>PWSweather.com</li> <li>CWOP</li> <li>British Weather Observations Website (WOW)</li> <li>Automatisches Wetterkarten System (AWEKAS)</li> </ul>"},{"location":"reference/weewx-options/stdrestful/#general-options-for-each-restful-service","title":"General options for each RESTful Service","text":""},{"location":"reference/weewx-options/stdrestful/#log_success","title":"log_success","text":"<p>If you set a value for <code>log_success</code> here, it will override the value set at the top-level and will apply only to RESTful services. In addition, <code>log_success</code> can be set for individual services by putting them under the appropriate subsection (e.g., under <code>[[CWOP]]</code>).</p>"},{"location":"reference/weewx-options/stdrestful/#log_failure","title":"log_failure","text":"<p>If you set a value for <code>log_failure</code> here, it will override the value set at the top-level and will apply only to RESTful services. In addition, <code>log_failure</code> can be set for individual services by putting them under the appropriate subsection (e.g., under <code>[[CWOP]]</code>).</p>"},{"location":"reference/weewx-options/stdrestful/#stationregistry","title":"[[StationRegistry]]","text":"<p>A registry of WeeWX weather stations is maintained at <code>weewx.com</code>. Stations are displayed on a map and a list at https://weewx.com/stations.html.</p> <p>How does the registry work? Individual weather stations periodically contact the registry. Each station provides a unique URL to identify itself, plus  other information such as the station type, Python version, WeeWX version and installation method. No personal information, nor any meteorological data, is sent.</p> <p>To add your station to this list, you must do two things:</p> <ol> <li> <p>Enable the station registry by setting option <code>register_this_station</code> to <code>true</code>. Your station will contact the registry once per day. If your station does not contact the registry for about a month, it will be removed from the list.</p> </li> <li> <p>Provide a value for option <code>station_url</code>. This value must be unique, so choose it carefully.</p> </li> </ol> <pre><code>[StdRestful]\n[[StationRegistry]]\nregister_this_station = True\ndescription=\"Beach side weather\"\nstation_url = https://acme.com\n</code></pre>"},{"location":"reference/weewx-options/stdrestful/#register_this_station","title":"register_this_station","text":"<p>Set this to <code>true</code> to register the weather station.</p>"},{"location":"reference/weewx-options/stdrestful/#description","title":"description","text":"<p>A description of the station. If no description is specified, the  <code>location</code> from section <code>[Station]</code> will be used.</p>"},{"location":"reference/weewx-options/stdrestful/#station_url","title":"station_url","text":"<p>The URL to the weather station. If no URL is specified, the <code>station_url</code> from section <code>[Station]</code> will be used. It must be a valid URL. In particular, it must start with either <code>http://</code> or <code>https://</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#log_success_1","title":"log_success","text":"<p>If you set a value here, it will apply only to the station registry.</p>"},{"location":"reference/weewx-options/stdrestful/#log_failure_1","title":"log_failure","text":"<p>If you set a value here, it will apply only to the station registry.</p>"},{"location":"reference/weewx-options/stdrestful/#awekas","title":"[[AWEKAS]]","text":"<p>WeeWX can send your current data to the Automatisches Wetterkarten System (AWEKAS). If you wish to do this, set the option <code>enable</code> to <code>true</code>, then set options <code>username</code> and <code>password</code> appropriately. When you are done, it will look something like this:</p> <pre><code>[StdRestful]\n[[AWEKAS]]\nenable = true\nusername = joeuser\npassword = XXX </code></pre>"},{"location":"reference/weewx-options/stdrestful/#enable","title":"enable","text":"<p>Set to <code>true</code> to enable posting to AWEKAS. Optional. Default is <code>false</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#username","title":"username","text":"<p>Set to your AWEKAS username (e.g., <code>joeuser</code>). Required.</p>"},{"location":"reference/weewx-options/stdrestful/#password","title":"password","text":"<p>Set to your AWEKAS password. Required.</p>"},{"location":"reference/weewx-options/stdrestful/#language","title":"language","text":"<p>Set to your preferred language. Default is <code>en</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#log_success_2","title":"log_success","text":"<p>If you set a value here, it will apply only to logging for AWEKAS.</p>"},{"location":"reference/weewx-options/stdrestful/#log_failure_2","title":"log_failure","text":"<p>If you set a value here, it will apply only to logging for AWEKAS.</p>"},{"location":"reference/weewx-options/stdrestful/#retry_login","title":"retry_login","text":"<p>How long to wait in seconds before retrying a bad login. If set to zero, no retry will be attempted. Default is <code>3600</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#post_interval","title":"post_interval","text":"<p>The interval in seconds between posts. Setting this value to zero will cause every archive record to be posted. Optional. Default is zero.</p>"},{"location":"reference/weewx-options/stdrestful/#cwop","title":"[[CWOP]]","text":"<p>WeeWX can send your current data to the Citizen Weather Observer Program. If you wish to do this, set the option <code>enable</code> to <code>true</code>, then set the option <code>station</code> to your CWOP station code. If your station is an amateur radio APRS station, you will have to set <code>passcode</code> as well. When you are done, it will look something like</p> <pre><code>[StdRestful]\n[[CWOP]]\nenable = true\nstation = CW1234\npasscode = XXX    # Replace with your passcode (APRS stations only)\npost_interval = 600\n</code></pre>"},{"location":"reference/weewx-options/stdrestful/#enable_1","title":"enable","text":"<p>Set to <code>true</code> to enable posting to the CWOP. Optional. Default is <code>false</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#station","title":"station","text":"<p>Set to your CWOP station ID (e.g., CW1234) or amateur radio callsign (APRS). Required.</p>"},{"location":"reference/weewx-options/stdrestful/#passcode","title":"passcode","text":"<p>This is used for APRS (amateur radio) stations only. Set to the passcode given to you by the CWOP operators. Required for APRS stations, ignored for others.</p>"},{"location":"reference/weewx-options/stdrestful/#post_interval_1","title":"post_interval","text":"<p>The interval in seconds between posts. Because CWOP is heavily used, the operators discourage very frequent posts. Every 5 minutes (300 seconds) is fine, but they prefer every 10 minutes (600 s) or even longer. Setting this value to zero will cause every archive record to be posted. Optional. Default is <code>600</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#stale","title":"stale","text":"<p>How old a record can be in seconds before it will not be used for a catch-up. CWOP does not use the timestamp on a posted record. Instead, they use the wall clock time that it came in. This means that if your station is off the air for a long period of time, then when WeeWX attempts a catch-up, old data could be interpreted as the current conditions. Optional. Default is <code>600</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#server_list","title":"server_list","text":"<p>A comma-delimited list of the servers that should be tried for uploading data. Optional. Default is: <code>cwop.aprs.net:14580, cwop.aprs.net:23</code></p>"},{"location":"reference/weewx-options/stdrestful/#log_success_3","title":"log_success","text":"<p>If you set a value here, it will apply only to logging for CWOP.</p>"},{"location":"reference/weewx-options/stdrestful/#log_failure_3","title":"log_failure","text":"<p>If you set a value here, it will apply only to logging for CWOP.</p>"},{"location":"reference/weewx-options/stdrestful/#pwsweather","title":"[[PWSweather]]","text":"<p>WeeWX can send your current data to the PWSweather.com service. If you wish to do this, set the option <code>enable</code> to <code>true</code>, then set the options <code>station</code> and <code>password</code> appropriately. When you are done, it will look something like this:</p> <pre><code>[StdRestful]\n[[PWSweather]]\nenable = true\nstation = BOISE\npassword = XXX\n</code></pre>"},{"location":"reference/weewx-options/stdrestful/#enable_2","title":"enable","text":"<p>Set to <code>true</code> to enable posting to the PWSweather. Optional. Default is <code>false</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#station_1","title":"station","text":"<p>Set to your PWSweather station ID (e.g., <code>BOISE</code>). Required.</p>"},{"location":"reference/weewx-options/stdrestful/#password_1","title":"password","text":"<p>Set to your PWSweather password. Required.</p>"},{"location":"reference/weewx-options/stdrestful/#log_success_4","title":"log_success","text":"<p>If you set a value here, it will apply only to logging for PWSweather.</p>"},{"location":"reference/weewx-options/stdrestful/#log_failure_4","title":"log_failure","text":"<p>If you set a value here, it will apply only to logging for PWSweather.</p>"},{"location":"reference/weewx-options/stdrestful/#retry_login_1","title":"retry_login","text":"<p>How long to wait in seconds before retrying a bad login. Default is <code>3600</code> (one hour).</p>"},{"location":"reference/weewx-options/stdrestful/#post_interval_2","title":"post_interval","text":"<p>The interval in seconds between posts. Setting this value to zero will cause every archive record to be posted. Optional. Default is zero.</p>"},{"location":"reference/weewx-options/stdrestful/#wow","title":"[[WOW]]","text":"<p>WeeWX can send your current data to the British Weather Observations Website (WOW) service. If you wish to do this, set the option <code>enable</code> to <code>true</code>, then set options <code>station</code> and <code>password</code> appropriately. Read Importing Weather Data into WOW on how to find your site's username and how to set the password for your site. When you are done, it will look something like this:</p> <pre><code>[StdRestful]\n[[WOW]]\nenable = true\nstation = 12345678\npassword = XXX\n</code></pre>"},{"location":"reference/weewx-options/stdrestful/#enable_3","title":"enable","text":"<p>Set to <code>true</code> to enable posting to WOW. Optional. Default is <code>false</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#station_2","title":"station","text":"<p>Set to your WOW station ID (e.g., <code>12345678</code> for Pre June 1996 sites, or <code>6a571450-df53-e611-9401-0003ff5987fd</code> for later ones). Required.</p>"},{"location":"reference/weewx-options/stdrestful/#password_2","title":"password","text":"<p>Set to your WOW Authentication Key. Required. This is not the same as your WOW user password. It is a 6 digit numerical PIN, unique for your station.</p>"},{"location":"reference/weewx-options/stdrestful/#log_success_5","title":"log_success","text":"<p>If you set a value here, it will apply only to logging for WOW.</p>"},{"location":"reference/weewx-options/stdrestful/#log_failure_5","title":"log_failure","text":"<p>If you set a value here, it will apply only to logging for WOW.</p>"},{"location":"reference/weewx-options/stdrestful/#retry_login_2","title":"retry_login","text":"<p>How long to wait in seconds before retrying a bad login. Default is <code>3600</code> (one hour).</p>"},{"location":"reference/weewx-options/stdrestful/#post_interval_3","title":"post_interval","text":"<p>The interval in seconds between posts. Setting this value to zero will cause every archive record to be posted. Optional. Default is zero.</p>"},{"location":"reference/weewx-options/stdrestful/#wunderground","title":"[[Wunderground]]","text":"<p>WeeWX can send your current data to the Weather Underground. If you wish to post to do this, set the option <code>enable</code> to <code>true</code>,  then specify a station (e.g., <code>KORBURNS99</code>). Use the station key for the password.</p> <p>When you are done, it will look something like this:</p> <pre><code>[StdRestful]\n[[Wunderground]]\nenable = true\nstation = KORBURNS99\npassword = A331D1SIm\nrapidfire = false\n</code></pre>"},{"location":"reference/weewx-options/stdrestful/#enable_4","title":"enable","text":"<p>Set to <code>true</code> to enable posting to the Weather Underground. Optional. Default is <code>false</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#station_3","title":"station","text":"<p>Set to your Weather Underground station ID (e.g., <code>KORBURNS99</code>). Required.</p>"},{"location":"reference/weewx-options/stdrestful/#password_3","title":"password","text":"<p>Set to the station \"key\". You can find this at:</p> <p>https://www.wunderground.com/member/devices.</p>"},{"location":"reference/weewx-options/stdrestful/#rapidfire","title":"rapidfire","text":"<p>Set to <code>true</code> to have WeeWX post using the Weather Underground's \"Rapidfire\" protocol. This will send a post to the WU site with every LOOP packet, which can be as often as every 2.5 seconds in the case of the Vantage instruments. Not all instruments support this. Optional. Default is <code>false</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#rtfreq","title":"rtfreq","text":"<p>When rapidfire is set, the <code>rtfreq</code> parameter is sent, and should correspond to \"the frequency of updates in seconds\". Optional. Default is <code>2.5</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#archive_post","title":"archive_post","text":"<p>This option tells WeeWX to post on every archive record, which is the normal \"PWS\" mode for the Weather Underground. Because they prefer that you either use their \"Rapidfire\" protocol, or their PWS mode, but not both, the default for this option is the opposite for whatever you choose above for option rapidfire. However, if for some reason you want to do both, then you may set both options to <code>true</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#post_indoor_observations","title":"post_indoor_observations","text":"<p>In the interest of respecting your privacy, WeeWX does not post indoor temperature or humidity to the Weather Underground unless you set this option to <code>true</code>. Default is <code>false</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#log_success_6","title":"log_success","text":"<p>If you set a value here, it will apply only to logging for the Weather Underground.</p>"},{"location":"reference/weewx-options/stdrestful/#log_failure_6","title":"log_failure","text":"<p>If you set a value here, it will apply only to logging for the Weather Underground.</p>"},{"location":"reference/weewx-options/stdrestful/#retry_login_3","title":"retry_login","text":"<p>How long to wait in seconds before retrying a bad login. Default is <code>3600</code> (one hour).</p>"},{"location":"reference/weewx-options/stdrestful/#post_interval_4","title":"post_interval","text":"<p>The interval in seconds between posts. Setting this value to zero will cause every archive record to be posted. Optional. Default is zero.</p>"},{"location":"reference/weewx-options/stdrestful/#force_direction","title":"force_direction","text":"<p>The Weather Underground has a bug where they will claim that a station is \"unavailable\" if it sends a null wind direction, even when the wind speed is zero. Setting this option to <code>true</code> causes the software to cache the last non-null wind direction and use that instead of sending a null value. Default is <code>False</code>.</p>"},{"location":"reference/weewx-options/stdrestful/#essentials","title":"[[[Essentials]]]","text":"<p>Occasionally (but not always!) when the Weather Underground is missing a data point it will substitute the value zero (0.0), thus messing up statistics and plots. For all observation types listed in this section, the post will be skipped if that type is missing. For example:</p> <pre><code>[StdRestful]\n[[Wunderground]]\n...\n[[[Essentials]]]\noutTemp = True\n</code></pre> <p>would cause the post to be skipped if there is no outside temperature (observation type <code>outTemp</code>).</p>"},{"location":"reference/weewx-options/stdtimesynch/","title":"[StdTimeSynch]","text":"<p>The <code>StdTymeSynch</code> service can synchronize the onboard clock of station with your computer. Not all weather station hardware supports this.</p>"},{"location":"reference/weewx-options/stdtimesynch/#clock_check","title":"clock_check","text":"<p>How often to check the clock on the weather station in seconds. Default is <code>14400</code> (every 4 hours).</p>"},{"location":"reference/weewx-options/stdtimesynch/#max_drift","title":"max_drift","text":"<p>The maximum amount of clock drift to tolerate, in seconds, before resetting the clock. Default is <code>5</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/","title":"[StdWXCalculate]","text":"<p>Some hardware provides derived quantities, such as <code>dewpoint</code>, <code>windchill</code>, and <code>heatindex</code>, while other hardware does not. This service can be used to fill in any missing quantities, or to substitute a software-calculated value for hardware that has unreliable or obsolete calculations.</p> <p>By default, the service can calculate the following values, although the list can be extended:</p> <ul> <li>altimeter</li> <li>appTemp</li> <li>barometer</li> <li>cloudbase</li> <li>dewpoint</li> <li>ET</li> <li>heatindex</li> <li>humidex</li> <li>inDewpoint</li> <li>maxSolarRad</li> <li>pressure </li> <li>rainRate</li> <li>windchill</li> <li>windrun</li> </ul> <p>The configuration section <code>[StdWXCalculate]</code> consists of two different parts:</p> <ol> <li>The subsection <code>[[Calculations]]</code>, which specifies which derived types are to be calculated and under what circumstances.</li> <li>Zero or more subsections, which specify what parameters are to be used for the calculation. These are described below.</li> </ol> <p>The service <code>StdWXCalculate</code> can be extended by the user to add new, derived types by using the XTypes system. See the wiki article Extensible types (XTypes) for how to do this.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#data_binding","title":"data_binding","text":"<p>The data source to be used for historical data when calculating derived quantities. It should match a binding given in section <code>[DataBindings]</code>. Optional. Default is <code>wx_binding</code>.</p> <p>Note</p> <p>The data binding used by the <code>StdWXCalculate</code> service should normally match the data binding used by the <code>StdArchive</code> service. Users who use custom or additional data bindings should take care to ensure the correct data bindings are used by both services.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#calculations","title":"[[Calculations]]","text":"<p>This section specifies which strategy is to be used to provide values for derived variables. It consists of zero or more options with the syntax:</p> <p><pre><code>obs_type = directive[, optional_bindings]...\n</code></pre> where <code>directive</code> is one of <code>prefer_hardware</code>, <code>hardware</code>, or <code>software</code>:</p> directive Definition <code>prefer_hardware</code> Calculate the value in software only if it is not provided by hardware. <code>hardware</code> Hardware values only are accepted: never calculate the value in software. <code>software</code> Always calculate the value in software. <p>The option <code>optional_binding</code> is optional, and consists of either <code>loop</code>, or <code>archive</code>. If <code>loop</code>, then the calculation will be done only for LOOP packets. If <code>archive</code>, then the calculation will be done only for archive records. If no binding is specified, then it will be done for both LOOP packets and archive records.</p> <p>Example 1: if your weather station calculates windchill using the pre-2001 algorithm, and you prefer to have WeeWX calculate it using a modern algorithm, specify the following:</p> <pre><code>[StdWXCalculate]\n[[Calculations]]\nwindchill = software\n</code></pre> <p>This will force WeeWX to always calculate a value for <code>windchill</code>, regardless of whether the hardware provides one.</p> <p>Example 2: suppose you want ET to be calculated, but only for archive records. The option would look like:</p> <pre><code>[StdWXCalculate]\n[[Calculations]]\nET = software, archive\n</code></pre>"},{"location":"reference/weewx-options/stdwxcalculate/#defaults","title":"Defaults","text":"<p>In the absence of a <code>[[Calculations]]</code> section, no values will be calculated!</p> <p>However, the version of <code>weewx.conf</code> that comes with the WeeWX distribution includes a <code>[[Calculations]]</code> section that looks like this:</p> <pre><code>[StdWXCalculate]\n[[Calculations]]\npressure = prefer_hardware\naltimeter = prefer_hardware\nappTemp = prefer_hardware\nbarometer = prefer_hardware\ncloudbase = prefer_hardware\ndewpoint = prefer_hardware\nET = prefer_hardware\nheatindex = prefer_hardware\nhumidex = prefer_hardware\ninDewpoint = prefer_hardware\nmaxSolarRad = prefer_hardware\nrainRate = prefer_hardware\nwindchill = prefer_hardware\nwindrun = prefer_hardware\n</code></pre>"},{"location":"reference/weewx-options/stdwxcalculate/#wxxtypes","title":"[[WXXTypes]]","text":"<p>The <code>StdWXXTypes</code> class is responsible for calculating the following simple, derived types:</p> <ul> <li>appTemp</li> <li>cloudbase</li> <li>dewpoint</li> <li>ET</li> <li>heatindex</li> <li>humidex</li> <li>inDewpoint</li> <li>maxSolarRad</li> <li>windchill</li> <li>windDir</li> <li>windRun</li> </ul> <p>A few of these types have an option or two that can be set. These are described below.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#et","title":"[[[ET]]]","text":"<p>This subsection contains several options used when calculating ET (evapotranspiration). See the document Step by Step Calculation of the Penman-Monteith Evapotranspiration for the definitions of <code>cn</code> and <code>cd</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#et_period","title":"et_period","text":"<p>The length of time in seconds over which evapotranspiration is calculated. Default is <code>3600</code> (one hour).</p>"},{"location":"reference/weewx-options/stdwxcalculate/#wind_height","title":"wind_height","text":"<p>The height in meters of your anemometer. Default is <code>2.0</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#albedo","title":"albedo","text":"<p>The albedo to be used in the calculations. Default is <code>0.23</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#cn","title":"cn","text":"<p>The numerator constant for the reference crop type and time step. Default is <code>37</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#cd","title":"cd","text":"<p>The denominator constant for the reference crop type and time step. Default is <code>0.34</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#heatindex","title":"[[[heatindex]]]","text":""},{"location":"reference/weewx-options/stdwxcalculate/#algorithm","title":"algorithm","text":"<p>Controls which algorithm will be used to calculate heat-index. Choices are <code>new</code> (see https://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml), or <code>old</code>. The newer algorithm will give results down to 40\u00b0F, which are sometimes less than the sensible temperature. For this reason, some people prefer the older algorithm, which applies only to temperatures above 80\u00b0F. Default is <code>new</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#maxsolarrad","title":"[[[maxSolarRad]]]","text":"<p>This section is used for specifying options when calculating <code>maxSolarRad</code>, the theoretical maximum solar radiation.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#algorithm_1","title":"algorithm","text":"<p>Controls which algorithm will be used to calculate maxSolarRad. Choices are <code>bras</code> (\"Bras\"), or <code>rs</code> (Ryan-Stolzenbach). Default is <code>rs</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#atc","title":"atc","text":"<p>The coefficient <code>atc</code> is the \"atmospheric transmission coefficient\" used by the 'Ryan-Stolzenbach' algorithm for calculating maximum solar radiation. Value must be between <code>0.7</code> and <code>0.91</code>. Default is <code>0.8</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#nfac","title":"nfac","text":"<p>The coefficient <code>nfac</code> is \"atmospheric turbidity\" used by the 'Bras' algorithm for calculating maximum solar radiation. Values must be between <code>2</code> (clear) and <code>5</code> (smoggy). Default is <code>2</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#winddir","title":"[[[windDir]]]","text":""},{"location":"reference/weewx-options/stdwxcalculate/#force_null","title":"force_null","text":"<p>Indicates whether the wind direction should be undefined when the wind speed is zero. The default value is <code>true</code>: when the wind speed is zero, the wind direction will be set to undefined (Python <code>None</code>).</p> <p>To report the wind vane direction even when there is no wind speed, change this to <code>false</code>:</p> <pre><code>[StdWXCalculate]\n[[WXXTypes]]\n[[[windDir]]]\nforce_null = false\n</code></pre>"},{"location":"reference/weewx-options/stdwxcalculate/#pressurecooker","title":"[[PressureCooker]]","text":"<p>This class is responsible for calculating pressure-related values. Given the right set of input types, it can calculate <code>barometer</code>, <code>pressure</code>, and <code>altimeter</code>. See the Wiki article Barometer, pressure, and altimeter for the differences between these three types.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#max_delta_12h","title":"max_delta_12h","text":"<p>Some of the calculations require the temperature 12 hours ago (to compensate for tidal effects), which requires a database lookup. There may or may not be a temperature exactly 12 hours ago. This option sets how much of a time difference in seconds is allowed. The default is <code>1800</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#altimeter","title":"[[[altimeter]]]","text":""},{"location":"reference/weewx-options/stdwxcalculate/#algorithm_2","title":"algorithm","text":"<p>Which algorithm to use when calculating altimeter from gauge pressure. Possible choices are <code>ASOS</code>, <code>ASOS2</code>, <code>MADIS</code>, <code>NOAA</code>, <code>WOB</code>, and <code>SMT</code>. The default is <code>ASOS</code>.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#rainrater","title":"[[RainRater]]","text":"<p>This class calculates <code>rainRate</code> from recent rain events.</p>"},{"location":"reference/weewx-options/stdwxcalculate/#rain_period","title":"rain_period","text":"<p>The algorithm calculates a running average over a period of time in the past. This option controls how far back to go in time in seconds. Default is <code>1800</code>.</p>"},{"location":"usersguide/backup/","title":"Backup and restore","text":""},{"location":"usersguide/backup/#backup","title":"Backup","text":"<p>To back up a WeeWX installation, you will need to make a copy of</p> <ul> <li>the configuration information (<code>weewx.conf</code>),</li> <li>skins and templates,</li> <li>custom code, and</li> <li>the WeeWX database.</li> </ul> <p>The location of these items depends on how you installed WeeWX.</p> DebianRedhatopenSUSEpip Item Location Configuration <code>/etc/weewx/weewx.conf</code> Skins <code>/etc/weewx/skins</code> Custom code <code>/usr/share/weewx/user</code> Database <code>/var/lib/weewx/weewx.sdb</code> Item Location Configuration <code>/etc/weewx/weewx.conf</code> Skins <code>/etc/weewx/skins</code> Custom code <code>/usr/share/weewx/user</code> Database <code>/var/lib/weewx/weewx.sdb</code> Item Location Configuration <code>/etc/weewx/weewx.conf</code> Skins <code>/etc/weewx/skins</code> Custom code <code>/usr/share/weewx/user</code> Database <code>/var/lib/weewx/weewx.sdb</code> Item Location Configuration <code>~/weewx-data/weewx.conf</code> Skins <code>~/weewx-data/skins</code> Custom code <code>~/weewx-data/user</code> Database <code>~/weewx-data/archive/weewx.sdb</code> <p>It is not necessary to back up the generated images, HTML files, or NOAA reports, because WeeWX can easily regenerate them.</p> <p>It is also not necessary to back up the WeeWX code, because it can be installed again. However, it doesn't hurt to do so.</p> <p>Note</p> <p>For a SQLite configuration, do not make the copy of the database file while in the middle of a transaction! Schedule the backup for immediately after an archive record is written, and then make sure the backup completes before the next archive record arrives. Alternatively, stop WeeWX, perform the backup, then start WeeWX.</p> <p>Note</p> <p>For a MySQL/MariaDB configuration, save a dump of the archive database.</p>"},{"location":"usersguide/backup/#restore","title":"Restore","text":"<p>To restore from backup, do a fresh installation of WeeWX, replace the configuration file, skins, and database with those from a backup, then start <code>weewxd</code>.</p>"},{"location":"usersguide/installing/","title":"Installing WeeWX","text":"<p>If you're an old hand at installing software on Unix systems, you may be able to use one of our Quickstart guides:</p> <ul> <li>Debian - including Ubuntu, Mint, Raspberry Pi    OS, Devuan. Uses <code>apt</code>.</li> <li>Redhat - including Fedora, CentOS, Rocky. Uses <code>yum</code>.</li> <li>SUSE - including openSUSE. Uses <code>zypper</code>.</li> <li>pip - any operating system. Uses <code>pip</code></li> <li>git - any operating system. Run directly from repository.</li> </ul> <p>Otherwise, continue on...</p>"},{"location":"usersguide/installing/#required-skills","title":"Required skills","text":"<p>In the world of open-source hobbyist software, WeeWX is pretty easy to install and configure. There are not many package dependencies, the configuration is simple, and this guide includes extensive instructions. There are thousands of people who have successfully done an install. However, there is no \"point-and-click\" interface, so you will have to do some manual configuring.</p> <p>You should have the following skills:</p> <ul> <li> <p>The patience to read and follow this guide.</p> </li> <li> <p>Willingness and ability to edit a configuration file.</p> </li> <li> <p>Some familiarity with Linux or other Unix derivatives.</p> </li> <li> <p>Ability to do simple Unix tasks such as changing file permissions and   running commands.</p> </li> </ul> <p>No programming experience is necessary unless you wish to extend WeeWX. In this case, you should be comfortable programming in Python.</p> <p>If you get stuck, there is a very active User's Group to help.</p>"},{"location":"usersguide/installing/#installation-overview","title":"Installation overview","text":"<p>This is an outline of the process to install, configure, and run WeeWX:</p> <ul> <li> <p>Check the Hardware guide.  This will let you   know of any features, limitations, or quirks of your hardware. If your weather   station is not in the guide, you will have to download the driver after you   install WeeWX.</p> </li> <li> <p>Install WeeWX. Use the step-by-step instructions in one of the   installation methods.</p> </li> <li> <p>If the driver for your hardware if it is not included with WeeWX, install   the driver as explained in the installing a driver   section.</p> </li> <li> <p>Configure the hardware. This involves setting things like the onboard   archive interval, rain bucket size, etc. You may have to follow directions   given by your hardware manufacturer, or you may be able to use the utility   weectl device.</p> </li> <li> <p>Run WeeWX by launching the <code>weewxd</code> program, either   directly, or as a   daemon.</p> </li> <li> <p>Customize the installation. Typically, this is done by changing settings in   the WeeWX application configuration   file (typically, <code>weewx.conf</code>).   For example, you might want to register your   station, so it   shows up on a world-wide map of WeeWX installations. To make changes to reports,   see the Customization Guide.</p> </li> </ul>"},{"location":"usersguide/installing/#installation-methods","title":"Installation methods","text":"<p>There are several different ways to install WeeWX.</p> InstallerSystemsBest for... Debian including Ubuntu, Mint, Raspberry Pi OS, Devuan        The Debian, Redhat, and SUSE package installers use apt,        yum, and zypper, respectively. This is the fastest        and easiest way to get up and running. You will need root access to        install and run.      Redhat including Fedora, CentOS, Rocky SUSE including openSUSE pip any operating system  The pip installer will work on any operating system. Use this approach for macOS or one of the BSDs, or if you are using an older operating system. When used in a \"virtual environment\" (recommended), this approach is least likely to disturb other applications on your computer. This is also a good approach if you plan to do a lot of customization, or if you are developing a driver, skin, or other extension. Root access is not needed to install, but may be needed to run.      git any operating system  If you want to install WeeWX on a system with very little storage, or if you want to experiment with code that is under development, then you may want to run directly from the WeeWX sources.  Root access is not needed to install, but  may be needed to run."},{"location":"usersguide/installing/#installing-a-driver","title":"Installing a driver","text":"<p>If your hardware requires a driver that is not included with WeeWX, use the WeeWX extension management utility to download and install the driver.</p> <p>First locate the driver for your hardware - start by looking in the drivers section of the WeeWX Wiki. You will need the URL for the driver release; the URL will refer to a <code>zip</code> or <code>tgz</code> file.</p> <p>Then install the driver, using the driver's URL: <pre><code>weectl extension install https://github.com/path/to/driver.zip\n</code></pre></p> <p>Finally, reconfigure WeeWX to use the driver: <pre><code>weectl station reconfigure\n</code></pre></p> <p>See the documentation for <code>weectl extension</code> for details.</p>"},{"location":"usersguide/introduction/","title":"User's Guide","text":"<p>This is the complete guide to installing, configuring, and troubleshooting WeeWX.</p>"},{"location":"usersguide/introduction/#system-requirements","title":"System requirements","text":""},{"location":"usersguide/introduction/#python","title":"Python","text":"<p>Python 3.7 or later is required. Python 2 will not work.</p>"},{"location":"usersguide/introduction/#station-hardware","title":"Station hardware","text":"<p>WeeWX includes support for many types of weather stations. In addition to hardware support, WeeWX comes with a software simulator, useful for testing and evaluation.</p> <p>The driver compatibility table in the Hardware guide has a detailed list of the manufacturers and models supported by the drivers that come with WeeWX. If you do not see your hardware in this table, check the list of supported hardware; the pictures may help you identify the manufacturer and/or model. Compatibility for some hardware is provided by 3rd party drivers, available at the Wiki. Finally, check the hardware comparison to see if your hardware is known, but not yet supported.</p> <p>If you still cannot find your hardware, post to the User's Group for help.</p>"},{"location":"usersguide/introduction/#computer-hardware","title":"Computer hardware","text":"<p>WeeWX is written in Python, so it has the overhead associated with that language. Nevertheless, it is \"fast enough\" on just about any hardware. It has been run on everything from an early MacBook to a router!</p> <p>I run WeeWX on a vintage 32-bit Fit-PC with a 500 MHz AMD Geode processor and 512 MB of memory. Configured this way, it consumes about 5% of the CPU, 150 MB of virtual memory, and 50 MB of real memory.</p> <p>WeeWX also runs great on a Raspberry Pi, although report generation will take longer. For example, here are some generation times for the 21 HTML files and 68 images used by the Seasons skin. See the Wiki article Benchmarks of file and image generation  for details.</p> Hardware Files (21) Images (68) Mac Mini, M1 2020 0.60s 1.06s NUC Intel i7, 11th gen 0.89s 1.14s RPI 5 1.63s 2.03s RPi 4 6.24s 6.39s RPi 3 13.06s 14.07s RPi 2 (32-bit) 24.27s 25.95s Rpi Zero W (32-bit) 53.97s 57.79s"},{"location":"usersguide/introduction/#time","title":"Time","text":"<p>You should run some sort of time synchronization daemon to ensure that your computer has the correct time. Doing so will greatly reduce errors, especially if you send data to services such as the Weather Underground. See the Wiki article Time services.</p> <p>On stations that support it, the time is automatically synchronized with the WeeWX server, nominally every four hours. The synchronization frequency can be adjusted in the WeeWX configuration.</p>"},{"location":"usersguide/mysql-mariadb/","title":"Configuring MySQL / MariaDB","text":"<p>This section applies only to those who wish to use the MySQL database, instead of the default SQLite database. It assumes that you have installed a working version of MySQL or MariaDB.</p> <ol> <li> <p>Install the client libraries. How to do this depends on your operating system and how you installed WeeWX.</p> DebianRedhatopenSUSEpip <pre><code>sudo apt install mysql-client\nsudo apt install python3-mysqldb\n</code></pre> <pre><code>sudo yum install MySQL-python\n</code></pre> <pre><code>sudo zypper install python3-mysqlclient\n</code></pre> <p>The base MySQL libraries are included as part of a normal pip install.  However, you might want to install a standalone MySQL or MariaDB client to help with testing.</p> </li> <li> <p>Change the WeeWX configuration to use MySQL instead of SQLite. In the WeeWX    configuration file, change the    <code>[[wx_binding]]</code>    section to point to the MySQL database, <code>archive_mysql</code>, instead of the    SQLite database <code>archive_sqlite</code>.</p> <p>After the change, it will look something like this (change Highlighted ): <pre><code>    [[wx_binding]]\n# The database should match one of the sections in [Databases]\ndatabase = archive_mysql\n# The name of the table within the database\ntable_name = archive\n\n# The class to manage the database\nmanager = weewx.manager.DaySummaryManager\n\n# The schema defines to structure of the database contents\nschema = schemas.wview_extended.schema\n</code></pre></p> </li> <li> <p>Configure the MySQL host and credentials. Assuming that you want to use the default database configuration, the <code>[[MySQL]]</code> section should look something like this:</p> <pre><code>    [[MySQL]]\n        driver = weedb.mysql\n        host = localhost\n        user = weewx\n        password = weewx\n</code></pre> <p>This assumes user <code>weewx</code> has the password <code>weewx</code>. Adjust as necessary.</p> </li> <li> <p>Configure MySQL to give the necessary permissions for the database <code>weewx</code> to whatever MySQL user you choose. Here are the necessary minimum permissions, again assuming user <code>weewx</code> with password <code>weewx</code>. Adjust as necessary.</p> <pre><code>mysql&gt; CREATE USER 'weewx'@'localhost' IDENTIFIED BY 'weewx';\nmysql&gt; GRANT select, update, create, delete, insert, alter, drop ON weewx.* TO weewx@localhost;\n</code></pre> </li> </ol>"},{"location":"usersguide/running/","title":"Running WeeWX","text":"<p>WeeWX can be run either directly, or as a daemon. When first trying WeeWX, it is best to run it directly because you will be able to see sensor output and diagnostics, as well as log messages. Once everything is working properly, run it as a daemon.</p>"},{"location":"usersguide/running/#running-directly","title":"Running directly","text":"<p>To run WeeWX directly, invoke the main program, <code>weewxd</code>.</p> <pre><code>weewxd\n</code></pre> <p>Note</p> <p>Depending on device permissions, you may need root permissions to communicate with the station hardware.  If this is the case, use <code>sudo</code>: <pre><code>sudo weewxd\n</code></pre></p> <p>Note</p> <p>If your configuration file is named something other than <code>weewx.conf</code>, or if it is in a non-standard place, then you will have to specify it explicitly on the command line. For example:</p> <pre><code>weewxd /some/path/to/weewx.conf\n</code></pre> <p>If your station has a data logger, the program will start by downloading any data stored in your weather station into the archive database. For some stations, such as the Davis Vantage with a couple of thousand records, this could take a minute or two.</p> <p>WeeWX will then start monitoring live sensor data (also referred to as 'LOOP' data), printing a short version of the received data on standard output, about once every two seconds for a Vantage station, or considerably longer for some other stations.</p>"},{"location":"usersguide/running/#running-as-a-daemon","title":"Running as a daemon","text":"<p>For unattended operations it is best to have WeeWX run as a daemon, started automatically when the server is rebooted.</p> <p>If you use a packaged installer, this is done automatically. The installer finishes with a daemon running in the background.</p> <p>For a pip install, you will have to do this yourself. See the section Run as a daemon in the pip quick start guide.</p>"},{"location":"usersguide/running/#monitoring-weewx","title":"Monitoring WeeWX","text":"<p>WeeWX logs many events to the system log. On Debian systems, this is <code>/var/log/syslog</code>, on SuSE, <code>/var/log/messages</code>. Your system may use yet another place. When troubleshooting the system, be sure to check it!</p> <p>To watch the log as it is generated, use the tail command with the <code>-f</code> option:</p> <pre><code>tail -f /var/log/syslog\n</code></pre> <p>Set the <code>debug</code> option in <code>weewx.conf</code> to generate many more checks and output more information. This can be useful for diagnosing problems and debugging.</p> <pre><code>debug = 1\n</code></pre>"},{"location":"usersguide/webserver/","title":"Integrating with a web server","text":""},{"location":"usersguide/webserver/#if-the-server-is-on-the-same-machine","title":"If the server is on the same machine","text":"<p>The reports generated by WeeWX can be served by a web server running on the same machine as WeeWX. The WeeWX reports work with most web servers, including Apache, nginx, and lighttpd.</p> <p>There are a few strategies for making the web server see the WeeWX reports. You can modify the web server configuration, you can modify the WeeWX configuration, or you can make links in the file system. The strategy you choose depends on the operating system, web server, how you installed WeeWX, and how you prefer to manage your system. If you installed WeeWX using a Debian/Redhat/SUSE installer, you might not have to do anything!</p> <p>See the wiki article Configure a web server for details.</p>"},{"location":"usersguide/webserver/#if-the-server-is-on-a-different-machine","title":"If the server is on a different machine","text":"<p>Use FTP or RSYNC to transfer the files generated by WeeWX to your remote server. In WeeWX, FTP and RSYNC are implemented as reports. They are configured in the <code>[StdReport]</code> section of the WeeWX configuration file.</p> <p>For example, the following configuration would use RSYNC to copy the html and images files from the standard report to a folder <code>/var/www/html/weewx</code> on the server <code>wx.example.com</code>:</p> <pre><code>[StdReport]\n[[RSYNC]]\nskin = Rsync\nserver = wx.example.com\npath = /var/www/html/weewx\nuser = wxuser\n</code></pre> <p>The following configuration would use FTP to copy the html and image files:</p> <pre><code>[StdReport]\n[[FTP]]\nskin = Ftp\nserver = wx.example.com\npath = /weewx\nuser = wxuser\npassword = wxpass\n</code></pre> <p>It is possible to rsync or FTP more than one directory to the remote server. For example, suppose you have a home webcam that puts its images in <code>/home/webcam/www</code>. You want to FTP not only the files generated by WeeWX, but also these webcam images, to a remote server. The webcam images should go in a subdirectory webcam of the weewx directory. The solution is to include more than one FTP section under <code>[StdReport]</code>:</p> <pre><code>[StdReport]\n\n# Location of the generated reports, relative to WEEWX_ROOT\nHTML_ROOT = public_html\n\n...\n\n# As before:\n[[FTP]]\nskin = Ftp\nserver = wx.example.com\npath = /weewx\nuser = wxuser\npassword = wxpass\n\n# Add a second FTP. You can name it anything.\n[[webcam_FTP]]\nskin = Ftp\n# Override HTML_ROOT:\nHTML_ROOT=/home/webcam/www\nserver = wx.example.com\npath = /weewx/webcam\nuser = wxuser\npassword = wxpass\n</code></pre> <p>See the documentation for the <code>[[FTP]]</code> and <code>[[RSYNC]]</code> sections of the configuration file <code>weewx.conf</code> for details and options.</p>"},{"location":"usersguide/where/","title":"Where to find things","text":""},{"location":"usersguide/where/#location-of-weewx-components","title":"Location of WeeWX components","text":"<p>Here is a summary of the layout for the different install methods, along with the symbolic names used for each component. These names are used throughout the documentation.</p> DebianRedHatopenSUSEpip Component Symbolic name Nominal value WeeWX root directory <code>WEEWX_ROOT</code> <code>/etc/weewx</code> Skins and templates <code>SKIN_ROOT</code> <code>/etc/weewx/skins/</code> User directory <code>USER_ROOT</code> <code>/etc/weewx/bin/user/</code> Examples <code>EXAMPLE_ROOT</code> <code>/etc/weewx/examples/</code> Executables <code>BIN_ROOT</code> <code>/usr/share/weewx/</code> SQLite databases <code>SQLITE_ROOT</code> <code>/var/lib/weewx/</code> Web pages and images <code>HTML_ROOT</code> <code>/var/www/html/weewx/</code> Documentation <code>DOC_ROOT</code> <code>/usr/share/doc/weewx/</code> Component Symbolic name Nominal value WeeWX root directory <code>WEEWX_ROOT</code> <code>/etc/weewx</code> Skins and templates <code>SKIN_ROOT</code> <code>/etc/weewx/skins/</code> User directory <code>USER_ROOT</code> <code>/etc/weewx/bin/user/</code> Examples <code>EXAMPLE_ROOT</code> <code>/etc/weewx/examples/</code> Executables <code>BIN_ROOT</code> <code>/usr/share/weewx/</code> SQLite databases <code>SQLITE_ROOT</code> <code>/var/lib/weewx/</code> Web pages and images <code>HTML_ROOT</code> <code>/var/www/html/weewx/</code> Documentation <code>DOC_ROOT</code> <code>/usr/share/doc/weewx-x.y.z/</code> Component Symbolic name Nominal value WeeWX root directory <code>WEEWX_ROOT</code> <code>/etc/weewx</code> Skins and templates <code>SKIN_ROOT</code> <code>/etc/weewx/skins/</code> User directory <code>USER_ROOT</code> <code>/etc/weewx/bin/user/</code> Examples <code>EXAMPLE_ROOT</code> <code>/etc/weewx/examples/</code> Executables <code>BIN_ROOT</code> <code>/usr/share/weewx/</code> SQLite databases <code>SQLITE_ROOT</code> <code>/var/lib/weewx/</code> Web pages and images <code>HTML_ROOT</code> <code>/var/www/html/weewx/</code> Documentation <code>DOC_ROOT</code> <code>/usr/share/doc/weewx-x.y.z/</code> Component Symbolic name Nominal value WeeWX root directory <code>WEEWX_ROOT</code> <code>~/weewx-data</code> Skins and templates <code>SKIN_ROOT</code> <code>skins/</code> User directory <code>USER_ROOT</code> <code>bin/user/</code> Examples <code>EXAMPLE_ROOT</code> <code>examples/</code> Executables <code>BIN_ROOT</code> varies SQLite databases <code>SQLITE_ROOT</code> <code>archive/</code> Web pages and images <code>HTML_ROOT</code> <code>public_html/</code> Documentation <code>DOC_ROOT</code> <code>docs/</code> <p>Note</p> <p>In the locations above, relative paths are relative to <code>WEEWX_ROOT</code>. Absolute paths begin with a forward slash (<code>/</code>).  The tilde character <code>~</code> represents the <code>HOME</code> directory of the user.</p>"},{"location":"usersguide/where/#location-of-executables-in-a-pip-install","title":"Location of executables in a pip install","text":"<p>If you use a pip install, the location of the executables will depend on how the installation was done.</p> Install method Commands Location of executables Virtual environment(recommended) <code>python3 -m venv ~/ve</code><code>source ~/ve/bin/activate</code><code>pip3 install weewx</code> <code>~/ve/bin/</code> pip, no sudo, with <code>--user</code> <code>pip3 install weewx --user</code> <code>~/.local/bin/</code> pip, no sudo, no <code>--user</code> <code>pip3 install weewx</code> <code>~/.local/bin/</code> pip with sudo(not recommended) <code>sudo pip3 install weewx</code> <code>/usr/local/bin/</code> (1) Virtual environment with <code>--user</code>(not allowed) <code>python3 -m venv ~/ve</code><code>source ~/ve/bin/activate</code><code>pip3 install weewx --user</code> N/A <p>(1) Checked on Ubuntu 22.02 and Rocky v9.1</p>"},{"location":"usersguide/where/#log-files","title":"Log files","text":"<p>In the default configuration, WeeWX writes its status to the system log. This is where to find the system log for each platform.</p> DebianRedHatopenSUSEmacOS <p><code>/var/log/syslog</code></p> <p>Note</p> <p>You need root permission to view the log.</p> <p><code>/var/log/messages</code></p> <p>Note</p> <p>You need root permission to view the log.</p> <p><code>/var/log/messages</code></p> <p>Note</p> <p>You need root permission to view the log.</p> <p><code>/var/log/syslog</code></p> <p>Note</p> <p>On macOS, the log file is likely to contain only severe log messages.</p> <p>If the default for your system is inconvenient, or does not provide the logging fidelity that you require, then you may want to consider logging to a separate, rotating log file. See the wiki article  Logging to rotating files.</p>"},{"location":"usersguide/troubleshooting/hardware/","title":"Hardware problems","text":""},{"location":"usersguide/troubleshooting/hardware/#tips-on-making-a-system-reliable","title":"Tips on making a system reliable","text":"<p>If you are having problems keeping your weather station up for long periods of time, here are some tips, in decreasing order of importance:</p> <ul> <li> <p>Run on dedicated hardware. If you are using the server for other tasks,   particularly as your desktop machine, you will have reliability problems. If   you are using it as a print or network server, you will probably be OK.</p> </li> <li> <p>Run headless. Modern graphical systems are extremely complex. As new features   are added, test suites do not always catch up. Your system will be much more   reliable if you run it without a windowing system.</p> </li> <li> <p>Use an Uninterruptible Power Supply (UPS). The vast majority of power glitches   are very short-lived \u2014 just a second or two \u2014 so you do not need a   big one. The 425VA unit I use to protect my fit-PC cost $55 at Best Buy.</p> </li> <li> <p>If you buy a Davis VantagePro and your computer has an old-fashioned serial   port, get the VantagePro with a serial connection, not a USB connection. See   the Wiki article on Davis cp2101 converter   problems   for details.</p> </li> <li> <p>If you do use a USB connection, put a ferrite coil on each end of the cable to   your console. If you have enough length and the ferrite coil is big enough,   make a loop, so it goes through the coil twice. See the picture below:</p> </li> </ul> <p> </p> Cable connection looped through a ferrite coil Ferrite coils on a Davis Envoy. There are two coils, one on the USB connection  (top wire) and one on the power supply. Both have loops."},{"location":"usersguide/troubleshooting/hardware/#archive-interval","title":"Archive interval","text":"<p>Most hardware with data-logging includes a parameter to specify the archive interval used by the logger. If the hardware and driver support it, WeeWX will use this interval as the archive interval. If not, WeeWX will fall back to using option <code>archive_interval</code> specified in [StdArchive]. The default  fallback value is 300 seconds (5 minutes).</p> <p>If the hardware archive interval is large, it will take a long time before anything shows up in the WeeWX reports. For example, WS23xx stations ship with an archive interval of 60 minutes, and Fine Offset stations ship with an archive interval of 30 minutes. If you run WeeWX with a WS23xx station in its factory default configuration, it will take 60 minutes before the first data point shows up, then another 60 minutes until the next one, and so on.</p> <p>Since reports are generated when a new archive record arrives, a large archive interval means that reports will be generated infrequently.</p> <p>If you want data and reports closer to real-time, use the weectl device utility to change the  interval.</p>"},{"location":"usersguide/troubleshooting/hardware/#raspberry-pi","title":"Raspberry Pi","text":"<p>WeeWX runs very well on the Raspberry Pi, from the original Model A and Model B, to the latest incarnations. However, the Pi does have some quirks, including issues with USB power and lack of a clock.</p> <p>See the Wiki for up-to-date information on Running WeeWX on a Raspberry Pi.</p>"},{"location":"usersguide/troubleshooting/hardware/#davis-stations","title":"Davis stations","text":"<p>For Davis-specific tips, see the Wiki article Troubleshooting Davis stations</p>"},{"location":"usersguide/troubleshooting/hardware/#fine-offset-usb-lockups","title":"Fine Offset USB lockups","text":"<p>The Fine Offset series weather stations and their derivatives are a fine value and can be made to work reasonably reliably, but they have one problem that is difficult to work around: the USB can unexpectantly lock up, making it impossible to communicate with the console. The symptom in the log will look something like this:</p> <pre><code>Jun 7 21:50:33 localhost weewx[2460]: fousb: get archive interval failed attempt 1 of 3: could not detach kernel driver from interface 0: No data available\n</code></pre> <p>The exact error may vary, but the thing to look for is the \"could not detach kernel driver\" message. Unfortunately, we have not found a software cure for this. Instead, you must power cycle the unit. Remove the batteries and unplug the USB, then put it back together. No need to restart WeeWX.</p> <p>More details about Fine Offset lockups can be found in the Wiki.</p>"},{"location":"usersguide/troubleshooting/meteo/","title":"Meteorological problems","text":""},{"location":"usersguide/troubleshooting/meteo/#the-pressure-reported-by-weewx-does-not-match-the-pressure-on-the-console","title":"The pressure reported by WeeWX does not match the pressure on the console","text":"<p>Be sure that you are comparing the right values. There are three different types of pressure:</p> <ul> <li> <p>Station Pressure: The Station Pressure (SP), which is the raw, absolute   pressure measured by the station. This is <code>pressure</code> in WeeWX packets and   archive records.</p> </li> <li> <p>Sea Level Pressure: The Sea Level Pressure (SLP) is obtained by   correcting the Station Pressure for altitude and local temperature. This is   <code>barometer</code> in WeeWX packets and archive records.</p> </li> <li> <p>Altimeter: The Altimeter Setting (AS) is obtained by correcting the  Station Pressure for altitude. This is <code>altimeter</code> in WeeWX packets and archive records. Any station might require calibration. For some hardware, this can be done at the weather station console. Alternatively, use the <code>StdCalibrate</code> section to apply an offset.</p> </li> </ul> <p>If your station is significantly above (or below) sea level, be sure that the station altitude is specified properly. Also, be sure that any calibration results in a station pressure and/or barometric pressure that matches those reported by other stations in your area.</p>"},{"location":"usersguide/troubleshooting/meteo/#calibrating-barometer-does-not-change-the-pressure-displayed-by-weewx","title":"Calibrating barometer does not change the pressure displayed by WeeWX","text":"<p>Be sure that the calibration is applied to the correct quantity.</p> <p>The corrections in the <code>StdCalibrate</code> section apply only to raw values from the hardware; corrections are not applied to derived quantities.</p> <p>The station hardware matters. Some stations report gauge pressure (<code>pressure</code>) while other stations report sea-level pressure (<code>barometer</code>). For example, if the hardware is a Vantage station, the correction must be applied to <code>barometer</code> since the Vantage station reports <code>barometer</code> and WeeWX calculates <code>pressure</code>. However, if the hardware is a FineOffset station, the correction must be applied to <code>pressure</code> since the FineOffset stations report <code>pressure</code> and WeeWX calculates <code>barometer</code>.</p>"},{"location":"usersguide/troubleshooting/meteo/#the-rainfall-andor-rain-rate-reported-by-weewx-do-not-match-the-console","title":"The rainfall and/or rain rate reported by WeeWX do not match the console","text":"<p>First of all, be sure that you are comparing the right quantities. The value <code>rain</code> is the amount of rainfall observed in a period of time. The period of time might be a LOOP interval, in which case the <code>rain</code> is the amount of rain since the last LOOP packet. Because LOOP packets arrive quite frequently, this value is likely to be very small. Or the period of time might be an archive interval, in which case <code>rain</code> is the total amount of rain reported since the last archive record.</p> <p>Some consoles report the amount of rain in the past hour, or the amount of rain since midnight.</p> <p>The rain rate is a derived quantity. Some stations report a rain rate, but for those that do not, WeeWX will calculate the rain rate.</p> <p>Finally, beware of calibration factors specific to the hardware. For example, the bucket type on a Vantage station must be specified when you set up the weather station. If you modify the rain bucket with a larger collection area, then you will have to add a multiplier in the <code>StdCalibrate</code> section.</p> <p>To diagnose rain issues, run WeeWX directly so that you can see each LOOP packet and REC archive record. Tip the bucket to verify that each bucket tip is detected and reported by WeeWX. Verify that each bucket tip is converted to the correct rainfall amount. Then check the database to verify that the values are properly added and recorded.</p>"},{"location":"usersguide/troubleshooting/meteo/#there-is-no-wind-direction-when-wind-speed-is-zero","title":"There is no wind direction when wind speed is zero","text":"<p>This is by design \u2014 if there is no wind, then the wind direction is undefined, represented by NULL in the database or <code>None</code> in Python. This policy is enforced by the <code>StdWXCalculate</code> service. If necessary, it can be overridden. See option force_null in the [StdWXCalculate] section.</p> <p>WeeWX distinguishes between a value of zero and no value (NULL or None). However, some services do not make this distinction and replace a NULL or None with a clearly invalid value such as -999.</p>"},{"location":"usersguide/troubleshooting/software/","title":"Software problems","text":""},{"location":"usersguide/troubleshooting/software/#nothing-in-the-log-file","title":"Nothing in the log file","text":"<p>As it is running, WeeWX periodically sends status information, failures, and other things to your system's logging facility. They typically look something like this (the first line is not actually part of the log):</p> <pre><code> DATE    TIME       HOST    weewx[PID]  LEVL MESSAGE\nFeb  8 04:25:16 hummingbird weewx[6932] INFO weewx.manager: Added record 2020-02-08 04:25:00 PST (1581164700) to database 'weewx.sdb'\nFeb  8 04:25:16 hummingbird weewx[6932] INFO weewx.manager: Added record 2020-02-08 04:25:00 PST (1581164700) to daily summary in 'weewx.sdb'\nFeb  8 04:25:17 hummingbird weewx[6932] INFO weewx.restx: PWSWeather: Published record 2020-02-08 04:25:00 PST (1581164700)\nFeb  8 04:25:17 hummingbird weewx[6932] INFO weewx.restx: Wunderground-PWS: Published record 2020-02-08 04:25:00 PST (1581164700)\nFeb  8 04:25:17 hummingbird weewx[6932] INFO weewx.restx: Windy: Published record 2020-02-08 04:25:00 PST (1581164700)\nFeb  8 04:25:17 hummingbird weewx[6932] ERROR weewx.restx: WOW: Failed to publish record 2020-02-08 04:25:00 PST (1581164700): Failed upload after 3 tries\n</code></pre> <p>The location of this logging file varies from system to system, but it is typically in <code>/var/log/syslog</code> or <code>/var/log/messages</code>.</p> <p>However, some systems default to saving only warning or critical information, so INFO messages from WeeWX may not appear. If this happens to you, check your system logging configuration. On Debian systems, look in <code>/etc/rsyslog.conf</code>. On Redhat systems, look in <code>/etc/syslog.conf</code>.</p>"},{"location":"usersguide/troubleshooting/software/#configobj-errors","title":"ConfigObj errors","text":"<p>These are errors in the configuration file. Two are very common. Incidentally, these errors are far easier to diagnose when WeeWX is run directly from the command line than when it is run as a daemon.</p>"},{"location":"usersguide/troubleshooting/software/#exception-configobjduplicateerror","title":"Exception <code>configobj.DuplicateError</code>","text":"<p>This error is caused by using an identifier more than once in the configuration file. For example, you may have inadvertently listed your FTP server twice:</p> <pre><code>[Reports]\n[[FTP]]\n... (details elided)\nuser = fred\nserver = ftp.myhost.com\npassword = mypassword\nserver = ftp.myhost.com      # OOPS! Listed it twice!\npath = /weather\n...\n</code></pre> <p>Generally, if you encounter this error, the log file will give you the line number it happened in:</p> <pre><code>Apr 24 12:09:15 raven weewx[11480]: wxengine: Error while parsing configuration file /home/weewx/weewx.conf\nApr 24 12:09:15 raven weewx[11480]: wxengine: Unable to initialize main loop:\nApr 24 12:09:15 raven weewx[11480]: **** Duplicate keyword name at line 254.\nApr 24 12:09:15 raven weewx[11480]: **** Exiting. \n</code></pre>"},{"location":"usersguide/troubleshooting/software/#exception-configobjnestingerror","title":"Exception <code>configobj.NestingError</code>","text":"<p>This is a very similar error, and is caused by a misformed section nesting. For example:</p> <pre><code>[Reports]\n[[FTP]]]\n...\n</code></pre> <p>Note the extra closing bracket on the subsection <code>FTP</code>.</p>"},{"location":"usersguide/troubleshooting/software/#no-barometer-data","title":"No barometer data","text":"<p>If everything appears normal except that you have no barometer data, the problem may be a mismatch between the unit system used for service <code>StdConvert</code> and the unit system used by service <code>StdQC</code>. For example:</p> <pre><code>[StdConvert]\ntarget_unit = METRIC\n...\n\n[StdQC]\n[[MinMax]]\nbarometer = 28, 32.5\n</code></pre> <p>The problem is that you are requiring the barometer data to be between 28 and 32.5, but with the unit system set to <code>METRIC</code>, the data will be in the range 990 to 1050 or so!</p> <p>The solution is to change the values to match the units in <code>StdConvert</code>, or, better yet, specify the units in <code>MinMax</code>. For example:</p> <pre><code>[StdConvert]\ntarget_unit = US\n...\n\n[StdQC]\n[[MinMax]]\nbarometer = 950, 1100, mbar\n</code></pre>"},{"location":"usersguide/troubleshooting/software/#exception-cheetahnamemappernotfound","title":"Exception <code>Cheetah.NameMapper.NotFound</code>","text":"<p>If you get errors of the sort:</p> <pre><code>Apr 12 05:12:32 raven reportengine[3074]: filegenerator: Caught exception \"&lt;class 'NameMapper.NotFound'&gt;\"\nApr 12 05:12:32 raven reportengine[3074]: **** Message: \"cannot find 'fubar' in template /home/weewx/skins/Standard/index.html.tmpl\"\nApr 12 05:12:32 raven reportengine[3074]: **** Ignoring template and continuing.\n</code></pre> <p>you have a tag in your template that WeeWX does not recognize. In this example, it is the tag <code>$fubar</code> in the template <code>/home/weewx/skins/Standard/index.html.tmpl</code>.</p>"},{"location":"usersguide/troubleshooting/software/#dots-in-the-plots","title":"Dots in the plots","text":"<p>If you see dots instead of lines in the daily plots, you might want to change the graphing options or adjust the station's archive interval.</p> <p>In a default configuration, a time period greater than 1% of the displayed timespan is considered to be a gap in data. So when the interval between data points is greater than about 10 minutes, the daily plots show dots instead of connected points.</p> <p>Change the option <code>line_gap_fraction</code> in <code>skin.conf</code> to control how much time is considered a break in data.</p> <p>As for the archive interval, check the log file for an entry like this soon after WeeWX starts up:</p> <pre><code>Dec 30 10:54:17 saga weewx[10035]: wxengine: The archive interval in the configuration file\n            (300) does not match the station hardware interval (1800).\nDec 30 10:54:17 saga weewx[10035]: wxengine: Using archive interval of 1800\n</code></pre> <p>In this example, the interval specified in <code>weewx.conf</code> is 5 minutes, but the interval specified in the station hardware is 30 minutes. When the interval in <code>weewx.conf</code> does not match the station's hardware interval, WeeWX defers to the station's interval.</p> <p>Use the <code>weectl device</code> utility to change the station's interval.</p>"},{"location":"usersguide/troubleshooting/software/#spikes-in-the-graphs","title":"Spikes in the graphs","text":"<p>Occasionally you may see anomalous readings, typically manifested as spikes in the graphs. The source could be a flaky serial/USB connection, radio or other interference, a cheap USB-Serial adapter, low-quality sensors, or simply an anomalous reading.</p> <p>Sensor quality matters. It is not unusual for some low-end hardware to report odd sensor readings occasionally (once every few days). Some sensors, such as solar radiation/UV, have a limited lifespan of about 5 years. The (analog) humidity sensors on older Vantage stations are known to deteriorate after a few years in wet environments.</p> <p>If you frequently see anomalous data, first check the hardware.</p> <p>To keep bad data from the database, add a quality control (QC) rule such as Min/Max bounds. See the section <code>[StdQC]</code> for details.</p> <p>To remove bad data from the database, see the Wiki article Cleaning up old  \"bad\" data.</p>"},{"location":"usersguide/troubleshooting/software/#database-is-locked-error","title":"'Database is locked' error","text":"<p>This seems to be a problem with the Raspberry Pi, when using SQLite. There is no analogous problem with MySQL databases. You will see errors in the system log that looks like this:</p> <pre><code>Feb 12 07:11:06 rpi weewx[20930]: ****    File \"/usr/share/weewx/weewx/archive.py\", line 118, in lastGoodStamp\nFeb 12 07:11:06 rpi weewx[20930]: ****      _row = self.getSql(\"SELECT MAX(dateTime) FROM %s\" % self.table)\nFeb 12 07:11:06 rpi weewx[20930]: ****    File \"/usr/share/weewx/weewx/archive.py\", line 250, in getSql\nFeb 12 07:11:06 rpi weewx[20930]: ****    File \"/usr/share/weewx/weedb/sqlite.py\", line 120, in execute\nFeb 12 07:11:06 rpi weewx[20930]: ****      raise weedb.OperationalError(e)\nFeb 12 07:11:06 rpi weewx[20930]: ****  OperationalError: database is locked\nFeb 12 07:11:06 rpi weewx[20930]: ****      _cursor.execute(sql, sqlargs)\nFeb 12 07:11:06 rpi weewx[20930]: ****    File \"/usr/share/weewx/weedb/sqlite.py\", line 120, in execute\nFeb 12 07:11:06 rpi weewx[20930]: ****      raise weedb.OperationalError(e)\nFeb 12 07:11:06 rpi weewx[20930]: ****  OperationalError: database is locked\n</code></pre> <p>We are still trying to decipher exactly what the problem is, but it seems that (many? most? all?) implementations of the SQLite 'C' access libraries on the RPi sleep for a full second if they find the database locked. This gives them only five chances within the 5-second timeout period before an exception is raised.</p> <p>Not all Raspberry Pis have this problem. It seems to be most acute when running big templates with lots of queries, such as the forecast extension.</p> <p>There are a few possible fixes:</p> <ul> <li> <p>Increase the option   <code>timeout</code>.</p> </li> <li> <p>Use a high quality SD card in your RPi. There seems to be some evidence that   faster SD cards are more immune to this problem.</p> </li> <li> <p>Trim the size of your templates to minimize the number of queries necessary.</p> </li> </ul> <p>None of these 'fixes' are very satisfying, and we're trying to come up with a more robust solution.</p>"},{"location":"usersguide/troubleshooting/software/#funky-symbols-in-plots","title":"Funky symbols in plots","text":"<p>If your plots have strange looking symbols for units, such as degrees Fahrenheit (\u00b0F), that look something like this:</p> <p></p> <p>Then the problem may be that you are missing the fonts specified for the option <code>unit_label_font_path</code> in your <code>skin.conf</code> file and, instead, WeeWX is substituting a default font, which does not support the Unicode character necessary to make a degree sign. Look in section <code>[ImageGenerator]</code> for a line that looks like:</p> <pre><code>unit_label_font_path = /usr/share/fonts/truetype/freefont/FreeMonoBold.ttf\n</code></pre> <p>Make sure that the specified path (<code>/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf</code> in this case) actually exists. If it does not, on Debian operating systems (such as Ubuntu), you may be able to install the necessary fonts:</p> <pre><code>sudo apt-get install fonts-freefont-ttf\nsudo fc-cache -f -v\n</code></pre> <p>(On older systems, the package <code>fonts-freefont-ttf</code> may be called <code>ttf-freefont</code>). The first command installs the \"Truetype\" fonts, the second rebuilds the font cache. If your system does not have the <code>fc-cache</code> command, then install it from the <code>fontconfig</code> package:</p> <pre><code>sudo apt-get install fontconfig\n</code></pre> <p>If none of this works, or if you are on a different operating system, then you will have to change the option <code>unit_label_font_path</code> to point to something on your system which does support the Unicode characters you plan to use.</p>"},{"location":"usersguide/troubleshooting/software/#exception-unicodeencodeerror","title":"Exception <code>UnicodeEncodeError</code>","text":"<p>This problem is closely related to the \"Funky symbols\" problem above. In this case, you may see errors in your log that look like:</p> <pre><code>May 14 13:35:23 web weewx[5633]: cheetahgenerator: Generated 14 files for report StandardReport in 1.27 seconds\nMay 14 13:35:23 web weewx[5633]: reportengine: Caught unrecoverable exception in generator weewx.imagegenerator.ImageGenerator\nMay 14 13:35:23 web weewx[5633]:         ****  'ascii' codec can't encode character u'\\xe8' in position 5: ordinal not in range(128)\nMay 14 13:35:23 web weewx[5633]:         ****  Traceback (most recent call last):\nMay 14 13:35:23 web weewx[5633]:         ****    File \"/usr/share/weewx/weewx/reportengine.py\", line 139, in run\nMay 14 13:35:23 web weewx[5633]:         ****      obj.start()\nMay 14 13:35:23 web weewx[5633]:         ****    File \"/usr/share/weewx/weewx/reportengine.py\", line 170, in start\nMay 14 13:35:23 web weewx[5633]:         ****      self.run()\nMay 14 13:35:23 web weewx[5633]:         ****    File \"/usr/share/weewx/weewx/imagegenerator.py\", line 36, in run\nMay 14 13:35:23 web weewx[5633]:         ****      self.gen_images(self.gen_ts)\nMay 14 13:35:23 web weewx[5633]:         ****    File \"/usr/share/weewx/weewx/imagegenerator.py\", line 220, in gen_images\nMay 14 13:35:23 web weewx[5633]:         ****      image = plot.render()\nMay 14 13:35:23 web weewx[5633]:         ****    File \"/usr/share/weewx/weeplot/genplot.py\", line 175, in render\nMay 14 13:35:23 web weewx[5633]:         ****      self._renderTopBand(draw)\nMay 14 13:35:23 web weewx[5633]:         ****    File \"/usr/share/weewx/weeplot/genplot.py\", line 390, in _renderTopBand\nMay 14 13:35:23 web weewx[5633]:         ****      top_label_size = draw.textsize(top_label, font=top_label_font)\nMay 14 13:35:23 web weewx[5633]:         ****    File \"/usr/lib/python2.7/dist-packages/PIL/ImageDraw.py\", line 278, in textsize\nMay 14 13:35:23 web weewx[5633]:         ****      return font.getsize(text)\nMay 14 13:35:23 web weewx[5633]:         ****  UnicodeEncodeError: 'ascii' codec can't encode character u'\\xe8' in position 5: ordinal not in range(128)\nMay 14 13:35:23 web weewx[5633]:         ****  Generator terminated...\n</code></pre> <p>This is frequently caused by the necessary Truetype fonts not being installed on your computer and, instead, a default font is being substituted, which only knows how to plot ASCII characters. The cure is as before: install the font.</p>"},{"location":"usersguide/troubleshooting/software/#data-is-archived-but-someall-reports-do-not-run","title":"Data is archived but some/all reports do not run","text":"<p>If WeeWX appears to be running normally but some or all reports are not being run, either all the time or periodically, the problem could be the inadvertant use or incorrect setting of the <code>report_timing</code> option in <code>weewx.conf</code>. The <code>report_timing</code> option allows the user to specify when some or all reports are run (see Scheduling report generation). By default, the option <code>report_timing</code> is disabled and all reports are run each archive period.</p> <p>To see if the <code>report_timing</code> option is causing reports to be skipped, inspect the log file. Any reports that are skipped due to the <code>report_timing</code> option will be logged as follows:</p> <pre><code>Apr 29 09:30:17 rosella weewx[3319]: reportengine: Report StandardReport skipped due to report_timing setting\n</code></pre> <p>If reports are being incorrectly skipped due to <code>report_timing</code>, then edit <code>weewx.conf</code> and check for a <code>report_timing</code> option in <code>[StdReport]</code>. Either remove all occurrences of <code>report_timing</code> to run all reports each archive period, or confirm the correct use and setting of the <code>report_timing</code> option.</p>"},{"location":"usersguide/troubleshooting/software/#the-wrong-reports-are-being-skipped-by-report_timing","title":"The wrong reports are being skipped by report_timing","text":"<p>If the option <code>report_timing</code> is being used, and the results are not as expected, there may be an error in the <code>report_timing</code> option. If there are errors in the <code>report_timing</code> parameter, the report will be run on each archive interval. First check the <code>report_timing</code> option parameters to ensure they are valid and there are no additonal spaces or other unwanted characters. Then check that the parameters are correctly set for the desired report generation times. For example, is the correct day of the week number being used if limiting the day of the week parameter. Refer to the section Scheduling report generation.</p> <p>Check the log file for any entries relating to the reports concerned. Errors in the <code>report_timing</code> parameter and skipped reports are logged only when <code>debug=1</code> in <code>weewx.conf</code>.</p>"},{"location":"usersguide/troubleshooting/what-to-do/","title":"Troubleshooting","text":"<p>If you are having problems, first look at the hardware, software, and meteorological problems pages. You might be experiencing a problem that someone else has already solved.</p> <p>Hardware problems Software problems Meteorological problems</p> <p>Be sure to search the weewx-user group, especially if you are using a driver or skin that is not part of the WeeWX core.</p> <p>If you still have problems, here are a few things to try on your system:</p> <ol> <li> <p>Look at the log file. We are always happy to take questions, but the first thing someone will ask is, \"What did you find in the log file?\"</p> </li> <li> <p>Run <code>weewxd</code> directly, rather than as a daemon. Generally, WeeWX will catch and log any unrecoverable exceptions, but if you are getting strange results, it is worth running directly and looking for any clues.</p> </li> <li> <p>Set the option <code>debug = 1</code> in <code>weewx.conf</code>. This will put much more information in the log file, which can be very useful for troubleshooting and debugging!</p> </li> </ol> <p>If you are still stuck, post your problem to the weewx-user group. The Wiki has some guidelines on how to do an effective post.</p>"},{"location":"utilities/wee_import-about/","title":"wee_import","text":"<p>Some WeeWX users will have historical data from another source (e.g., other weather station software or a manually compiled file) which they wish to import into WeeWX. Such data can, depending upon the source, be imported using the <code>wee_import</code> utility.</p> <p>The <code>wee_import</code> utility supports importing observational data from the following sources:</p> <ul> <li>a single Comma Separated Values (CSV) format file</li> <li>the historical observations of a Weather Underground personal weather station</li> <li>one or more Cumulus monthly log files</li> <li>one or more Weather Display monthly log files</li> <li>one or more WeatherCat monthly .cat files</li> </ul>"},{"location":"utilities/wee_import-common_opt/","title":"Common options","text":"<p>Before starting, it's worth running the utility with the <code>--help</code> flag to see how <code>wee_import</code> is used:</p> <p><pre><code>wee_import --help\n</code></pre> <pre><code>Usage: wee_import --help\n       wee_import --version\n       wee_import --import-config=IMPORT_CONFIG_FILE\n            [--config=CONFIG_FILE]\n            [--date=YYYY-mm-dd | --from=YYYY-mm-dd[THH:MM] --to=YYYY-mm-dd[THH:MM]]\n            [--dry-run]\n            [--verbose]\n            [--no-prompt]\n            [--suppress-warnings]\n\n\nImport observation data into a WeeWX archive.\n\nOptions:\n  -h, --help            show this help message and exit\n  --config=CONFIG_FILE  Use configuration file CONFIG_FILE.\n  --import-config=IMPORT_CONFIG_FILE\n                        Use import configuration file IMPORT_CONFIG_FILE.\n  --dry-run             Print what would happen but do not do it.\n  --date=YYYY-mm-dd     Import data for this date. Format is YYYY-mm-dd.\n  --from=YYYY-mm-dd[THH:MM]\n                        Import data starting at this date or date-time. Format\n                        is YYYY-mm-dd[THH:MM].\n  --to=YYYY-mm-dd[THH:MM]\n                        Import data up until this date or date-time. Format is\n                        YYYY-mm-dd[THH:MM].\n  --verbose             Print and log useful extra output.\n  --no-prompt           Do not prompt. Accept relevant defaults and all y/n\n                        prompts.\n  --suppress-warnings   Suppress warnings to stdout. Warnings are still\n                        logged.\n  --version             Display wee_import version number.\n\nwee_import will import data from an external source into a WeeWX\narchive. Daily summaries are updated as each archive record is\nimported so there should be no need to separately rebuild the daily\nsummaries.\n</code></pre></p>"},{"location":"utilities/wee_import-common_opt/#options","title":"Options","text":""},{"location":"utilities/wee_import-common_opt/#-configfilename","title":"<code>--config=FILENAME</code>","text":"<p>The utility can usually guess where the configuration file is, but if you have an unusual installation or multiple stations, you may have to tell it explicitly.</p> <pre><code>wee_import --config=/this/directory/weewx.conf --import-config=/directory/import.conf\n</code></pre>"},{"location":"utilities/wee_import-common_opt/#-import-configfilename","title":"<code>--import-config=FILENAME</code>","text":"<p><code>wee_import</code> uses a secondary configuration file, known as the import configuration file, to store various import parameters. The <code>--import-config</code> option is mandatory for all imports. Example import configuration files for each type of import supported by <code>wee_import</code> are provided in the <code>util/import</code> directory. These example files are best used by making a copy of into a working directory and then modifying the copy to suit your needs. The <code>--import-config</code> option is used as follows:</p> <pre><code>wee_import --import-config=/directory/import.conf\n</code></pre>"},{"location":"utilities/wee_import-common_opt/#-dry-run","title":"<code>--dry-run</code>","text":"<p>The <code>--dry-run</code> option will cause the import to proceed but no actual data will be saved to the database. This is a useful option to use when first importing data.</p> <pre><code>wee_import --import-config=/directory/import.conf --dry-run\n</code></pre>"},{"location":"utilities/wee_import-common_opt/#-dateyyyy-mm-dd","title":"<code>--date=YYYY-mm-dd</code>","text":"<p>Records from a single date can be imported by use of the <code>--date</code> option. The <code>--date</code> option accepts strings of the format <code>YYYY-mm-dd</code>. Whilst the use of the <code>--date</code> option will limit the imported data to that of a single date, the default action if the <code>--date</code> option (and the <code>--from</code> and <code>--to</code> options) is omitted may vary depending on the source. The operation of the <code>--date</code> option is summarised in the following table:</p> Option --date option Records imported for a CSV, Cumulus, Weather Display or WeatherCat import Records imported for a Weather Underground import omitted(i.e., the default) All available records Today's records only --date=2015-12-22 All records from 2015-12-22 00:00 (exclusive) to 2015-12-23 00:00 (inclusive) All records from 2015-12-22 00:00 (exclusive) to 2015-12-23 00:00 (inclusive) <p>Note</p> <p>If the <code>--date</code>, <code>--from</code> and <code>--to</code> options are omitted the default is to import today's records only when importing from Weather Underground or to import all available records when importing from any other source.</p> <p>Note</p> <p>WeeWX considers an archive record to represent an aggregation of data over the archive interval preceding the archive record's timestamp. For this reason imports which are to be limited to a given date with the <code>--date</code> option will only import records timestamped after midnight at the start of the day concerned and up to and including midnight at the end of the day concerned.</p>"},{"location":"utilities/wee_import-common_opt/#-from-and-to","title":"<code>--from</code> and <code>--to</code>","text":"<p>Whilst the <code>--date</code> option allows imported data to be limited to a single date, the <code>--from</code> and <code>--to</code> options allow finer control by importing only the records that fall within the date or date-time range specified by the <code>--from</code> and <code>--to</code> options. The <code>--from</code> option determines the earliest (inclusive), and the <code>--to</code> option determines the latest (exclusive), date or date-time of the records being imported. The <code>--from</code> and <code>--to</code> options accept a string of the format <code>YYYY-mm-dd[THH:MM]</code>. The T literal is mandatory if specifying a date-time.</p> <p>Note</p> <p>The <code>--from</code> and <code>--to</code> options must be used as a pair, they cannot be used individually or in conjunction with the <code>--date</code>option.</p> <p>The operation of the <code>--from</code> and <code>--to</code> options is summarised in the following table:</p> Options --from and --to options Records imported for a CSV, Cumulus, Weather Display or WeatherCat import Records imported for a Weather Underground import omitted(i.e., the default) omitted(i.e., the default) All available records Today's records only --from=2015-12-22 --to=2015-12-29 All records from 2015-12-22 00:00 (exclusive) to 2015-12-30 00:00 (inclusive) All records from 2015-12-22 00:00 (exclusive) to 2015-12-30 00:00 (inclusive) --from=2016-7-18T15:29 --to=2016-7-25 All records from 2016-7-18 15:29 (exclusive) to 2016-7-26 00:00 (inclusive) All records from 2016-7-18 15:29 (exclusive) to 2016-7-26 00:00 (inclusive) --from=2016-5-12 --to=2016-7-22T22:15 All records from 2016-5-12 00:00 (exclusive) to 2016-7-22 22:15 (inclusive) All records from 2016-5-12 00:00 (exclusive) to 2016-7-22 22:15 (inclusive) --from=2016-3-18T15:29 --to=2016-6-20T22:00 All records from 2016-3-18 15:29 (exclusive) to 2016-6-20 22:00 (inclusive) All records from 2016-3-18 15:29 (exclusive) to 2016-6-20 22:00 (inclusive) <p>Note</p> <p>If the <code>--date</code>, <code>--from</code> and <code>--to</code> options are omitted the default is to import today's records only when importing from Weather Underground or to import all available records when importing from any other source.</p> <p>Note</p> <p>WeeWX considers an archive record to represent an aggregation of data over the archive interval preceding the archive record's timestamp. For this reason imports which are to be limited to a given timespan with the <code>--from</code> and <code>--to</code> options will only import records timestamped after the timestamp represented by the <code>--from</code> option and up to and including the timestamp represented by the <code>--to</code> option.</p>"},{"location":"utilities/wee_import-common_opt/#-verbose","title":"<code>--verbose</code>","text":"<p>Inclusion of the <code>--verbose</code> option will cause additional information to be printed during <code>wee_import</code> execution.</p> <pre><code>wee_import --import-config=/directory/import.conf --verbose\n</code></pre>"},{"location":"utilities/wee_import-common_opt/#-no-prompt","title":"<code>--no-prompt</code>","text":"<p>Inclusion of the <code>--no-prompt</code> option will run <code>wee_import</code> without prompts. Relevant defaults will be used and all y/n prompts are automatically accepted as 'y'. This may be useful for unattended use of <code>wee_import</code>.</p> <pre><code>wee_import --import-config=/directory/import.conf --no-prompt\n</code></pre> <p>Warning</p> <p>Care must be taken when using the <code>--no-prompt</code> option as ignoring warnings during the import process can lead to unexpected results. Whilst existing data will be protected, the use or acceptance of an incorrect or unexpected parameter or default may lead to significant amounts of unwanted data being imported.</p>"},{"location":"utilities/wee_import-common_opt/#-suppress-warnings","title":"<code>--suppress-warnings</code>","text":"<p>The <code>--suppress-warnings</code> option suppresses <code>wee_import</code> warning messages from being displayed on the console during the import. <code>wee_import</code> may issue a number of warnings during import. These warnings may be due to the source containing more than one entry for a given timestamp or there being no data found for a mapped import field. These warnings do not necessarily require action, but they can consist of extensive output and thus make it difficult to follow the import progress. Irrespective of whether <code>--suppress-warnings</code> is used all warnings are sent to log.</p> <pre><code>wee_import --import-config=/directory/import.conf --suppress-warnings\n</code></pre>"},{"location":"utilities/wee_import-config_opt/","title":"Configuration options","text":"<p><code>wee_import</code> requires a second configuration file, the import configuration file, in addition to the standard WeeWX configuration file. The import configuration file specifies the import type and various options associated with each type of import. The import configuration file is specified using the mandatory <code>--import-config</code> option. How you construct the import configuration file is up to you; however, the recommended method is to copy one of the example import configuration files located in the <code>/home/weewx/util/import</code> or <code>/etc/weewx/import</code> directory as applicable, modify the configuration options in the newly copied file to suit the import to be performed and then use this file as the import configuration file.</p> <p>Following is the definitive guide to the options available in the import configuration file. Default values are provided for a number of options, meaning that if they are not listed in the import configuration file at all <code>wee_import</code> will pick sensible values. When the documentation below gives a default value this is the value that will be used if the option is omitted.</p>"},{"location":"utilities/wee_import-config_opt/#source","title":"<code>source</code>","text":"<p>The <code>source</code> option determines the type of import to be performed by <code>wee_import</code>. The option is mandatory and must be set to one of the following:</p> <ul> <li><code>CSV</code> to import from a single CSV format file.</li> <li><code>WU</code> to import from a Weather Underground PWS history</li> <li><code>Cumulus</code> to import from one or more Cumulus monthly log files.</li> <li><code>WD</code> to import from one or more Weather Display monthly log files.</li> <li><code>WeatherCat</code> to import from one or more WeatherCat monthly .cat files.</li> </ul> <p>There is no default.</p>"},{"location":"utilities/wee_import-config_opt/#csv","title":"[CSV]","text":"<p>The <code>[CSV]</code> section contains the options controlling the import of observational data from a CSV format file.</p>"},{"location":"utilities/wee_import-config_opt/#file","title":"<code>file</code>","text":"<p>The file containing the CSV format data to be used as the source during the import. Include full path and filename.</p> <p>There is no default.</p>"},{"location":"utilities/wee_import-config_opt/#source_encoding","title":"<code>source_encoding</code>","text":"<p>The source file encoding. This parameter is optional and should only need be used if the source file uses an encoding other than UTF-8 or an ASCII compatible encoding. If used, the setting used should be a Python Standard Encoding.</p> <p>The default is <code>utf-8-sig</code>.</p>"},{"location":"utilities/wee_import-config_opt/#delimiter","title":"<code>delimiter</code>","text":"<p>The character used to separate fields. Default is <code>,</code> (comma).</p>"},{"location":"utilities/wee_import-config_opt/#decimal","title":"<code>decimal</code>","text":"<p>The character used as the decimal point in the source files. A full stop is frequently used, but it may be another character. This parameter must be included in quotation marks.</p> <p>The default is <code>'.'</code>.</p>"},{"location":"utilities/wee_import-config_opt/#interval","title":"<code>interval</code>","text":"<p>Determines how the time interval (WeeWX archive table field <code>interval</code>) between successive observations is derived. The interval can be derived by one of three methods:</p> <ul> <li> <p>The interval can be calculated as the time, rounded to the nearest minute, between the date-time of successive records. This method is suitable when the data was recorded at fixed intervals and there are NO missing records in the source data. Use of this method when there are missing records in the source data can compromise the integrity of the WeeWX statistical data. Select this method by setting <code>interval = derive</code>.</p> </li> <li> <p>The interval can be set to the same value as the <code>archive_interval</code> setting under <code>[StdArchive]</code> in <code>weewx.conf</code>. This setting is useful if the data was recorded at fixed intervals but there are some missing records and the fixed interval is the same as the <code>archive_interval</code> setting under <code>[StdArchive]</code> in <code>weewx.conf</code>. Select this method by setting <code>interval = conf</code>.</p> </li> <li> <p>The interval can be set to a fixed number of minutes. This setting is useful if the source data was recorded at fixed intervals but there are some missing records and the fixed interval is different to the <code>archive_interval</code> setting under <code>[StdArchive]</code> in <code>weewx.conf</code>. Select this method by setting <code>interval = x</code> where <code>x</code> is an integer number of minutes.</p> </li> </ul> <p>If the CSV source data records are equally spaced in time, but some records are missing, then a better result may be achieved using <code>conf</code> or a fixed interval setting.</p> <p>The default is <code>derive</code>. </p>"},{"location":"utilities/wee_import-config_opt/#qc","title":"<code>qc</code>","text":"<p>Determines whether simple quality control checks are applied to imported data. Setting <code>qc = True</code> will result in <code>wee_import</code> applying the WeeWX <code>StdQC</code> minimum and maximum checks to any imported observations. <code>wee_import</code> quality control checks use the same configuration settings, and operate in the same manner, as the StdQC service. For example, for minimum/maximum quality checks, if an observation falls outside of the quality control range for that observation, the observation will be set to <code>None</code>. In such cases you will be alerted through a short message similar to:</p> <pre><code>2016-01-12 10:00:00 AEST (1452556800) record value 'outTemp' 194.34 outside limits (0.0, 120.0)\n</code></pre> <p>As derived observations are calculated after the quality control check is applied, derived observations are not subject to quality control checks. Setting <code>qc = False</code> will result in <code>wee_import</code> not applying quality control checks to imported data.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#calc_missing","title":"<code>calc_missing</code>","text":"<p>Determines whether any missing derived observations will be calculated from the imported data. Setting <code>calc_missing = True</code> will result in <code>wee_import</code> using the WeeWX <code>StdWXCalculate</code> service to calculate any missing derived observations from the imported data. Setting <code>calc_missing = False</code> will result in WeeWX leaving any missing derived observations as <code>None</code>. See [StdWXCalculate] for details of the observations the <code>StdWXCalculate</code> service can calculate.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#ignore_invalid_data","title":"<code>ignore_invalid_data</code>","text":"<p>Determines whether invalid data in a source field is ignored or the import aborted. If invalid data is found in a source field and <code>ignore_invalid_data</code> is <code>True</code> the corresponding WeeWX destination field is set to <code>None</code> and the import continues. If invalid data is found in a source field and <code>ignore_invalid_data</code> is <code>False</code> the import is aborted.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#tranche","title":"<code>tranche</code>","text":"<p>To speed up database operations imported records are committed to database in groups of records rather than individually. The size of the group is set by the <code>tranche</code> parameter. Increasing the <code>tranche</code> parameter may result in a slight speed increase but at the expense of increased memory usage. Decreasing the <code>tranche</code> parameter will result in less memory usage but at the expense of more frequent database access and likely increased time to import.</p> <p>The default is <code>250</code> which should suit most users.</p>"},{"location":"utilities/wee_import-config_opt/#uv_sensor","title":"<code>UV_sensor</code>","text":"<p>WeeWX records a <code>None/null</code> for UV when no UV sensor is installed, whereas some weather station software records a value of 0 for UV index when there is no UV sensor installed. The <code>UV_sensor</code> parameter enables <code>wee_import</code> to distinguish between the case where a UV sensor is present and the UV index is 0 and the case where no UV sensor is present and UV index is 0. <code>UV_sensor = False</code> should be used when no UV sensor was used in producing the source data. <code>UV_sensor = False</code> will result in <code>None/null</code> being recorded in the WeeWX archive field <code>UV</code> irrespective of any UV observations in the source data. <code>UV_sensor = True</code> should be used when a UV sensor was used in producing the source data. <code>UV_sensor = True</code> will result in UV observations in the source data being stored in the WeeWX archive field <code>UV</code>.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#solar_sensor","title":"<code>solar_sensor</code>","text":"<p>WeeWX records a <code>None/null</code> when no solar radiation sensor is installed, whereas some weather station software records a value of 0 for solar radiation when there is no solar radiation sensor installed. The <code>solar_sensor</code> parameter enables <code>wee_import</code> to distinguish between the case where a solar radiation sensor is present and solar radiation is 0 and the case where no solar radiation sensor is present and solar radiation is 0. <code>solar_sensor = False</code> should be used when no solar radiation sensor was used in producing the source data. <code>solar_sensor = False</code> will result in <code>None/null</code> being recorded in the WeeWX archive field <code>radiation</code> irrespective of any solar radiation observations in the source data. <code>solar_sensor = True</code> should be used when a solar radiation sensor was used in producing the source data. <code>solar_sensor = True</code> will result in solar radiation observations in the source data being stored in the WeeWX archive field <code>radiation</code>.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#raw_datetime_format","title":"<code>raw_datetime_format</code>","text":"<p>WeeWX records each record with a unique unix epoch timestamp, whereas many weather station applications or web sources export observational data with a human-readable date-time. This human-readable date-time is interpreted according to the format set by the <code>raw_datetime_format</code> option. This option consists of Python strptime() format codes and literal characters to represent the date-time data being imported.</p> <p>For example, if the source data uses the format 23 January 2015 15:34 the appropriate setting for <code>raw_datetime_format</code> would be <code>%d %B %Y %H:%M</code>, 9:25:00 12/28/16 would use <code>%H:%M:%S %m/%d/%y</code>. If the source data provides a unix epoch timestamp as the date-time field the unix epoch timestamp is used directly and the <code>raw_datetime_format</code> option is ignored.</p> <p>The default is <code>%Y-%m-%d %H:%M:%S</code>.</p> <p>Note</p> <p><code>wee_import</code> does not support the construction of the unique record date time stamp from separate date and time fields, rather the date-time information for each imported record must be contained in a single field. CSV data containing separate date and time fields may require further manual processing before they can be imported.</p>"},{"location":"utilities/wee_import-config_opt/#rain","title":"<code>rain</code>","text":"<p>The WeeWX <code>rain</code> field records rainfall that was recorded in the preceding archive period, so for a five-minute archive period the <code>rain</code> field in each archive record would contain the total rainfall that fell in the previous five minutes. Many weather station applications provide a daily or yearly total. <code>wee_import</code> can derive the WeeWX <code>rain</code> field in one of two ways:</p> <ul> <li> <p>If the imported rainfall data is a running total then <code>wee_import</code> can derive the WeeWX <code>rain</code> field from successive totals. For this method use <code>rain = cumulative</code>.</p> </li> <li> <p>If the imported rainfall data is a discrete value per date-time period then <code>rain = discrete</code> should be used.</p> </li> </ul> <p>Note</p> <p><code>wee_import</code> only supports cumulative rainfall data that resets on a midnight boundary, cumulative rainfall data that resets at some other time; e.g., 9am, is not supported. In such cases the rainfall data will need to be converted to either reset on a midnight boundary or a discrete value per date-time period and <code>rain = discrete</code> used. The former may be possible by selecting another rainfall field (if available) in the source data, otherwise it will require manual manipulation of the source data.</p>"},{"location":"utilities/wee_import-config_opt/#wind_direction","title":"<code>wind_direction</code>","text":"<p>WeeWX records wind direction in degrees as a number from 0 to 360 inclusive (no wind direction is recorded as <code>None/null</code>), whereas some data sources may provide wind direction as number over a different range (e.g., -180 to +180) or may use a particular value when there is no wind direction (e.g., 0 may represent no wind direction and 360 may represent a northerly wind, or -9999 (or some similar clearly invalid number) to represent there being no wind direction). <code>wee_import</code> handles such variations in data by defining a range over which imported wind direction values are accepted. Any value outside of this range is treated as there being no wind direction and is recorded as <code>None/null</code>. Any value inside the range is normalised to the range 0 to 360 inclusive (e.g., -180 would be normalised to 180). The <code>wind_direction</code> option consists of two comma separated numbers of the format lower, upper where lower and upper are inclusive. The operation of the <code>wind_direction</code> option is best illustrated through the following table:</p> Option wind_direction wind_direction option setting Source data wind direction value Imported wind direction value 0, 360 0 0 160 160 360 360 500 None/null -45 None/null -9999 None/null No data None/null -360, 360 0 0 160 160 360 360 500 None/null -45 315 -9999 None/null No data None/null -180, 180 0 0 160 160 360 None/null 500 None/null -45 315 -9999 None/null No data None/null <p>The default is <code>0, 360</code>.</p>"},{"location":"utilities/wee_import-config_opt/#fieldmap","title":"<code>[[FieldMap]]</code>","text":"<p>The <code>[[FieldMap]]</code> stanza defines the mapping from the source data fields to WeeWX archive fields. The map consists of one row per field being imported using either of the following formats:</p> <pre><code>weewx_archive_field_name = csv_field_name, weewx_unit_name\n</code></pre> <p>or</p> <pre><code>weewx_archive_field_name = csv_field_name, text\n</code></pre> <p>Where:</p> <ul> <li><code>weewx_archive_field_name</code> is a field name in the in-use WeeWX archive table schema</li> <li><code>csv_field_name</code> is the name of a field from the CSV file</li> <li><code>weewx_unit_name</code> is the WeeWX unit name of the units used by <code>csv_field_name</code></li> <li><code>text</code> is the literal word text</li> </ul> <p>This mapping allows <code>wee_import</code> to take a source data field, do the appropriate unit conversion and store the resulting value in the appropriate WeeWX archive field. Source data text fields may be mapped to a WeeWX text archive field by using the second form of the field map entry where the literal <code>text</code> is used in place of a WeeWX unit name. A mapping is not required for every WeeWX archive field (e.g., the source may not provide inside temperature so no <code>inTemp</code> field mapping is required) and neither does every CSV field need to be included in a mapping (e.g., the source data field <code>monthrain</code> may have no use if the source data field <code>rain</code> provides the data for the WeeWX archive `rain field). Unused field mapping lines will not be used and may be omitted.</p> <p>Note</p> <p>Importing of text data into text fields in the WeeWX archive is only supported for WeeWX archive fields that have been configured as text fields. Refer to the Wiki page Storing text in the database for details.</p> <p>If the source data includes a field that contains a WeeWX unit system code (i.e. the equivalent of the WeeWX <code>usUnits</code> field such as may be obtained from WeeWX or wview data) then this field can be mapped to the WeeWX <code>usUnits</code> field and used to set the units used for all fields being imported. In such cases the <code>weewx_unit_name</code> portion of the imported fields in the field map is not used and can be omitted.</p> <p>For example, source CSV data with the following structure:</p> <pre><code>date_and_time,temp,humid,wind,dir,rainfall,rad,river\n23 May 2018 13:00,17.4,56,3.0,45,0.0,956,340\n23 May 2018 13:05,17.6,56,1.0,22.5,0.4,746,341\n</code></pre> <p>where <code>temp</code> is temperature in Celsius, <code>humid</code> is humidity in percent, <code>wind</code> is wind speed in km/h, <code>dir</code> is wind direction in degrees, <code>rainfall</code> is rain in mm, <code>rad</code> is radiation in watts per square meter and <code>river</code> is river height in mm might use a field map as follows:</p> <pre><code>[[FieldMap]]\n    dateTime    = date_and_time, unix_epoch\n    outTemp     = temp, degree_C\n    outHumidity = humid, percent\n    windSpeed   = wind, km_per_hour\n    windDir     = dir, degree_compass\n    rain        = rainfall, mm\n    radiation   = rad, watt_per_meter_squared\n</code></pre> <p>If the same source CSV data included a field <code>unit_info</code> that contains WeeWX unit system data as follows:</p> <pre><code>date_and_time,temp,humid,wind,dir,rainfall,rad,river,unit_info\n23 May 2018 13:00,17.4,56,3.0,45,0.0,956,340,1\n23 May 2018 13:05,17.6,56,1.0,22.5,0.4,746,341,16\n</code></pre> <p>then a field map such as the following might be used:</p> <pre><code>[[FieldMap]]\n    dateTime    = date_and_time, unix_epoch\n    usUnits     = unit_info\n    outTemp     = temp\n    outHumidity = humid\n    windSpeed   = wind\n    windDir     = dir\n    rain        = rainfall\n    radiation   = rad\n</code></pre> <p>Note</p> <p>Any WeeWX archive fields that are derived (e.g., <code>dewpoint</code>) and for which there is no field mapping may be calculated during import by use of the <code>calc_missing</code> option in the <code>[CSV]</code> section of the import configuration file.</p> <p>Note</p> <p>The <code>dateTime</code> field map entry is a special case. Whereas other field map entries may use any supported WeeWX unit name, or no unit name if the <code>usUnits</code> field is populated, the <code>dateTime</code> field map entry must include the WeeWX unit name <code>unix_epoch</code>. This is because <code>wee_import</code> uses the raw_datetime_format config option to convert the supplied date-time field data to a Unix epoch timestamp before the field map is applied.</p>"},{"location":"utilities/wee_import-config_opt/#wu","title":"[WU]","text":"<p>The <code>[WU]</code> section contains the options relating to the import of observational data from a Weather Underground PWS history.</p>"},{"location":"utilities/wee_import-config_opt/#station_id","title":"<code>station_id</code>","text":"<p>The Weather Underground weather station ID of the PWS from which the historical data will be imported. </p> <p>There is no default.</p>"},{"location":"utilities/wee_import-config_opt/#api_key","title":"<code>api_key</code>","text":"<p>The Weather Underground API key to be used to obtain the PWS history data.</p> <p>There is no default.</p> <p>Note</p> <p>The API key is a seemingly random string of 32 characters used to access the new (2019) Weather Underground API. PWS contributors can obtain an API key by logging onto the Weather Underground internet site and accessing Member Settings. 16 character API keys used with the previous Weather Underground API are not supported.</p>"},{"location":"utilities/wee_import-config_opt/#interval_1","title":"<code>interval</code>","text":"<p>Determines how the time interval (WeeWX database field <code>interval</code>) between successive observations is determined. This option is identical in operation to the CSV interval option but applies to Weather Underground imports only. As a Weather Underground PWS history sometimes has missing records, the use of <code>interval = derive</code> may give incorrect or inconsistent interval values. Better results may be obtained by using <code>interval = conf</code> if the current WeeWX installation has the same <code>archive_interval</code> as the Weather Underground data, or by using <code>interval = x</code> where <code>x</code> is the time interval in minutes used to upload the Weather Underground data. The most appropriate setting will depend on the completeness and (time) accuracy of the Weather Underground data being imported.</p> <p>The default is <code>derive</code>.</p>"},{"location":"utilities/wee_import-config_opt/#qc_1","title":"<code>qc</code>","text":"<p>Determines whether simple quality control checks are applied to imported data. This option is identical in operation to the CSV qc option but applies to Weather Underground imports only. As Weather Underground imports at times contain nonsense values, particularly for fields for which no data was uploaded to Weather Underground by the PWS, the use of quality control checks on imported data can prevent these nonsense values from being imported and contaminating the WeeWX database.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#calc_missing_1","title":"<code>calc_missing</code>","text":"<p>Determines whether any missing derived observations will be calculated from the imported data. This option is identical in operation to the CSV calc_missing\" option but applies to Weather Underground imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#ignore_invalid_data_1","title":"<code>ignore_invalid_data</code>","text":"<p>Determines whether invalid data in a source field is ignored or the import aborted. This option is identical in operation to the CSV ignore_invalid_data option but applies to Weather Underground imports only. The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#tranche_1","title":"<code>tranche</code>","text":"<p>The number of records written to the WeeWX database in each transaction. This option is identical in operation to the CSV tranche option but applies to Weather Underground imports only.</p> <p>The default is <code>250</code> which should suit most users.</p>"},{"location":"utilities/wee_import-config_opt/#wind_direction_1","title":"<code>wind_direction</code>","text":"<p>Determines the range of acceptable wind direction values in degrees. This option is identical in operation to the CSV wind_direction option but applies to Weather Underground imports only.</p> <p>The default is <code>0, 360</code>.</p>"},{"location":"utilities/wee_import-config_opt/#cumulus","title":"[Cumulus]","text":"<p>The <code>[Cumulus]</code> section contains the options relating to the import of observational data from Cumulus monthly log files.</p>"},{"location":"utilities/wee_import-config_opt/#directory","title":"<code>directory</code>","text":"<p>The full path to the directory containing the Cumulus monthly log files to be imported. Do not include a trailing <code>/</code>. </p> <p>There is no default.</p>"},{"location":"utilities/wee_import-config_opt/#source_encoding_1","title":"<code>source_encoding</code>","text":"<p>The Cumulus monthly log file encoding. This option is identical in operation to the CSV source_encoding option but applies to Cumulus imports only.</p> <p>The default is <code>utf-8-sig</code>.</p>"},{"location":"utilities/wee_import-config_opt/#interval_2","title":"<code>interval</code>","text":"<p>Determines how the time interval (WeeWX database field <code>interval</code>) between successive observations is determined. This option is identical in operation to the CSV interval option but applies to Cumulus monthly log file imports only. As Cumulus monthly log files can, at times, have missing entries, the use of <code>interval = derive</code> may give incorrect or inconsistent interval values. Better results may be obtained by using <code>interval = conf</code> if the <code>archive_interval</code> for the current WeeWX installation is the same as the Cumulus 'data log interval' setting used to generate the Cumulus monthly log files, or by using <code>interval = x</code> where <code>x</code> is the time interval in minutes used as the Cumulus 'data log interval' setting. The most appropriate setting will depend on the completeness and (time) accuracy of the Cumulus data being imported.</p> <p>The default is <code>derive</code>.</p>"},{"location":"utilities/wee_import-config_opt/#qc_2","title":"<code>qc</code>","text":"<p>Determines whether simple quality control checks are applied to imported data. This option is identical in operation to the CSV qc option but applies to Cumulus imports only.</p> <p>The default is <code>&gt;True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#calc_missing_2","title":"<code>calc_missing</code>","text":"<p>Determines whether any missing derived observations will be calculated from the imported data. This option is identical in operation to the CSV calc_missing option but applies to Cumulus imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#separator","title":"<code>separator</code>","text":"<p>The character used as the date field separator in the Cumulus monthly log file. A solidus (/) is frequently used, but it may be another character depending on the settings on the machine that produced the Cumulus monthly log files. This parameter must be included in quotation marks.</p> <p>The default is <code>/</code>.</p>"},{"location":"utilities/wee_import-config_opt/#delimiter_1","title":"<code>delimiter</code>","text":"<p>The character used as the field delimiter in the Cumulus monthly log file. A comma is frequently used, but it may be another character depending on the settings on the machine that produced the Cumulus monthly log files. This parameter must be included in quotation marks.</p> <p>The default is <code>,</code>.</p>"},{"location":"utilities/wee_import-config_opt/#decimal_1","title":"<code>decimal</code>","text":"<p>The character used as the decimal point in the Cumulus monthly log files. A full stop is frequently used, but it may be another character depending on the settings on the machine that produced the Cumulus monthly log files. This parameter must be included in quotation marks.</p> <p>The default is <code>.</code>.</p>"},{"location":"utilities/wee_import-config_opt/#ignore_invalid_data_2","title":"<code>ignore_invalid_data</code>","text":"<p>Determines whether invalid data in a source field is ignored or the import aborted. This option is identical in operation to the CSV ignore_invalid_data option but applies to Cumulus monthly log file imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#tranche_2","title":"<code>tranche</code>","text":"<p>The number of records written to the WeeWX database in each transaction. This option is identical in operation to the CSV tranche option but applies to Cumulus monthly log file imports only.</p> <p>The default is <code>250</code> which should suit most users.</p>"},{"location":"utilities/wee_import-config_opt/#uv_sensor_1","title":"<code>UV_sensor</code>","text":"<p>Enables <code>wee_import</code> to distinguish between the case where a UV sensor is present and the UV index is 0 and the case where no UV sensor is present and UV index is 0. This option is identical in operation to the CSV UV_sensor option but applies to Cumulus monthly log file imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#solar_sensor_1","title":"<code>solar_sensor</code>","text":"<p>Enables <code>wee_import</code> to distinguish between the case where a solar radiation sensor is present and the solar radiation is 0 and the case where no solar radiation sensor is present and solar radiation is 0. This option is identical in operation to the CSV solar_sensor option but applies to Cumulus monthly log file imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#units","title":"<code>[[Units]]</code>","text":"<p>The <code>[[Units]]</code> stanza defines the units used in the Cumulus monthly log files. Units settings are required for <code>temperature</code>, <code>pressure</code>, <code>rain</code> and <code>speed</code>. The format for each setting is:</p> <pre><code>obs_type = weewx_unit_name\n</code></pre> <p>Where <code>obs_type</code> is one of <code>temperature</code>, <code>pressure</code>, <code>rain</code> or <code>speed</code> and <code>weewx_unit_name</code> is the WeeWX unit name of the units used by that particular <code>obs_type</code>. As Cumulus supports a different suite of possible units only a subset of the available WeeWX unit names can be used for some settings.</p>"},{"location":"utilities/wee_import-config_opt/#wd","title":"[WD]","text":"<p>The <code>[WD]</code> section contains the options relating to the import of observational data from Weather Display monthly log files.</p>"},{"location":"utilities/wee_import-config_opt/#directory_1","title":"<code>directory</code>","text":"<p>The full path to the directory containing the Weather Display monthly log files to be imported. Do not include a trailing <code>/</code>.</p> <p>There is no default.</p>"},{"location":"utilities/wee_import-config_opt/#logs_to_process","title":"<code>logs_to_process</code>","text":"<p>The Weather Display monthly log files to be processed. Weather Display uses multiple files to record each month of data. Which monthly log files are produced depends on the Weather Display configuration and the capabilities of the weather station. <code>wee_import</code> supports the following Weather Display monthly log files:</p> <ul> <li>MMYYYYlg.txt</li> <li>MMYYYYlgcsv.csv (csv format version of MMYYYYlg.txt)</li> <li>MMYYYYvantagelog.txt</li> <li>MMYYYYvantagelogcsv.csv (csv format version of MMYYYYvantagelog.txt)</li> <li>MMYYYYvantageextrasensorslog.csv</li> </ul> <p>where MM is a one or two-digit month and YYYY is a four digit year</p> <p>The format for the <code>logs_to_process</code> setting is:</p> <pre><code>logs_to_process = [lg.txt, | logcsv.csv, | vantagelog.txt, | vantagelogcsv.csv, | vantageextrasensorslog.csv]\n</code></pre> <p>Note</p> <p>The leading MMYYYY is omitted when listing the monthly log files to be processed using the <code>logs_to_process</code> setting. Inclusion of the leading MMYYYY will cause the import to fail.</p> <p>Note</p> <p>The MMYYYYlgcsv.csv and MMYYYYvantagelogcsv.csv log files are CSV versions of MMYYYYlg.txt and MMYYYYvantagelog.txt respectively. Either the .txt or .csv version of these files should be used but not both.</p> <p>The monthly log files selected for processing should be chosen carefully as the selected log files will determine the Weather Display data fields available for import. <code>wee_import</code> is able to import the following data from the indicated monthly log files:</p> <ul> <li> <p>MMYYYYlg.txt/MMYYlgcsv.csv:</p> <ul> <li><code>average wind speed</code></li> <li><code>barometer</code></li> <li><code>date and time</code></li> <li><code>dew point</code></li> <li><code>heat index</code></li> <li><code>outside humidity</code></li> <li><code>outside temperature</code></li> <li><code>rain fall</code></li> <li><code>wind direction</code></li> <li><code>wind gust speed</code></li> </ul> </li> <li> <p>MMYYYYvantagelog.txt/MMYYYYvantagelogcsv.csv:</p> <ul> <li><code>date and time</code></li> <li><code>soil moisture</code></li> <li><code>soil temperature</code></li> <li><code>solar radiation</code></li> <li><code>UV index</code></li> </ul> </li> <li> <p>MMYYYYvantageextrasensorslog.csv:</p> <ul> <li><code>date and time</code></li> <li><code>extra humidity 1</code></li> <li><code>extra humidity 2</code></li> <li><code>extra humidity 3</code></li> <li><code>extra humidity 4</code></li> <li><code>extra humidity 5</code></li> <li><code>extra humidity 6</code></li> <li><code>extra temperature 1</code></li> <li><code>extra temperature 2</code></li> <li><code>extra temperature 3</code></li> <li><code>extra temperature 4</code></li> <li><code>extra temperature 5</code></li> <li><code>extra temperature 6</code></li> </ul> </li> </ul> <p>Note</p> <p>Whilst the above log files may contain the indicated data the data may only be imported subject to a suitable field map and in-use WeeWX archive table schema (refer to the [[FieldMap]] option).</p> <p>The default is <code>lg.txt, vantagelog.txt, vantageextrasensorslog.csv</code>.</p>"},{"location":"utilities/wee_import-config_opt/#source_encoding_2","title":"<code>source_encoding</code>","text":"<p>The Weather Display monthly log file encoding. This option is identical in operation to the CSV source_encoding option but applies to Weather Display imports only.</p> <p>The default is <code>utf-8-sig</code>.</p>"},{"location":"utilities/wee_import-config_opt/#interval_3","title":"<code>interval</code>","text":"<p>Determines how the time interval (WeeWX database field <code>interval</code>) between successive observations is determined. This option is identical in operation to the CSV interval option but applies to Weather Display monthly log file imports only. As Weather Display log files nominally have entries at one minute intervals the recommended approach is to set <code>interval = 1</code>. As Weather Display monthly log files can, at times, have missing entries, the use of <code>interval = derive</code> may give incorrect or inconsistent interval values. If then <code>archive_interval</code> for the current WeeWX installation is 1 minute <code>interval = conf</code> may be used. In most cases the most appropriate setting will be <code>interval = 1</code>.</p> <p>The default is <code>1</code>.</p>"},{"location":"utilities/wee_import-config_opt/#qc_3","title":"<code>qc</code>","text":"<p>Determines whether simple quality control checks are applied to imported data. This option is identical in operation to the CSV qc option but applies to Weather Display imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#calc_missing_3","title":"<code>calc_missing</code>","text":"<p>Determines whether any missing derived observations will be calculated from the imported data. This option is identical in operation to the CSV calc_missing option but applies to Weather Display imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#txt_delimiter","title":"<code>txt_delimiter</code>","text":"<p>The character used as the field delimiter in Weather Display text format monthly log files (.txt files). A space is normally used but another character may be used if necessary. This parameter must be included in quotation marks.</p> <p>The default is <code>' '</code>.</p>"},{"location":"utilities/wee_import-config_opt/#csv_delimiter_1","title":"<code>csv_delimiter</code>","text":"<p>The character used as the field delimiter in Weather Display csv format monthly log files (.csv files). A comma is normally used but another character may be used if necessary. This parameter must be included in quotation marks.</p> <p>The default is <code>,</code>.</p>"},{"location":"utilities/wee_import-config_opt/#decimal_2","title":"<code>decimal</code>","text":"<p>The character used as the decimal point in the Weather Display monthly log files. A full stop is frequently used but another character may be used if necessary. This parameter must be included in quotation marks.</p> <p>The default is <code>.</code>.</p>"},{"location":"utilities/wee_import-config_opt/#ignore_missing_log","title":"<code>ignore_missing_log</code>","text":"<p>Determines whether missing log files are to be ignored or the import aborted. Weather Display log files are complete in themselves and a missing log file will have no effect other than there will be no imported data for the period covered by the missing log file.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#ignore_invalid_data_3","title":"<code>ignore_invalid_data</code>","text":"<p>Determines whether invalid data in a source field is ignored or the import aborted. This option is identical in operation to the CSV ignore_invalid_data option but applies to Weather Display monthly log file imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#tranche_3","title":"<code>tranche</code>","text":"<p>The number of records written to the WeeWX database in each transaction. This option is identical in operation to the CSV tranche option but applies to Weather Display monthly log file imports only.</p> <p>The default is <code>250</code> which should suit most users.</p>"},{"location":"utilities/wee_import-config_opt/#uv_sensor_2","title":"<code>UV_sensor</code>","text":"<p>Enables <code>wee_import</code> to distinguish between the case where a UV sensor is present and the UV index is 0 and the case where no UV sensor is present and UV index is 0. This option is identical in operation to the CSV UV_sensor option but applies to Weather Display monthly log file imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#solar_sensor_2","title":"<code>solar_sensor</code>","text":"<p>Enables <code>wee_import</code> to distinguish between the case where a solar radiation sensor is present and the solar radiation is 0 and the case where no solar radiation sensor is present and solar radiation is 0. This option is identical in operation to the CSV solar_sensor option but applies to Weather Display monthly log file imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#ignore_extreme_temp_hum","title":"<code>ignore_extreme_temp_hum</code>","text":"<p>Determines whether extreme temperature and humidity values are ignored. Weather Display log files record the value 255 for temperature and humidity fields if no corresponding sensor is present. Setting <code>ignore_extreme_temp_hum = True</code> will cause temperature and humidity values of 255 to be ignored. Setting <code>ignore_extreme_temp_hum = False</code> will cause temperature and humidity values of 255 to be treated as valid data to be imported.</p> <p>The default is <code>True</code>.</p> <p>Note</p> <p>Setting <code>ignore_extreme_temp_hum = False</code> will cause temperature and humidity values of 255 to be imported; however, these values may be rejected by the simple quality control checks implemented if <code>qc = True</code> is used.</p>"},{"location":"utilities/wee_import-config_opt/#units_1","title":"<code>[[Units]]</code>","text":"<p>The <code>[[Units]]</code> stanza defines the units used in the Weather Display monthly log files. Weather Display monthly log files normally use Metric or US customary units depending on the Log File setting under Units on the Units/Wind Chill tab of the Weather Display Universal Setup. In such cases the <code>units</code> configuration option may be set to <code>Metric</code> or <code>US</code> to select either Metric or US customary units.</p> <p>There is no default.</p> <p>It is also possible to individually specify the log file units used for <code>temperature</code>, <code>pressure</code>, <code>rain</code> and <code>speed</code>. The format for each setting is:</p> <pre><code>obs_type = weewx_unit_name\n</code></pre> <p>Where <code>obs_type</code> is one of <code>temperature</code>, <code>pressure</code>, <code>rain</code> or <code>speed</code> and <code>weewx_unit_name is the WeeWX unit name of the units used by that particular</code>obs_type. As Weather Display supports a different suite of possible units only a subset of the available WeeWX unit names can be used for some settings.</p> <p>The preferred method for defining the Weather Display log file units is through the use of the <code>units</code> configuration option. When defining the import log file units either the <code>units</code> configuration option should be used or the individual <code>temperature</code>, <code>pressure</code>, <code>rain</code> and <code>&gt;speed</code> units defined but not both. If both the <code>units</code> configuration option is defined as well as the individual <code>temperature</code>, <code>pressure</code>, <code>rain</code> and <code>speed</code> units defined the <code>units</code> configuration option takes precedence and all other units settings are ignored.</p>"},{"location":"utilities/wee_import-config_opt/#fieldmap_1","title":"<code>[[FieldMap]]</code>","text":"<p>The <code>[[FieldMap]]</code> stanza defines the mapping from the Weather Display monthly log data fields to WeeWX archive fields. By default, imported Weather Display data is mapped to the corresponding WeeWX archive fields using a default field map. The default field map will likely suit most users; however, depending on the station capabilities and the in-use WeeWX database schema, a custom field map may be required if Weather Display monthly logs contain data from additional sensors that cannot be stored in the WeeWX archive using the default field map. A custom field map also makes it possible to limit the Weather Display monthly log data fields that are imported into WeeWX.</p> <p>The field map consists of one row per field using the format:</p> <pre><code>weewx_archive_field_name = weather_display_field_name\n</code></pre> <p>Where <code>weewx_archive_field_name</code> is a field name in the in-use WeeWX archive table schema and <code>weather_display_field_name</code> is a Weather Display import field name. The available Weather Display import field names are listed in the table below.</p> Available import field names Field name Description barometer barometric pressure dewpoint dew point direction wind direction gustspeed wind gust speed heatindex heat index humidity outside humidity hum1 extra humidity 1 hum2 extra humidity 2 hum3 extra humidity 3 hum4 extra humidity 4 hum5 extra humidity 5 hum6 extra humidity 6 radiation solar radiation rainlastmin rainfall in the last 1 minute soilmoist soil moisture soiltemp soil temperature temperature outside temperature temp1 extra temperature 1 temp2 extra temperature 2 temp3 extra temperature 3 temp4 extra temperature 4 temp5 extra temperature 5 temp6 extra temperature 6 uv UV index windspeed average wind speed <p>A mapping is not required for every WeeWX archive field (e.g., the Weather Display monthly logs may not provide inside temperature so no <code>inTemp</code> field mapping is required) and neither does every Weather Display monthly log field need to be included in a mapping (e.g., the Weather Display monthly log field <code>soiltemp</code> may have no data as the station has no soil temperature probe).</p> <p>Note</p> <p>Any WeeWX archive fields that are derived (e.g., <code>dewpoint</code>) and for which there is no field mapping may be calculated during import by use of the <code>calc_missing</code> option in the <code>[WD]</code> section of the import configuration file.</p> <p>The example Weather Display import configuration file located in the <code>/home/weewx/util/import]</code> or the `/etc/weewx/import directory contains an example field map in the import configuration file comments.</p> <p>There is no default.</p>"},{"location":"utilities/wee_import-config_opt/#weathercat","title":"[WeatherCat]","text":"<p>The <code>[WeatherCat]</code> section contains the options relating to the import of observational data from WeatherCat monthly .cat files.</p>"},{"location":"utilities/wee_import-config_opt/#directory_2","title":"<code>directory</code>","text":"<p>The full path to the directory containing the year directories that contain the WeatherCat monthly .cat files to be imported. Do not include a trailing <code>/</code>.</p> <p>There is no default.</p>"},{"location":"utilities/wee_import-config_opt/#source_encoding_3","title":"<code>source_encoding</code>","text":"<p>The WeatherCat monthly .cat file encoding. This option is identical in operation to the CSV source_encoding option but applies to WeatherCat imports only.</p> <p>The default is <code>utf-8-sig</code>.</p>"},{"location":"utilities/wee_import-config_opt/#interval_4","title":"<code>interval</code>","text":"<p>Determines how the time interval (WeeWX database field <code>interval</code>) between successive observations is determined. This option is identical in operation to the CSV interval option but applies to WeatherCat imports only. As WeatherCat monthly .cat files can, at times, have missing entries, the use of <code>interval = derive</code> may give incorrect or inconsistent interval values. Better results may be obtained by using <code>interval = conf</code> if the <code>archive_interval</code> for the current WeeWX installation is the same as the WeatherCat .cat file log interval, or by using <code>interval = x</code> where <code>x</code> is the time interval in minutes used in the WeatherCat monthly .cat file(s). The most appropriate setting will depend on the completeness and (time) accuracy of the WeatherCat data being imported.</p> <p>The default is <code>derive</code>.</p>"},{"location":"utilities/wee_import-config_opt/#qc_4","title":"<code>qc</code>","text":"<p>Determines whether simple quality control checks are applied to imported data. This option is identical in operation to the CSV qc option but applies to WeatherCat imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#calc_missing_4","title":"<code>calc_missing</code>","text":"<p>Determines whether any missing derived observations will be calculated from the imported data. This option is identical in operation to the CSV calc_missing option but applies to WeatherCat imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#decimal_3","title":"<code>decimal</code>","text":"<p>The character used as the decimal point in the WeatherCat monthly .cat files. This parameter must be included in quotation marks.</p> <p>The default is <code>.</code>.</p>"},{"location":"utilities/wee_import-config_opt/#tranche_4","title":"<code>tranche</code>","text":"<p>The number of records written to the WeeWX database in each transaction. This option is identical in operation to the CSV tranche option but applies to WeatherCat imports only.</p> <p>The default is <code>250</code> which should suit most users.</p>"},{"location":"utilities/wee_import-config_opt/#uv_sensor_3","title":"<code>UV_sensor</code>","text":"<p>Enables <code>wee_import</code> to distinguish between the case where a UV sensor is present and the UV index is 0 and the case where no UV sensor is present and UV index is 0. This option is identical in operation to the CSV UV_sensor option but applies to WeatherCat imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#solar_sensor_3","title":"<code>solar_sensor</code>","text":"<p>Enables <code>wee_import</code> to distinguish between the case where a solar radiation sensor is present and the solar radiation is 0 and the case where no solar radiation sensor is present and solar radiation is 0. This option is identical in operation to the CSV solar_sensor option but applies to WeatherCat imports only.</p> <p>The default is <code>True</code>.</p>"},{"location":"utilities/wee_import-config_opt/#units_2","title":"<code>[[Units]]</code>","text":"<p>The <code>[[Units]]</code> stanza defines the units used in the WeatherCat monthly .cat files. Unit settings are required for <code>temperature</code>, <code>pressure</code>, <code>rain</code> and <code>speed</code>. The format for each setting is:</p> <pre><code>obs_type = weewx_unit_name\n</code></pre> <p>Where <code>obs_type</code> is one of <code>temperature</code>, <code>pressure</code>, <code>rain</code> or <code>speed</code> and <code>weewx_unit_name</code> is the WeeWX unit name of the units used by that particular <code>obs_type</code> (refer to the Units for details of available WeeWX unit names). As WeatherCat supports a different suite of possible units only a subset of the available WeeWX unit names can be used for some settings.</p> <p>There is no default.</p>"},{"location":"utilities/wee_import-csv/","title":"CSV","text":"<p>Warning</p> <p>Running WeeWX during a <code>wee_import</code> session can lead to abnormal termination of the import. If WeeWX must remain running (e.g., so that live data is not lost) run the <code>wee_import</code> session on another machine or to a second database and merge the in-use and second database once the import is complete.</p> <p><code>wee_import</code> can import data from a single CSV file. The CSV source file must be structured as follows:</p> <ul> <li> <p>The file must have a header row consisting of a comma separated list of field names. The field names can be any valid string as long as each field name is unique within the list. There is no requirement for the field names to be in any particular order as long as the same order is used for the observations on each row in the file. These field names will be mapped to WeeWX field names in the <code>[CSV]</code> section of the import configuration file.</p> </li> <li> <p>Observation data for a given date-time must be listed on a single line with individual fields separated by a comma. The fields must be in the same order as the field names in the header row.</p> </li> <li> <p>Blank fields are represented by the use of white space or no space only between commas.</p> </li> <li> <p>Direction data being imported may be represented as numeric degrees or as a string representing the cardinal, intercardinal and/or secondary intercardinal directions.</p> </li> <li> <p>There must a field that represents the date-time of the observations on each line. This date-time field must be either a Unix epoch timestamp or any date-time format that can be represented using Python strptime() format codes.</p> </li> </ul> <p>A CSV file suitable for import by <code>wee_import</code> may look like this:</p> <pre><code>Time,Barometer,Temp,Humidity,Windspeed,Dir,Gust,Dayrain,Radiation,Uv,Comment\n28/11/2017 08:00:00,1016.9,24.6,84,1.8,113,8,0,359,3.8,\"start of observations\"\n28/11/2017 08:05:00,1016.9,25.1,82,4.8,135,11.3,0,775,4.7,\n28/11/2017 08:10:00,1016.9,25.4,80,4.4,127,11.3,0,787,5.1,\"note temperature\"\n28/11/2017 08:15:00,1017,25.7,79,3.5,74,11.3,0,800,5.4,\n28/11/2017 08:20:00,1016.9,25.9,79,1.6,95,9.7,0,774,5.5,\n28/11/2017 08:25:00,1017,25.5,78,2.9,48,9.7,0,303,3.4,\"forecast received\"\n28/11/2017 08:30:00,1017.1,25.1,80,3.1,54,9.7,0,190,3.6,\n</code></pre> <p>or this:</p> <pre><code>Time,Barometer,Temp,Humidity,Windspeed,Dir,Gust,Dayrain,Radiation,Uv\n2/1/2017 06:20:00,1006.4,4.8,48,2.8,NE,4,0,349,2.8\n2/1/2017 06:25:00,1006.9,5.0,48,3.8,NNE,21.3,0,885,4.3\n2/1/2017 06:30:00,1006.8,5.4,47,3.4,North,12.3,0,887,5.3\n2/1/2017 06:35:00,1007,5.2,49,5.5,NNE,13.3,0,600,5.4\n2/1/2017 06:40:00,1006.9,5.7,49,2.6,ESE,9.7,0,732,5.5\n2/1/2017 06:45:00,1007,5.5,48,1.9,Southsoutheast,9.8,0,393,6.4\n2/1/2017 06:50:00,1007.1,5.2,50,2.1,southeast,9.9,0,180,6.6\n</code></pre> <p>Note</p> <p>Cardinal, intercardinal and/or secondary intercardinal directions may be represented by one, two or three letter abbreviations e.g., N, SE or SSW; by a single word e.g., North, Southwest or Southsouthwest or by hyphenated or spaced words e.g., North West or South-south-west. Capitalisation is ignored as are any spaces, hyphens or other white space. At present only English abbreviations and directions are supported.</p>"},{"location":"utilities/wee_import-csv/#mapping-data-to-archive-fields","title":"Mapping data to archive fields","text":"<p>The WeeWX archive fields populated during a CSV import depend on the CSV-to-WeeWX field mappings specified in <code>[[FieldMap]]</code> stanza in the import configuration file. If a valid field mapping exists, the WeeWX field exists in the WeeWX archive table schema and provided the mapped CSV field contains valid data, the corresponding WeeWX field will be populated. Note that the CSV import is the only import supported by <code>wee_import</code> that allows any WeeWX archive field to be populated.</p> <p>Note</p> <p>The use of the calc_missing option in the import configuration file may result in a number of derived fields being calculated from the imported data. If these derived fields exist in the in-use database schema they will be saved to the database as well.</p>"},{"location":"utilities/wee_import-csv/#step-by-step-instructions","title":"Step-by-step instructions","text":"<p>To import observations from a CSV file:</p> <ol> <li> <p>Ensure the source data file is in a directory accessible by the machine that will run <code>wee_import</code>. For the purposes of the following examples the source data file <code>data.csv</code> located in the <code>/var/tmp</code> directory will be used.</p> </li> <li> <p>Make a backup of the WeeWX database in case the import should go awry.</p> </li> <li> <p>Create an import configuration file. In this case we will make a copy of the example CSV import configuration file and save it as <code>csv.conf</code> in the <code>/var/tmp</code> directory:</p> <pre><code>$ cp /home/weewx/util/import/csv-example.conf /var/tmp/csv.conf\n</code></pre> </li> <li> <p>Confirm that the <code>source</code> option is set to CSV:</p> <pre><code>source = CSV\n</code></pre> </li> <li> <p>Confirm the following options in the <code>[CSV]</code> section are set:</p> <ul> <li> <p>file. The full path and file name of the file containing the CSV formatted data to be imported.</p> </li> <li> <p>delimiter. The single character used to separate fields.</p> </li> <li> <p>interval. Determines how the WeeWX interval field is derived.</p> </li> <li> <p>qc. Determines whether quality control checks are performed on the imported data.</p> </li> <li> <p>calc_missing. Determines whether missing derived observations will be calculated from the imported data.</p> </li> <li> <p>ignore_invalid_data. Determines whether invalid data in a source field is ignored or the import aborted.</p> </li> <li> <p>tranche. The number of records written to the WeeWX database in each transaction.</p> </li> <li> <p>UV_sensor. Whether a UV sensor was installed when the source data was produced.</p> </li> <li> <p>solar_sensor. Whether a solar radiation sensor was installed when the source data was produced.</p> </li> <li> <p>raw_datetime_format. The format of the imported date time field.</p> </li> <li> <p>rain. Determines how the WeeWX rain field is derived.</p> </li> <li> <p>wind_direction. Determines how imported wind direction fields are interpreted.</p> </li> <li> <p>[[FieldMap]]. Defines the mapping between imported data fields and WeeWX archive fields. Also defines the units of measure for each imported field.</p> </li> </ul> </li> <li> <p>When first importing data it is prudent to do a dry run import before any data are actually imported. A dry run import will perform all steps of the import without actually writing imported data to the WeeWX database. In addition, consideration should be given to any additional options such as <code>--date</code>.</p> <p>To perform a dry run enter the following command:</p> <pre><code>wee_import --import-config=/var/tmp/csv.conf --dry-run\n</code></pre> <p>The output should be something like:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nA CSV import from source file '/var/tmp/data.csv' has been requested.\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nThis is a dry run, imported data will not be saved to archive.\nStarting dry run import ...\n27337 records identified for import.\nUnique records processed: 27337; Last timestamp: 2018-03-03 06:00:00 AEST (1520020800)\nFinished dry run import\n27337 records were processed and 27337 unique records would have been imported.\n</code></pre> <p>The output includes details about the data source, the destination of the imported data and some other details on how the data will be processed. The import will then be performed but no data will be written to the WeeWX database. Upon completion a brief summary of the records processed is provided.</p> </li> <li> <p>Once the dry run results are satisfactory the data can be imported using the following command:</p> <pre><code>wee_import --import-config=/var/tmp/csv.conf\n</code></pre> <p>This will result in a short preamble similar to that from the dry run. At the end of the preamble there will be a prompt:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nA CSV import from source file '/var/tmp/data.csv' has been requested.\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nStarting import ...\n27337 records identified for import.\nProceeding will save all imported records in the WeeWX archive.\nAre you sure you want to proceed (y/n)?\n</code></pre> </li> <li> <p>If the import parameters are acceptable enter <code>y</code> to proceed with the import or <code>n</code> to abort the import. If the import is confirmed the source data will be imported, processed and saved in the WeeWX database. Information on the progress of the import will be displayed similar to the following:</p> <pre><code>Unique records processed: 3250; Last timestamp: 2017-12-09 14:45:00 AEST (1512794700)\n</code></pre> <p>The line commencing with <code>Unique records processed</code> should update as records are imported with progress information on number of records processed, number of unique records imported and the date time of the latest record processed. Once the initial import is complete <code>wee_import</code> will, if requested, calculate any missing derived observations and rebuild the daily summaries. A brief summary should be displayed similar to the following:</p> <pre><code>Calculating missing derived observations...\nProcessing record: 27337; Last record: 2018-03-03 06:00:00 AEST (1520020800)\nRecalculating daily summaries...\nRecords processed: 27337; Last date: 2018-03-03 06:00:00 AEST (1520020800)\nFinished recalculating daily summaries\nFinished calculating missing derived observations\n</code></pre> <p>When the import is complete a brief summary is displayed similar to the following:</p> <pre><code>Finished import\n27337 records were processed and 27337 unique records imported in 113.91 seconds.\nThose records with a timestamp already in the archive will not have been\nimported. Confirm successful import in the WeeWX log file.\n</code></pre> </li> <li> <p>Whilst <code>wee_import</code> will advise of the number of records processed and the number of unique records found, <code>wee_import</code> does know how many, if any, of the imported records were successfully saved to the database. You should look carefully through the WeeWX log file covering the <code>wee_import</code> session and take note of any records that were not imported. The most common reason for imported records not being saved to the database is because a record with that timestamp already exists in the database, in such cases something similar to the following will be found in the log:</p> <pre><code>Aug 22 14:38:28 stretch12  wee_import[1226] ERROR weewx.manager: Unable to add record 2018-09-04 04:20:00 AEST (1535998800) to database 'weewx.sdb': UNIQUE constraint failed: archive.dateTime\n</code></pre> <p>In such cases you should take note of the timestamp of the record(s) concerned and make a decision about whether to delete the pre-existing record and re-import the record or retain the pre-existing record.</p> </li> </ol>"},{"location":"utilities/wee_import-cumulus/","title":"Cumulus","text":"<p>Warning</p> <p>Running WeeWX during a <code>wee_import</code> session can lead to abnormal termination of the import. If WeeWX must remain running (e.g., so that live data is not lost) run the <code>wee_import</code> session on another machine or to a second database and merge the in-use and second database once the import is complete.</p> <p><code>wee_import</code> can import observational data from the one or more Cumulus monthly log files. A Cumulus monthly log file records weather station observations for a single month. These files are accumulated over time and can be considered analogous to the WeeWX archive table. When <code>wee_import</code> imports data from the Cumulus monthly log files each log file is considered a 'period'. <code>wee_import</code> processes one period at a time in chronological order (oldest to newest) and provides import summary data on a per period basis.</p>"},{"location":"utilities/wee_import-cumulus/#mapping-data-to-archive-fields","title":"Mapping data to archive fields","text":"<p>A Cumulus monthly log file import will populate the WeeWX archive fields as follows:</p> <ul> <li> <p>Provided data exists for each field in the Cumulus monthly logs, the following WeeWX archive fields will be directly populated by imported data:</p> <ul> <li><code>dateTime</code></li> <li><code>barometer</code></li> <li><code>dewpoint</code></li> <li><code>heatindex</code></li> <li><code>inHumidity</code></li> <li><code>inTemp</code></li> <li><code>outHumidity</code></li> <li><code>outTemp</code></li> <li><code>radiation</code></li> <li><code>rain</code></li> <li><code>rainRate</code></li> <li><code>UV</code></li> <li><code>windDir</code></li> <li><code>windGust</code></li> <li><code>windSpeed</code></li> <li><code>windchill</code></li> </ul> <p>Note</p> <p>If a field in the Cumulus monthly log file has no data the corresponding WeeWX archive field will be set to <code>None/null</code>.</p> </li> <li> <p>The following WeeWX archive fields will be populated from other settings or configuration options:</p> <ul> <li><code>interval</code></li> <li><code>usUnits</code></li> </ul> </li> <li> <p>The following WeeWX archive fields will be populated with values derived from the imported data provided <code>calc_missing = True</code> is included in the <code>[Cumulus]</code> section of the import configuration file being used and the field exists in the in-use WeeWX archive table schema.</p> <ul> <li><code>altimeter</code></li> <li><code>ET</code></li> <li><code>pressure</code></li> </ul> <p>Note</p> <p>If <code>calc_missing = False</code> is included in the <code>[Cumulus]</code> section of the import configuration file being used then all of the above fields will be set to <code>None/null</code>. The <code>calc_missing</code> option default is <code>True</code>.</p> </li> </ul>"},{"location":"utilities/wee_import-cumulus/#step-by-step-instructions","title":"Step-by-step instructions","text":"<p>To import observations from one or more Cumulus monthly log files:</p> <ol> <li> <p>Ensure the Cumulus monthly log file(s) to be used for the import are located in a directory accessible by the machine that will run <code>wee_import</code>. For the purposes of the following examples, there are nine monthly logs files covering the period October 2016 to June 2017, inclusive, located in the <code>/var/tmp/cumulus</code> directory.</p> </li> <li> <p>Make a backup of the WeeWX database in case the import should go awry.</p> </li> <li> <p>Create an import configuration file. In this case we will make a copy of the example Cumulus import configuration file and save it as <code>cumulus.conf</code> in the <code>/var/tmp</code> directory:</p> <pre><code>$ cp /home/weewx/util/import/cumulus-example.conf /var/tmp/cumulus.conf\n</code></pre> </li> <li> <p>Confirm the <code>source</code> option is set to Cumulus:</p> <pre><code>source = Cumulus\n</code></pre> </li> <li> <p>Confirm that the following options in the <code>[Cumulus]</code> section are correctly set:</p> <ul> <li> <p>directory. The full path to the directory containing the Cumulus monthly log files to be used as the source of the imported data.</p> </li> <li> <p>interval. Determines how the WeeWX interval field is derived.</p> </li> <li> <p>qc. Determines whether quality control checks are performed on the imported data.</p> </li> <li> <p>calc_missing. Determines whether missing derived observations will be calculated from the imported data.</p> </li> <li> <p>separator. The date field separator used in the Cumulus monthly log files.</p> </li> <li> <p>delimiter. The field delimiter used in the Cumulus monthly log files.</p> </li> <li> <p>decimal. The decimal point character used in the Cumulus monthly log files.</p> </li> <li> <p>ignore_invalid_data. Determines whether invalid data in a source field is ignored or the import aborted.</p> </li> <li> <p>tranche. The number of records written to the WeeWX database in each transaction.</p> </li> <li> <p>UV_sensor. Whether a UV sensor was installed when the source data was produced.</p> </li> <li> <p>solar_sensor. Whether a solar radiation sensor was installed when the source data was produced.</p> </li> <li> <p>[[Units]]. Defines the units used in the Cumulus monthly log files.</p> </li> </ul> </li> <li> <p>When first importing data it is prudent to do a dry run import before any data is actually imported. A dry run import will perform all steps of the import without actually writing imported data to the WeeWX database. In addition, consideration should be given to any additional options to be used such as <code>--date</code>.</p> <p>To perform a dry run enter the following command:</p> <pre><code>wee_import --import-config=/var/tmp/cumulus.conf --dry-run\n</code></pre> <p>This will result in a short preamble with details on the data source, the destination of the imported data and some other details on how the data will be processed. The import will then be performed but no data will be written to the WeeWX database.</p> <p>The output should be similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nCumulus monthly log files in the '/var/tmp/cumulus' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nThis is a dry run, imported data will not be saved to archive.\nStarting dry run import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nUnique records processed: 8858; Last timestamp: 2016-10-31 23:55:00 AEST (1477922100)\nPeriod 2 ...\nUnique records processed: 8636; Last timestamp: 2016-11-30 23:55:00 AEST (1480514100)\nPeriod 3 ...\nUnique records processed: 8925; Last timestamp: 2016-12-31 23:55:00 AEST (1483192500)\nPeriod 4 ...\nUnique records processed: 8908; Last timestamp: 2017-01-31 23:55:00 AEST (1485870900)\nPeriod 5 ...\nUnique records processed: 8029; Last timestamp: 2017-02-28 23:55:00 AEST (1488290100)\nPeriod 6 ...\nUnique records processed: 8744; Last timestamp: 2017-03-31 23:55:00 AEST (1490968500)\nPeriod 7 ...\nUnique records processed: 8489; Last timestamp: 2017-04-30 23:02:00 AEST (1493557320)\nPeriod 8 ...\nUnique records processed: 8754; Last timestamp: 2017-05-31 23:55:00 AEST (1496238900)\nPeriod 9 ...\nUnique records processed: 8470; Last timestamp: 2017-06-30 23:55:00 AEST (1498830900)\nFinished dry run import\n77813 records were processed and 77813 unique records would have been imported.\n</code></pre> <p>Note</p> <p>The nine periods correspond to the nine monthly log files used for this import.</p> <p>Note</p> <p>Any periods for which no data could be obtained will be skipped. The lack of data may be due to a missing Cumulus monthly log file. A short explanatory note to this effect will be displayed against the period concerned and an entry included in the log.</p> </li> <li> <p>Once the dry run results are satisfactory the data can be imported using the following command:</p> <pre><code>wee_import --import-config=/var/tmp/cumulus.conf\n</code></pre> <p>This will result in a preamble similar to that of a dry run. At the end of the preamble there will be a prompt:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nCumulus monthly log files in the '/var/tmp/cumulus' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nStarting import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nProceeding will save all imported records in the WeeWX archive.\nAre you sure you want to proceed (y/n)?\n</code></pre> <p>If there is more than one Cumulus monthly log file then <code>wee_import</code> will provide summary information on a per period basis during the import. In addition, if the <code>--date</code> option is used then source data that falls outside the date or date range specified with the <code>--date</code> option is ignored. In such cases the preamble may look similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nCumulus monthly log files in the '/var/tmp/cumulus' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nStarting import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nPeriod 1 - no records identified for import.\nPeriod 2 ...\nPeriod 2 - no records identified for import.\nPeriod 3 ...\nProceeding will save all imported records in the WeeWX archive.\nAre you sure you want to proceed (y/n)?\n</code></pre> </li> <li> <p>If the import parameters are acceptable enter <code>y</code> to proceed with the import or <code>n</code> to abort the import. If the import is confirmed, the source data will be imported, processed and saved in the WeeWX database. Information on the progress of the import will be displayed similar to the following:</p> <pre><code>Unique records processed: 2305; Last timestamp: 2016-12-30 00:00:00 AEST (1483020000)\n</code></pre> <p>Again if there is more than one Cumulus monthly log file and if the <code>--date</code> option is used the progress information may instead look similar to:</p> <pre><code>Period 4 ...\nUnique records processed: 8908; Last timestamp: 2017-01-31 23:55:00 AEST (1485870900)\nPeriod 5 ...\nUnique records processed: 8029; Last timestamp: 2017-02-28 23:55:00 AEST (1488290100)\nPeriod 6 ...\nUnique records processed: 8744; Last timestamp: 2017-03-31 23:55:00 AEST (1490968500)\n</code></pre> <p>Note</p> <p>Any periods for which no data could be obtained will be skipped. The lack of data may be due to a missing Cumulus monthly log file. A short explanatory note to this effect will be displayed against the period concerned and an entry included in the log.</p> <p>The line commencing with <code>Unique records processed</code> should update as records are imported with progress information on number of records processed, number of unique records imported and the date time of the latest record processed. If the import spans multiple months (ie multiple monthly log files) then a new <code>Period</code> line is created for each month.</p> <p>Once the initial import is complete <code>wee_import</code> will, if requested, calculate any missing derived observations and rebuild the daily summaries. A brief summary should be displayed similar to the following:</p> <pre><code>Calculating missing derived observations ...\nProcessing record: 77782; Last record: 2017-06-30 00:00:00 AEST (1519826400)\nRecalculating daily summaries...\nRecords processed: 77000; Last date: 2017-06-28 11:45:00 AEST (1519811100)\nFinished recalculating daily summaries\nFinished calculating missing derived observations\n</code></pre> <p>When the import is complete a brief summary is displayed similar to the following:</p> <pre><code>Finished import\n77813 records were processed and 77813 unique records imported in 106.96 seconds.\nThose records with a timestamp already in the archive will not have been\nimported. Confirm successful import in the WeeWX log file.\n</code></pre> </li> <li> <p>Whilst <code>wee_import</code> will advise of the number of records processed and the number of unique records found, <code>wee_import</code> does know how many, if any, of the imported records were successfully saved to the database. You should look carefully through the WeeWX log file covering the <code>wee_import</code> session and take note of any records that were not imported. The most common reason for imported records not being saved to the database is because a record with that timestamp already exists in the database, in such cases something similar to the following will be found in the log:</p> <pre><code>Aug 22 14:38:28 stretch12 weewx[863]: manager: unable to add record 2018-09-04 04:20:00 AEST (1535998800) to database 'weewx.sdb': UNIQUE constraint failed: archive.dateTime\n</code></pre> <p>In such cases take note of the timestamp of the record(s) concerned and make a decision about whether to delete the pre-existing record and re-import the record or retain the pre-existing record.</p> </li> </ol>"},{"location":"utilities/wee_import-troubleshoot/","title":"Troubleshooting","text":""},{"location":"utilities/wee_import-troubleshoot/#import_failures","title":"Dealing with import failures","text":"<p>Sometimes bad things happen during an import.</p> <p>If errors were encountered, or if you suspect that the WeeWX database has been contaminated with incorrect data, here are some things you can try to fix things up.</p> <ul> <li> <p>Manually delete the contaminated data. Use SQL commands to manipulate the data in the WeeWX archive database. The simplicity of this process will depend on your ability to use SQL, the amount of data imported, and whether the imported data was dispersed amongst existing. Once contaminated data have been removed the daily summary tables will need to be rebuilt using the <code>weectl database rebuild-daily</code> utility.</p> </li> <li> <p>Delete the database and start over. For SQLite, simply delete the database file. For MySQL, drop the database. Then try the import again.</p> <p>Warning</p> <p>Deleting the database file or dropping the database will result in all data in the database being lost.</p> </li> <li> <p>If the above steps are not appropriate the database should be restored from backup. You did make a backup before starting the import?</p> </li> </ul>"},{"location":"utilities/wee_import-wd/","title":"Weather Display","text":"<p>Warning</p> <p>Running WeeWX during a <code>wee_import</code> session can lead to abnormal termination of the import. If WeeWX must remain running (e.g., so that live data is not lost) run the <code>wee_import</code> session on another machine or to a second database and merge the in-use and second database once the import is complete.</p> <p><code>wee_import</code> can import observational data from the one or more Weather Display monthly log files. Weather Display records observational data on a monthly basis in a number of either space delimited (.txt) and/or comma separated (.csv) text files. <code>wee_import</code> can import observational data from the following Weather Display log files:</p> <ul> <li>MMYYYYlg.txt</li> <li>MMYYYYlgcsv.csv (csv format version of MMYYYYlg.txt)</li> <li>MMYYYYvantagelog.txt</li> <li>MMYYYYvantagelogcsv.csv (csv format version of MMYYYYvantagelog.txt)</li> <li>MMYYYYvantageextrasensorslog.csv</li> </ul> <p>where MM is a one or two-digit month and YYYY is a four digit year</p> <p>The Weather Display monthly log files record observational data using a nominal one-minute interval with each file recording various observations for the month and year designated by the MM and YYYY components of the file name. These files are accumulated over time and can be considered analogous to the WeeWX archive table. When <code>wee_import</code> imports data from the Weather Display monthly log files each set of log files for a given month and year is considered a 'period'. <code>wee_import</code> processes one period at a time in chronological order (oldest to newest) and provides import summary data on a per period basis.</p>"},{"location":"utilities/wee_import-wd/#mapping-data-to-archive-fields","title":"Mapping data to archive fields","text":"<p>The WeeWX archive fields populated during the import of Weather Display data depends on the field mapping specified in <code>[[FieldMap]]</code> stanza in the import configuration file. A given WeeWX field will be populated if:</p> <ul> <li> <p>a valid field mapping exists,</p> </li> <li> <p>the WeeWX field exists in the WeeWX archive table schema, and</p> </li> <li> <p>the mapped Weather Display field contains valid data.</p> </li> </ul> <p>The following WeeWX archive fields will be populated from other settings or configuration options and need not be included in the field map:</p> <ul> <li> <p><code>interval</code></p> </li> <li> <p><code>usUnits</code></p> </li> </ul> <p>The following WeeWX archive fields will be populated with values derived from the imported data provided <code>calc_missing = True</code> is included in the <code>[WD]</code> section of the import configuration file being used and the field exists in the in-use WeeWX archive table schema:</p> <ul> <li> <p><code>altimeter</code></p> </li> <li> <p><code>pressure</code></p> </li> <li> <p><code>rainRate</code></p> </li> <li> <p><code>windchill</code></p> </li> </ul> <p>Note</p> <p>If <code>calc_missing = False</code> is included in the <code>[WD]</code> section of the import configuration file being used then all of the above fields will be set to <code>None/null</code>. The <code>calc_missing</code> option default is <code>True</code>.</p>"},{"location":"utilities/wee_import-wd/#step-by-step-instructions","title":"Step-by-step instructions","text":"<p>To import observations from one or more Weather Display monthly log files:</p> <ol> <li> <p>Ensure the Weather Display monthly log file(s) to be used for the import are located in a directory accessible by the machine that will run <code>wee_import</code>. For the purposes of the following examples, there are five months of logs files covering the period September 2018 to January 2019 inclusive located in the <code>/var/tmp/wd</code> directory.</p> </li> <li> <p>Make a backup of the WeeWX database in case the import should go awry.</p> </li> <li> <p>Create an import configuration file, this is easily done by making a copy of the example Weather Display import configuration file located in the <code>/home/weewx/util/import</code> or <code>/etc/weewx/import</code> directory as applicable. In this case we will make a copy of the example Weather Display import configuration file and save it as <code>wd.conf</code> in the <code>/var/tmp</code> directory:</p> <pre><code>$ cp /home/weewx/util/import/wd-example.conf /var/tmp/wd.conf\n</code></pre> </li> <li> <p>Confirm that the <code>source</code> option is set to WD:</p> <pre><code>source = WD\n</code></pre> </li> <li> <p>Confirm that the following options in the <code>[WD]</code> section are correctly set:</p> <ul> <li> <p>directory. The full path to the directory containing the Weather Display monthly log files to be used as the source of the imported data.</p> </li> <li> <p>logs_to_process. Specifies the Weather Display monthly log files to be used to import data.</p> </li> <li> <p>interval. Determines how the WeeWX interval field is derived.</p> </li> <li> <p>qc. Determines whether quality control checks are performed on the imported data.</p> </li> <li> <p>calc_missing. Determines whether missing derived observations will be calculated from the imported data.</p> </li> <li> <p>txt_delimiter. The field delimiter used in the Weather Display space delimited (*.txt) monthly log files.</p> </li> <li> <p>csv_delimiter. The field delimiter used in the Weather Display monthly comma separated values (*.csv) monthly log files.</p> </li> <li> <p>decimal. The decimal point character used in the Weather Display monthly log files.</p> </li> <li> <p>ignore_missing_log. Determines whether missing log files are to be ignored or the import aborted.</p> </li> <li> <p>ignore_invalid_data. Determines whether invalid data in a source field is ignored or the import aborted.</p> </li> <li> <p>tranche. The number of records written to the WeeWX database in each transaction.</p> </li> <li> <p>UV_sensor. Whether a UV sensor was installed when the source data was produced.</p> </li> <li> <p>solar_sensor. Whether a solar radiation sensor was installed when the source data was produced.</p> </li> <li> <p>ignore_extreme_temp_hum. Determines whether temperature and humidity values of 255 will be ignored.</p> </li> <li> <p>[[Units]]. Defines the units used in the Weather Display monthly log files.</p> </li> <li> <p>[[FieldMap]]. Defines the mapping between imported data fields and WeeWX archive fields.</p> </li> </ul> </li> <li> <p>When first importing data it is prudent to do a dry run import before any data is actually imported. A dry run import will perform all steps of the import without actually writing imported data to the WeeWX database. In addition, consideration should be given to any additional options to be used such as <code>--date</code>.</p> <p>Note</p> <p>Due to some peculiarities of the Weather Display log structure it may be prudent to use the <code>--suppress-warnings</code> option during the initial dry run so the overall progress of the import can be observed.</p> <p>To perform a dry run enter the following command:</p> <pre><code>wee_import --import-config=/var/tmp/wd.conf --dry-run --suppress-warnings\n</code></pre> <p>This will result in a short preamble with details on the data source, the destination of the imported data and some other details on how the data will be processed. The import will then be performed but no data will be written to the WeeWX database.</p> <p>The output should be similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nWeather Display monthly log files in the '/var/tmp/WD' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nThis is a dry run, imported data will not be saved to archive.\nStarting dry run import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nUnique records processed: 43183; Last timestamp: 2018-09-30 23:59:00 AEST (1538315940)\nPeriod 2 ...\nUnique records processed: 44620; Last timestamp: 2018-10-31 23:59:00 AEST (1540994340)\nPeriod 3 ...\nUnique records processed: 43136; Last timestamp: 2018-11-30 23:59:00 AEST (1543586340)\nPeriod 4 ...\nUnique records processed: 44633; Last timestamp: 2018-12-31 23:59:00 AEST (1546264740)\nPeriod 5 ...\nUnique records processed: 8977; Last timestamp: 2019-01-07 05:43:00 AEST (1546803780)\nFinished dry run import\n184765 records were processed and 184549 unique records would have been imported.\n216 duplicate records were ignored.\n</code></pre> <p>Note</p> <p>The five periods correspond to the five months of log files used for this import.</p> <p>Note</p> <p>Any periods for which no data could be obtained will be skipped. The lack of data may be due to a missing Weather Display log file. A short explanatory note to this effect will be displayed against the period concerned and an entry included in the log.</p> </li> <li> <p>If the <code>--suppress-warnings</code> option was used it may be prudent to do a second dry run this time without the <code>--suppress-warnings</code> option. This will allow any warnings generated by the dry run import to be observed:</p> <pre><code>wee_import --import-config=/var/tmp/wd.conf --dry-run\n</code></pre> <p>This will result in a short preamble with details on the data source, the destination of the imported data and some other details on how the data will be processed. The import will then be performed but no data will be written to the WeeWX database.</p> <p>The output should be similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nWeather Display monthly log files in the '/var/tmp/WD' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nThis is a dry run, imported data will not be saved to archive.\nStarting dry run import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nWarning: Import field 'radiation' is mapped to WeeWX field 'radiation' but the\nimport field 'radiation' could not be found in one or more records.\nWeeWX field 'radiation' will be set to 'None' in these records.\nWarning: Import field 'soiltemp' is mapped to WeeWX field 'soilTemp1' but the\nimport field 'soiltemp' could not be found in one or more records.\nWeeWX field 'soilTemp1' will be set to 'None' in these records.\nWarning: Import field 'soilmoist' is mapped to WeeWX field 'soilMoist1' but the\nimport field 'soilmoist' could not be found in one or more records.\nWeeWX field 'soilMoist1' will be set to 'None' in these records.\nWarning: Import field 'humidity' is mapped to WeeWX field 'outHumidity' but the\nimport field 'humidity' could not be found in one or more records.\nWeeWX field 'outHumidity' will be set to 'None' in these records.\nWarning: Import field 'heatindex' is mapped to WeeWX field 'heatindex' but the\nimport field 'heatindex' could not be found in one or more records.\nWeeWX field 'heatindex' will be set to 'None' in these records.\nWarning: Import field 'windspeed' is mapped to WeeWX field 'windSpeed' but the\nimport field 'windspeed' could not be found in one or more records.\nWeeWX field 'windSpeed' will be set to 'None' in these records.\nWarning: Import field 'barometer' is mapped to WeeWX field 'barometer' but the\nimport field 'barometer' could not be found in one or more records.\nWeeWX field 'barometer' will be set to 'None' in these records.\nWarning: Import field 'dewpoint' is mapped to WeeWX field 'dewpoint' but the\nimport field 'dewpoint' could not be found in one or more records.\nWeeWX field 'dewpoint' will be set to 'None' in these records.\nWarning: Import field 'rainlastmin' is mapped to WeeWX field 'rain' but the\nimport field 'rainlastmin' could not be found in one or more records.\nWeeWX field 'rain' will be set to 'None' in these records.\nWarning: Import field 'direction' is mapped to WeeWX field 'windDir' but the\nimport field 'direction' could not be found in one or more records.\nWeeWX field 'windDir' will be set to 'None' in these records.\nWarning: Import field 'temperature' is mapped to WeeWX field 'outTemp' but the\nimport field 'temperature' could not be found in one or more records.\nWeeWX field 'outTemp' will be set to 'None' in these records.\nWarning: Import field 'gustspeed' is mapped to WeeWX field 'windGust' but the\nimport field 'gustspeed' could not be found in one or more records.\nWeeWX field 'windGust' will be set to 'None' in these records.\nUnique records processed: 43183; Last timestamp: 2018-09-30 23:59:00 AEST (1538315940)\nPeriod 2 ...\nUnique records processed: 44620; Last timestamp: 2018-10-31 23:59:00 AEST (1540994340)\nPeriod 3 ...\nUnique records processed: 43136; Last timestamp: 2018-11-30 23:59:00 AEST (1543586340)\nPeriod 4 ...\nUnique records processed: 44633; Last timestamp: 2018-12-31 23:59:00 AEST (1546264740)\nPeriod 5 ...\nUnique records processed: 8977; Last timestamp: 2019-01-07 05:43:00 AEST (1546803780)\n6 duplicate records were identified in period 5:\n2019-01-04 10:31:00 AEST (1546561860)\n2019-01-04 10:32:00 AEST (1546561920)\n2019-01-04 10:33:00 AEST (1546561980)\n2019-01-04 10:34:00 AEST (1546562040)\n2019-01-04 10:35:00 AEST (1546562100)\n2019-01-04 10:36:00 AEST (1546562160)\nFinished dry run import\n184555 records were processed and 184549 unique records would have been imported.\n6 duplicate records were ignored.\n</code></pre> <p>In this case the following warnings are evident:</p> <ul> <li> <p>Period one had 12 warnings for import fields that were mapped to WeeWX data fields but for which no data was found. This could be a sign that a complete month of data or a significant portion of the month could be missing, or it could be a case of just the first record of the month is missing (a significant number of Weather Display monthly log files have been found to be missing the first record of the month). In most cases this warning can be ignored.</p> </li> <li> <p>Period five shows warnings for six entries in the period that have duplicate timestamps. This could be a sign that there is a problem in one or more of the Weather Display monthly log files for that month. However, anecdotally it has been found that duplicate entries often exist in one or more Weather Display monthly log files. If the duplicates are to be ignored then such warnings can be ignored otherwise the incorrect data should be removed from the affected log files before import.</p> </li> </ul> </li> <li> <p>Once the dry run results are satisfactory the data can be imported using the following command:</p> <pre><code>wee_import --import-config=/var/tmp/wd.conf --suppress-warnings\n</code></pre> <p>Note</p> <p>The <code>--suppress-warnings</code> option has been used to suppress the previously encountered warnings.</p> <p>This will result in a preamble similar to that of a dry run. At the end of the preamble there will be a prompt:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nWeather Display monthly log files in the '/var/tmp/WD' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nStarting import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nProceeding will save all imported records in the WeeWX archive.\nAre you sure you want to proceed (y/n)?\n</code></pre> <p>If there is more than one month of Weather Display monthly log files then <code>wee_import</code> will provide summary information on a per period basis during the import. In addition, if the <code>--date</code> option is used then source data that falls outside the date or date range specified with the <code>--date</code> option is ignored. In such cases the preamble may look similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nWeather Display monthly log files in the '/var/tmp/WD' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nObservations timestamped after 2018-10-12 00:00:00 AEST (1539266400) and up to and\nincluding 2018-10-13 00:00:00 AEST (1539352800) will be imported.\nStarting import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nPeriod 1 - no records identified for import.\nPeriod 2 ...\nProceeding will save all imported records in the WeeWX archive.\nAre you sure you want to proceed (y/n)?\n</code></pre> </li> <li> <p>If the import parameters are acceptable enter <code>y</code> to proceed with the import or <code>n</code> to abort the import. If the import is confirmed, the source data will be imported, processed and saved in the WeeWX database. Information on the progress of the import will be displayed similar to the following:</p> <pre><code>Unique records processed: 1250; Last timestamp: 2018-12-01 20:49:00 AEST (1543661340)\n</code></pre> <p>Again if there is more than one month of Weather Display monthly log files and if the <code>--date</code> option is used the progress information may instead look similar to:</p> <pre><code>Period 2 ...\nUnique records processed: 44620; Last timestamp: 2018-10-31 23:59:00 AEST (1540994340)\nPeriod 3 ...\nUnique records processed: 43136; Last timestamp: 2018-11-30 23:59:00 AEST (1543586340)\nPeriod 4 ...\nUnique records processed: 12000; Last timestamp: 2018-12-09 07:59:00 AEST (1544306340)\n</code></pre> <p>Note</p> <p>Any periods for which no data could be obtained will be skipped. The lack of data may be due to a missing Weather Display log file. A short explanatory note to this effect will be displayed against the period concerned and an entry included in the log.</p> <p>The line commencing with <code>Unique records processed</code> should update as records are imported with progress information on number of unique records processed and the date time of the latest record processed. If the import spans multiple months then a new <code>Period</code> line is created for each month.</p> <p>Once the initial import is complete <code>wee_import</code> will, if requested, calculate any missing derived observations and rebuild the daily summaries. A brief summary should be displayed similar to the following:</p> <pre><code>Calculating missing derived observations ...\nProcessing record: 184549; Last record: 2019-01-08 00:00:00 AEST (1546869600)\nRecalculating daily summaries...\nRecords processed: 184000; Last date: 2019-01-06 20:34:00 AEST (1546770840)\nFinished recalculating daily summaries\nFinished calculating missing derived observations\n</code></pre> <p>When the import is complete a brief summary is displayed similar to the following:</p> <pre><code>Finished import\n184765 records were processed and 184549 unique records imported in 699.27 seconds.\n216 duplicate records were ignored.\nThose records with a timestamp already in the archive will not have been\nimported. Confirm successful import in the WeeWX log file.\n</code></pre> </li> <li> <p>Whilst <code>wee_import</code> will advise of the number of unique records imported, <code>wee_import</code> does know how many, if any, of the imported records were successfully saved to the database. You should look carefully through the WeeWX log file covering the <code>wee_import</code> session and take note of any records that were not imported. The most common reason for imported records not being saved to the database is because a record with that timestamp already exists in the database, in such cases something similar to the following will be found in the log:</p> <pre><code>Aug 22 14:38:28 stretch12 weewx[863]: manager: unable to add record 2018-09-04 04:20:00 AEST (1535998800) to database 'weewx.sdb': UNIQUE constraint failed: archive.dateTime\n</code></pre> <p>In such cases take note of the timestamp of the record(s) concerned and make a decision about whether to delete the pre-existing record and re-import the record or retain the pre-existing record.</p> </li> </ol>"},{"location":"utilities/wee_import-weathercat/","title":"WeatherCat","text":"<p>Warning</p> <p>Running WeeWX during a <code>wee_import</code> session can lead to abnormal termination of the import. If WeeWX must remain running (e.g., so that live data is not lost) run the <code>wee_import</code> session on another machine or to a second database and merge the in-use and second database once the import is complete.</p> <p><code>wee_import</code> can import observational data from the one or more WeatherCat monthly .cat files. A WeatherCat monthly .cat file records weather station observations for a single month. These files are accumulated over time and can be considered analogous to the WeeWX archive table. When <code>wee_import</code> imports data from the WeatherCat monthly .cat files each file is considered a 'period'. <code>wee_import</code> processes one period at a time in chronological order (oldest to newest) and provides import summary data on a per period basis.</p>"},{"location":"utilities/wee_import-weathercat/#mapping-data-to-archive-fields","title":"Mapping data to archive fields","text":"<p>A WeatherCat import will populate the WeeWX archive fields as follows:</p> <ul> <li> <p>Provided data exists for each field in the WeatherCat monthly .cat files, the following WeeWX archive fields will be directly populated by imported data:</p> <ul> <li><code>dateTime</code></li> <li><code>barometer</code></li> <li><code>dewpoint</code></li> <li><code>heatindex</code></li> <li><code>inHumidity</code></li> <li><code>inTemp</code></li> <li><code>outHumidity</code></li> <li><code>outTemp</code></li> <li><code>radiation</code></li> <li><code>rain</code></li> <li><code>rainRate</code></li> <li><code>UV</code></li> <li><code>windDir</code></li> <li><code>windGust</code></li> <li><code>windSpeed</code></li> <li><code>windchill</code></li> </ul> <p>Note</p> <p>If a field in the WeatherCat monthly .cat file has no data the corresponding WeeWX archive field will be set to <code>None/null</code>.</p> </li> <li> <p>The following WeeWX archive fields will be populated from other settings or configuration options:</p> <ul> <li><code>interval</code></li> <li><code>usUnits</code></li> </ul> </li> <li> <p>The following WeeWX archive fields will be populated with values derived from the imported data provided <code>calc_missing = True</code> is included in the <code>[WeatherCat]</code> section of the import configuration file being used and the field exists in the in-use WeeWX archive table schema:</p> <ul> <li><code>altimeter</code></li> <li><code>ET</code></li> <li><code>pressure</code></li> </ul> <p>Note</p> <p>If <code>calc_missing = False</code> is included in the <code>[WeatherCat]</code> section of the import configuration file being used then all of the above fields will be set to <code>None/null</code>. The <code>calc_missing</code> option default is <code>True</code>.</p> </li> </ul>"},{"location":"utilities/wee_import-weathercat/#step-by-step-instructions","title":"Step-by-step instructions","text":"<p>To import observations from one or more WeatherCat monthly .cat files:</p> <ol> <li> <p>Ensure the WeatherCat monthly .cat file(s) to be used for the import are located in year directories with the year directories in turn located in a directory accessible by the machine that will run <code>wee_import</code>. For the purposes of the following examples, there are nine monthly logs files covering the period October 2016 to June 2017 inclusive, located in the <code>/var/tmp/wcat/2016</code> and <code>/var/tmp/wcat/2017</code> directories respectively.</p> </li> <li> <p>Make a backup of the WeeWX database in case the import should go awry.</p> </li> <li> <p>Create an import configuration file. In this case we will make a copy of the example WeatherCat import configuration file and save it as <code>wcat.conf</code> in the <code>/var/tmp</code> directory:</p> <pre><code>$ cp /home/weewx/util/import/weathercat-example.conf /var/tmp/wcat.conf\n</code></pre> </li> <li> <p>Confirm that the <code>source</code> option is set to <code>WeatherCat</code>:</p> <pre><code>source = WeatherCat\n</code></pre> </li> <li> <p>Confirm the following options in the <code>[WeatherCat]</code> section are correctly set:</p> <ul> <li> <p>directory. The full path to the directory containing the directories containing the WeatherCat monthly .cat files to be used as the source of the imported data.</p> </li> <li> <p>interval. Determines how the WeeWX interval field is derived.</p> </li> <li> <p>qc. Determines whether quality control checks are performed on the imported data.</p> </li> <li> <p>calc_missing. Determines whether missing derived observations will be calculated from the imported data.</p> </li> <li> <p>decimal. The decimal point character used in the WeatherCat monthly log files.</p> </li> <li> <p>tranche. The number of records written to the WeeWX database in each transaction.</p> </li> <li> <p>UV_sensor. Whether a UV sensor was installed when the source data was produced.</p> </li> <li> <p>solar_sensor. Whether a solar radiation sensor was installed when the source data was produced.</p> </li> <li> <p>[[Units]]. Defines the units used in the WeatherCat monthly .cat files.</p> </li> </ul> </li> <li> <p>When first importing data it is prudent to do a dry run import before any data is actually imported. A dry run import will perform all steps of the import without actually writing imported data to the WeeWX database. In addition, consideration should be given to any additional options to be used such as <code>--date</code>.</p> <p>Note</p> <p>Whilst WeatherCat monthly .cat files use a fixed set of fields the inclusion of fields other than <code>t</code> (timestamp) and <code>V</code> (validation) is optional. For this reason the field map used for WeatherCat imports includes fields that may not exist in some WeatherCat monthly .cat files resulting in warnings by <code>wee_import</code> that there may be missing data in the import source. These warnings can be extensive and may detract from the ability of the user to monitor the progress of the import. It may be prudent to use the <code>--suppress-warnings</code> option during the initial dry run so the overall progress of the import can be more easily observed.</p> <p>To perform a dry run enter the following command:</p> <pre><code>wee_import --import-config=/var/tmp/wcat.conf --dry-run --suppress-warnings\n</code></pre> <p>This will result in a short preamble with details on the data source, the destination of the imported data and some other details on how the data will be processed. The import will then be performed but no data will be written to the WeeWX database.</p> <p>The output should be similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nWeatherCat monthly .cat files in the '/var/tmp/wcat' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nThis is a dry run, imported data will not be saved to archive.\nStarting dry run import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nUnique records processed: 39555; Last timestamp: 2016-10-31 23:59:00 AEST (1477922340)\nPeriod 2 ...\nUnique records processed: 38284; Last timestamp: 2016-11-30 23:59:00 AEST (1480514340)\nPeriod 3 ...\nUnique records processed: 39555; Last timestamp: 2016-12-31 23:59:00 AEST (1483192740)\nPeriod 4 ...\nUnique records processed: 39555; Last timestamp: 2017-01-31 23:59:00 AEST (1485871140)\nPeriod 5 ...\nUnique records processed: 35598; Last timestamp: 2017-02-28 23:59:00 AEST (1488290340)\nPeriod 6 ...\nUnique records processed: 39555; Last timestamp: 2017-03-31 23:59:00 AEST (1490968740)\nPeriod 7 ...\nUnique records processed: 38284; Last timestamp: 2017-04-30 23:59:00 AEST (1493560740)\nPeriod 8 ...\nUnique records processed: 38284; Last timestamp: 2017-06-30 23:59:00 AEST (1498831140)\nFinished dry run import\n308670 records were processed and 308670 unique records would have been imported.\n</code></pre> <p>Note</p> <p>The eight periods correspond to the eight monthly .cat files used for this import.</p> <p>Note</p> <p>Any periods for which no data could be obtained will be skipped. The lack of data may be due to a missing WeatherCat monthly .cat file. A short explanatory note to this effect will be displayed against the period concerned and an entry included in the log.</p> </li> <li> <p>If the <code>--suppress-warnings</code> option was used it may be prudent to do a second dry run this time without the <code>--suppress-warnings</code> option. This will allow any warnings generated by the dry run import to be observed:</p> <pre><code>wee_import --import-config=/var/tmp/wcat.conf --dry-run&lt;/pre&gt;\n</code></pre> <p>This will result in a short preamble with details on the data source, the destination of the imported data and some other details on how the data will be processed. The import will then be performed but no data will be written to the WeeWX database.</p> <p>The output should be similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nWeatherCat monthly .cat files in the '/var/tmp/wcat' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nThis is a dry run, imported data will not be saved to archive.\nStarting dry run import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nWarning: Import field 'T1' is mapped to WeeWX field 'extraTemp1' but the\nimport field 'T1' could not be found in one or more records.\nWeeWX field 'extraTemp1' will be set to 'None' in these records.\nWarning: Import field 'T2' is mapped to WeeWX field 'extraTemp2' but the\nimport field 'T2' could not be found in one or more records.\nWeeWX field 'extraTemp2' will be set to 'None' in these records.\nWarning: Import field 'T3' is mapped to WeeWX field 'extraTemp3' but the\nimport field 'T3' could not be found in one or more records.\nWeeWX field 'extraTemp3' will be set to 'None' in these records.\nWarning: Import field 'H1' is mapped to WeeWX field 'extraHumid1' but the\nimport field 'H1' could not be found in one or more records.\nWeeWX field 'extraHumid1' will be set to 'None' in these records.\nWarning: Import field 'H2' is mapped to WeeWX field 'extraHumid2' but the\nimport field 'H2' could not be found in one or more records.\nWeeWX field 'extraHumid2' will be set to 'None' in these records.\nWarning: Import field 'Sm1' is mapped to WeeWX field 'soilMoist1' but the\nimport field 'Sm1' could not be found in one or more records.\nWeeWX field 'soilMoist1' will be set to 'None' in these records.\nWarning: Import field 'Sm2' is mapped to WeeWX field 'soilMoist2' but the\nimport field 'Sm2' could not be found in one or more records.\nWeeWX field 'soilMoist2' will be set to 'None' in these records.\nWarning: Import field 'Sm3' is mapped to WeeWX field 'soilMoist3' but the\nimport field 'Sm3' could not be found in one or more records.\nWeeWX field 'soilMoist3' will be set to 'None' in these records.\nWarning: Import field 'Sm4' is mapped to WeeWX field 'soilMoist4' but the\nimport field 'Sm4' could not be found in one or more records.\nWeeWX field 'soilMoist4' will be set to 'None' in these records.\nWarning: Import field 'Lw1' is mapped to WeeWX field 'leafWet1' but the\nimport field 'Lw1' could not be found in one or more records.\nWeeWX field 'leafWet1' will be set to 'None' in these records.\nWarning: Import field 'Lw2' is mapped to WeeWX field 'leafWet2' but the\nimport field 'Lw2' could not be found in one or more records.\nWeeWX field 'leafWet2' will be set to 'None' in these records.\nWarning: Import field 'St1' is mapped to WeeWX field 'soilTemp1' but the\nimport field 'St1' could not be found in one or more records.\nWeeWX field 'soilTemp1' will be set to 'None' in these records.\nWarning: Import field 'St2' is mapped to WeeWX field 'soilTemp2' but the\nimport field 'St2' could not be found in one or more records.\nWeeWX field 'soilTemp2' will be set to 'None' in these records.\nWarning: Import field 'St3' is mapped to WeeWX field 'soilTemp3' but the\nimport field 'St3' could not be found in one or more records.\nWeeWX field 'soilTemp3' will be set to 'None' in these records.\nWarning: Import field 'St4' is mapped to WeeWX field 'soilTemp4' but the\nimport field 'St4' could not be found in one or more records.\nWeeWX field 'soilTemp4' will be set to 'None' in these records.\nWarning: Import field 'Lt1' is mapped to WeeWX field 'leafTemp1' but the\nimport field 'Lt1' could not be found in one or more records.\nWeeWX field 'leafTemp1' will be set to 'None' in these records.\nWarning: Import field 'Lt2' is mapped to WeeWX field 'leafTemp2' but the\nimport field 'Lt2' could not be found in one or more records.\nWeeWX field 'leafTemp2' will be set to 'None' in these records.\nUnique records processed: 39555; Last timestamp: 2016-10-31 23:59:00 AEST (1477922340)\nPeriod 2 ...\nWarning: Import field 'T1' is mapped to WeeWX field 'extraTemp1' but the\nimport field 'T1' could not be found in one or more records.\nWeeWX field 'extraTemp1' will be set to 'None' in these records.\nWarning: Import field 'T2' is mapped to WeeWX field 'extraTemp2' but the\nimport field 'T2' could not be found in one or more records.\nWeeWX field 'extraTemp2' will be set to 'None' in these records.\nWarning: Import field 'T3' is mapped to WeeWX field 'extraTemp3' but the\nimport field 'T3' could not be found in one or more records.\nWeeWX field 'extraTemp3' will be set to 'None' in these records.\nWarning: Import field 'H1' is mapped to WeeWX field 'extraHumid1' but the\nimport field 'H1' could not be found in one or more records.\nWeeWX field 'extraHumid1' will be set to 'None' in these records.\nWarning: Import field 'H2' is mapped to WeeWX field 'extraHumid2' but the\nimport field 'H2' could not be found in one or more records.\nWeeWX field 'extraHumid2' will be set to 'None' in these records.\nWarning: Import field 'Sm1' is mapped to WeeWX field 'soilMoist1' but the\nimport field 'Sm1' could not be found in one or more records.\nWeeWX field 'soilMoist1' will be set to 'None' in these records.\nWarning: Import field 'Sm2' is mapped to WeeWX field 'soilMoist2' but the\nimport field 'Sm2' could not be found in one or more records.\nWeeWX field 'soilMoist2' will be set to 'None' in these records.\nWarning: Import field 'Sm3' is mapped to WeeWX field 'soilMoist3' but the\nimport field 'Sm3' could not be found in one or more records.\nWeeWX field 'soilMoist3' will be set to 'None' in these records.\nWarning: Import field 'Sm4' is mapped to WeeWX field 'soilMoist4' but the\nimport field 'Sm4' could not be found in one or more records.\nWeeWX field 'soilMoist4' will be set to 'None' in these records.\nWarning: Import field 'Lw1' is mapped to WeeWX field 'leafWet1' but the\nimport field 'Lw1' could not be found in one or more records.\nWeeWX field 'leafWet1' will be set to 'None' in these records.\nWarning: Import field 'Lw2' is mapped to WeeWX field 'leafWet2' but the\nimport field 'Lw2' could not be found in one or more records.\nWeeWX field 'leafWet2' will be set to 'None' in these records.\nWarning: Import field 'St1' is mapped to WeeWX field 'soilTemp1' but the\nimport field 'St1' could not be found in one or more records.\nWeeWX field 'soilTemp1' will be set to 'None' in these records.\nWarning: Import field 'St2' is mapped to WeeWX field 'soilTemp2' but the\nimport field 'St2' could not be found in one or more records.\nWeeWX field 'soilTemp2' will be set to 'None' in these records.\nWarning: Import field 'St3' is mapped to WeeWX field 'soilTemp3' but the\nimport field 'St3' could not be found in one or more records.\nWeeWX field 'soilTemp3' will be set to 'None' in these records.\nWarning: Import field 'St4' is mapped to WeeWX field 'soilTemp4' but the\nimport field 'St4' could not be found in one or more records.\nWeeWX field 'soilTemp4' will be set to 'None' in these records.\nWarning: Import field 'Lt1' is mapped to WeeWX field 'leafTemp1' but the\nimport field 'Lt1' could not be found in one or more records.\nWeeWX field 'leafTemp1' will be set to 'None' in these records.\nWarning: Import field 'Lt2' is mapped to WeeWX field 'leafTemp2' but the\nimport field 'Lt2' could not be found in one or more records.\nWeeWX field 'leafTemp2' will be set to 'None' in these records.\nUnique records processed: 38284; Last timestamp: 2016-11-30 23:59:00 AEST (1480514340)\n\n... (identical entries for periods 3 to 7 omitted for conciseness)\n\nPeriod 8 ...\nWarning: Import field 'T1' is mapped to WeeWX field 'extraTemp1' but the\nimport field 'T1' could not be found in one or more records.\nWeeWX field 'extraTemp1' will be set to 'None' in these records.\nWarning: Import field 'T2' is mapped to WeeWX field 'extraTemp2' but the\nimport field 'T2' could not be found in one or more records.\nWeeWX field 'extraTemp2' will be set to 'None' in these records.\nWarning: Import field 'T3' is mapped to WeeWX field 'extraTemp3' but the\nimport field 'T3' could not be found in one or more records.\nWeeWX field 'extraTemp3' will be set to 'None' in these records.\nWarning: Import field 'H1' is mapped to WeeWX field 'extraHumid1' but the\nimport field 'H1' could not be found in one or more records.\nWeeWX field 'extraHumid1' will be set to 'None' in these records.\nWarning: Import field 'H2' is mapped to WeeWX field 'extraHumid2' but the\nimport field 'H2' could not be found in one or more records.\nWeeWX field 'extraHumid2' will be set to 'None' in these records.\nWarning: Import field 'Sm1' is mapped to WeeWX field 'soilMoist1' but the\nimport field 'Sm1' could not be found in one or more records.\nWeeWX field 'soilMoist1' will be set to 'None' in these records.\nWarning: Import field 'Sm2' is mapped to WeeWX field 'soilMoist2' but the\nimport field 'Sm2' could not be found in one or more records.\nWeeWX field 'soilMoist2' will be set to 'None' in these records.\nWarning: Import field 'Sm3' is mapped to WeeWX field 'soilMoist3' but the\nimport field 'Sm3' could not be found in one or more records.\nWeeWX field 'soilMoist3' will be set to 'None' in these records.\nWarning: Import field 'Sm4' is mapped to WeeWX field 'soilMoist4' but the\nimport field 'Sm4' could not be found in one or more records.\nWeeWX field 'soilMoist4' will be set to 'None' in these records.\nWarning: Import field 'Lw1' is mapped to WeeWX field 'leafWet1' but the\nimport field 'Lw1' could not be found in one or more records.\nWeeWX field 'leafWet1' will be set to 'None' in these records.\nWarning: Import field 'Lw2' is mapped to WeeWX field 'leafWet2' but the\nimport field 'Lw2' could not be found in one or more records.\nWeeWX field 'leafWet2' will be set to 'None' in these records.\nWarning: Import field 'St1' is mapped to WeeWX field 'soilTemp1' but the\nimport field 'St1' could not be found in one or more records.\nWeeWX field 'soilTemp1' will be set to 'None' in these records.\nWarning: Import field 'St2' is mapped to WeeWX field 'soilTemp2' but the\nimport field 'St2' could not be found in one or more records.\nWeeWX field 'soilTemp2' will be set to 'None' in these records.\nWarning: Import field 'St3' is mapped to WeeWX field 'soilTemp3' but the\nimport field 'St3' could not be found in one or more records.\nWeeWX field 'soilTemp3' will be set to 'None' in these records.\nWarning: Import field 'St4' is mapped to WeeWX field 'soilTemp4' but the\nimport field 'St4' could not be found in one or more records.\nWeeWX field 'soilTemp4' will be set to 'None' in these records.\nWarning: Import field 'Lt1' is mapped to WeeWX field 'leafTemp1' but the\nimport field 'Lt1' could not be found in one or more records.\nWeeWX field 'leafTemp1' will be set to 'None' in these records.\nWarning: Import field 'Lt2' is mapped to WeeWX field 'leafTemp2' but the\nimport field 'Lt2' could not be found in one or more records.\nWeeWX field 'leafTemp2' will be set to 'None' in these records.\nUnique records processed: 38284; Last timestamp: 2017-06-30 23:59:00 AEST (1498831140)\nFinished dry run import\n308670 records were processed and 308670 unique records would have been imported.\n</code></pre> <p>In this case warnings are evident for numerous import/WeeWX field pairs that are mapped but for which no data could be found. If the warnings relate to fields that are not included in the import source data the warning may be safely ignored. If the warning relate to fields that the user expects to be in the import source data the issue should be investigated further before the import is completed.</p> </li> <li> <p>Once the dry run results are satisfactory the data can be imported using the following command:</p> <pre><code>wee_import --import-config=/var/tmp/wcat.conf --suppress-warnings\n</code></pre> <p>This will result in a preamble similar to that of a dry run. At the end of the preamble there will be a prompt:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nWeatherCat monthly .cat files in the '/var/tmp/wcat' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nStarting import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nProceeding will save all imported records in the WeeWX archive.\nAre you sure you want to proceed (y/n)?\n</code></pre> <p>If there is more than one WeatherCat monthly .cat file then <code>wee_import</code> will provide summary information on a per period basis during the import. In addition, if the <code>--date</code> option is used then source data that falls outside the date or date range specified with the <code>--date</code> option is ignored. In such cases the preamble may look similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nWeatherCat monthly .cat files in the '/var/tmp/wcat' directory will be imported\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nStarting import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nPeriod 1 - no records identified for import.\nPeriod 2 ...\nPeriod 2 - no records identified for import.\nPeriod 3 ...\nProceeding will save all imported records in the WeeWX archive.\nAre you sure you want to proceed (y/n)?\n</code></pre> </li> <li> <p>If the import parameters are acceptable enter <code>y</code> to proceed with the import or <code>n</code> to abort the import. If the import is confirmed, the source data will be imported, processed and saved in the WeeWX database. Information on the progress of the import will be displayed similar to the following:</p> <pre><code>Unique records processed: 2305; Last timestamp: 2016-12-30 00:00:00 AEST (1483020000)\n</code></pre> <p>Again if there is more than one WeatherCat monthly .cat file and if the <code>--date</code> option is used the progress information may instead look similar to:</p> <pre><code>Period 4 ...\nUnique records processed: 8908; Last timestamp: 2017-01-31 23:59:00 AEST (1485870900)\nPeriod 5 ...\nUnique records processed: 8029; Last timestamp: 2017-02-28 23:59:00 AEST (1488290100)\nPeriod 6 ...\nUnique records processed: 8744; Last timestamp: 2017-03-31 23:59:00 AEST (1490968500)\n</code></pre> <p>Note</p> <p>Any periods for which no data could be obtained will be skipped. The lack of data may be due to a missing WeatherCat monthly .cat file. A short explanatory note to this effect will be displayed against the period concerned and an entry included in the log.</p> <p>The line commencing with <code>Unique records processed</code> should update as records are imported with progress information on number of records processed, number of unique records imported and the date time of the latest record processed. If the import spans multiple months (ie multiple monthly .cat files) then a new <code>Period</code> line is created for each month.</p> <p>Once the initial import is complete <code>wee_import</code> will, if requested, calculate any missing derived observations and rebuild the daily summaries. A brief summary should be displayed similar to the following:</p> <pre><code>Calculating missing derived observations ...\nProcessing record: 77782; Last record: 2017-06-30 00:00:00 AEST (1519826400)\nRecalculating daily summaries...\nRecords processed: 77000; Last date: 2017-06-28 11:45:00 AEST (1519811100)\nFinished recalculating daily summaries\nFinished calculating missing derived observations\n</code></pre> <p>When the import is complete a brief summary is displayed similar to the following:</p> <pre><code>Finished import\n308670 records were processed and 308670 unique records imported in 1907.61 seconds.\nThose records with a timestamp already in the archive will not have been\nimported. Confirm successful import in the WeeWX log file.\n</code></pre> </li> <li> <p>Whilst <code>wee_import</code> will advise of the number of records processed and the number of unique records found, <code>wee_import</code> does know how many, if any, of the imported records were successfully saved to the database. You should look carefully through the WeeWX log file covering the <code>wee_import</code> session and take note of any records that were not imported. The most common reason for imported records not being saved to the database is because a record with that timestamp already exists in the database, in such cases something similar to the following will be found in the log:</p> <pre><code>Aug 22 14:38:28 stretch12 weewx[863]: manager: unable to add record 2018-09-04 04:20:00 AEST (1535998800) to database 'weewx.sdb': UNIQUE constraint failed: archive.dateTime\n</code></pre> <p>In such cases take note of the timestamp of the record(s) concerned and make a decision about whether to delete the pre-existing record and re-import the record or retain the pre-existing record.</p> </li> </ol>"},{"location":"utilities/wee_import-wu/","title":"Weather Underground","text":"<p>Warning</p> <p>Running WeeWX during a <code>wee_import</code> session can lead to abnormal termination of the import. If WeeWX must remain running (e.g., so that live data is not lost) run the <code>wee_import</code> session on another machine or to a second database and merge the in-use and second database once the import is complete.</p> <p><code>wee_import</code> can import historical observation data for a Weather Underground PWS via the Weather Underground API. The Weather Underground API provides historical weather station observations received by Weather Underground for the PWS concerned on a day by day basis. As such, the data is analogous to the WeeWX archive table. When <code>wee_import</code> imports data from the Weather Underground API each day is considered a 'period'. <code>wee_import</code> processes one period at a time in chronological order (oldest to newest) and provides import summary data on a per period basis.</p>"},{"location":"utilities/wee_import-wu/#mapping-data-to-archive-fields","title":"Mapping data to archive fields","text":"<p>A Weather Underground import will populate WeeWX archive fields as follows:</p> <ul> <li> <p>Provided data exists for each field returned by the Weather Underground API, the following WeeWX archive fields will be directly populated by imported data:</p> <ul> <li><code>dateTime</code></li> <li><code>barometer</code></li> <li><code>dewpoint</code></li> <li><code>heatindex</code></li> <li><code>outHumidity</code></li> <li><code>outTemp</code></li> <li><code>radiation</code></li> <li><code>rain</code></li> <li><code>rainRate</code></li> <li><code>UV</code></li> <li><code>windchill</code></li> <li><code>windDir</code></li> <li><code>windGust</code></li> <li><code>windSpeed</code></li> </ul> <p>Note</p> <p>If an appropriate field is not returned by the Weather Underground API the corresponding WeeWX archive field will contain no data. If the API returns an appropriate field but with no data, the corresponding WeeWX archive field will be set to <code>None/null</code>. For example, if the API response has no solar radiation field the WeeWX <code>radiation</code> archive field will have no data stored. However, if the API response has a solar radiation field but contains no data, the WeeWX <code>radiation</code> archive field will be <code>None/null</code>.</p> </li> <li> <p>The following WeeWX archive fields will be populated from other settings or configuration options:</p> <ul> <li><code>interval</code></li> <li><code>usUnits</code></li> </ul> </li> <li> <p>The following WeeWX archive fields will be populated with values derived from the imported data provided <code>calc_missing = True</code> is included in the <code>[WU]</code> section of the import configuration file and the field exists in the in-use WeeWX archive table schema.</p> <ul> <li><code>altimeter</code></li> <li><code>ET</code></li> <li><code>pressure</code></li> </ul> </li> </ul> <p>Note</p> <p>If <code>calc_missing = False</code> is included in the <code>[WU]</code> section of the import configuration file being used then all of the above fields will be set to <code>None/null</code>. The <code>calc_missing</code> option default is <code>True</code>.</p>"},{"location":"utilities/wee_import-wu/#step-by-step-instructions","title":"Step-by-step instructions","text":"<p>To import observations from a Weather Underground PWS history:</p> <ol> <li> <p>Obtain the weather station ID of the Weather Underground PWS from which data is to be imported. The station ID will be a sequence of numbers and upper case letters that is usually 11 or 12 characters in length. For the purposes of the following examples a weather station ID of <code>ISTATION123</code> will be used.</p> </li> <li> <p>Obtain the API key to be used to access the Weather Underground API. This will be a seemingly random alphanumeric sequence of 32 characters. API keys are available to Weather Underground PWS contributors by logging on to their Weather Underground account and accessing Member Settings.</p> </li> <li> <p>Make a backup of the WeeWX database in case the import should go awry.</p> </li> <li> <p>Create an import configuration file. In this case we will make a copy of the example Weather Underground import configuration file and save it as <code>wu.conf</code> in the <code>/var/tmp</code> directory:</p> <pre><code>$ cp /home/weewx/util/import/wu-example.conf /var/tmp/wu.conf\n</code></pre> </li> <li> <p>Confirm that the <code>source</code> option is set to <code>WU</code>:</p> <pre><code>source = WU\n</code></pre> </li> <li> <p>Confirm that the following options in the <code>[WU]</code> section are correctly set:</p> <ul> <li> <p>station_id. The 11 or 12 character weather station ID of the Weather Underground PWS that will be the source of the imported data.</p> </li> <li> <p>api_key. The 32 character API key to be used to access the Weather Underground API.</p> </li> <li> <p>interval. Determines how the WeeWX interval field is derived.</p> </li> <li> <p>qc. Determines whether quality control checks are performed on the imported data.</p> <p>Note</p> <p>As Weather Underground imports at times contain nonsense values, particularly for fields for which no data were uploaded to Weather Underground by the PWS, the use of quality control checks on imported data can prevent these nonsense values from being imported and contaminating the WeeWX database.</p> </li> <li> <p>calc_missing. Determines whether missing derived observations will be calculated from the imported data.</p> </li> <li> <p>ignore_invalid_data. Determines whether invalid data in a source field is ignored or the import aborted.</p> </li> <li> <p>tranche. The number of records written to the WeeWX database in each transaction.</p> </li> <li> <p>wind_direction. Determines how imported wind direction fields are interpreted.</p> </li> </ul> </li> <li> <p>When first importing data it is prudent to do a dry run import before any data is actually imported. A dry run import will perform all steps of the import without actually writing imported data to the WeeWX database. In addition, consideration should be given to any additional options to be used such as <code>--date</code>, <code>--from</code> or <code>--to</code>.</p> <p>To perform a dry run enter the following command:</p> <pre><code>wee_import --import-config=/var/tmp/wu.conf --from=2016-01-20T22:30 --to=2016-01-23T06:00 --dry-run\n</code></pre> <p>In this case the <code>--from</code> and <code>--to</code> options have been used to import Weather Underground records from 10:30pm on 20 January 2016 to 6:00am on 23 January 2016 inclusive.</p> <p>Note</p> <p>If the <code>--date</code> option is omitted, or a date (not date-time) range is specified using the <code>--from</code> and <code>--to</code> options during a Weather Underground import, then one or more full days of history data will be imported. This includes records timestamped from <code>00:00</code> (inclusive) at the start of the day up to but NOT including the <code>00:00</code> record at the end of the last day. As the timestamped record refers to observations of the previous interval, such an import actually includes one record with observations from the previous day (the <code>00:00</code> record at the start of the day). Whilst this will not present a problem for <code>wee_import</code> as any records being imported with a timestamp that already exists in the WeeWX database are ignored, you may wish to use the <code>--from</code> and <code>--to</code> options with a suitable date-time range to precisely control which records are imported.</p> <p>Note</p> <p><code>wee_import</code> obtains Weather Underground daily history data one day at a time via a HTTP request and as such the import of large time spans of data may take some time. Such imports may be best handled as a series of imports of smaller time spans.</p> <p>This will result in a short preamble with details on the data source, the destination of the imported data and some other details on how the data will be processed. The import will then be performed but no data will be written to the WeeWX database.</p> <p>The output should be similar to:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nObservation history for Weather Underground station 'ISTATION123' will be imported.\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nObservations timestamped after 2016-01-20 22:30:00 AEST (1453293000) and up to and\nincluding 2016-01-23 06:00:00 AEST (1453492800) will be imported.\nThis is a dry run, imported data will not be saved to archive.\nStarting dry run import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nUnique records processed: 18; Last timestamp: 2016-01-20 23:55:00 AEST (1453298100)\nPeriod 2 ...\nUnique records processed: 284; Last timestamp: 2016-01-21 23:55:00 AEST (1453384500)\nPeriod 3 ...\nUnique records processed: 284; Last timestamp: 2016-01-22 23:55:00 AEST (1453470900)\nPeriod 4 ...\nUnique records processed: 71; Last timestamp: 2016-01-23 06:00:00 AEST (1453492800)\nFinished dry run import\n657 records were processed and 657 unique records would have been imported.\n</code></pre> <p>Note</p> <p>Any periods for which no data could be obtained will be skipped. The lack of data may be due to an incorrect station ID, an incorrect date or Weather Underground API problems. A short explanatory note to this effect will be displayed against the period concerned and an entry included in the log.</p> </li> <li> <p>Once the dry run results are satisfactory the source data can be imported using the following command:</p> <pre><code>wee_import --import-config=/var/tmp/wu.conf --from=2016-01-20T22:30 --to=2016-01-23T06:00\n</code></pre> <p>This will result in a short preamble similar to that of a dry run. At the end of the preamble there will be a prompt:</p> <pre><code>Using WeeWX configuration file /home/weewx/weewx.conf\nStarting wee_import...\nObservation history for Weather Underground station 'ISTATION123' will be imported.\nUsing database binding 'wx_binding', which is bound to database 'weewx.sdb'\nDestination table 'archive' unit system is '0x01' (US).\nMissing derived observations will be calculated.\nObservations timestamped after 2016-01-20 22:30:00 AEST (1453293000) and up to and\nincluding 2016-01-23 06:00:00 AEST (1453492800) will be imported.\nStarting import ...\nRecords covering multiple periods have been identified for import.\nPeriod 1 ...\nProceeding will save all imported records in the WeeWX archive.\nAre you sure you want to proceed (y/n)?\n</code></pre> <p>Note</p> <p><code>wee_import</code> obtains Weather Underground data one day at a time via a HTTP request and as such the import of large time spans of data may take some time. Such imports may be best handled as a series of imports of smaller time spans.</p> </li> <li> <p>If the import parameters are acceptable enter <code>y</code> to proceed with the import or <code>n</code> to abort the import. If the import is confirmed, the source data will be imported, processed and saved in the WeeWX database. Information on the progress of the import will be displayed similar to the following:</p> <pre><code>Unique records processed: 18; Last timestamp: 2016-01-20 23:55:00 AEST (1453298100)\nPeriod 2 ...\nUnique records processed: 284; Last timestamp: 2016-01-21 23:55:00 AEST (1453384500)\nPeriod 3 ...\nUnique records processed: 284; Last timestamp: 2016-01-22 23:55:00 AEST (1453470900)\n</code></pre> <p>Note</p> <p>Any periods for which no data could be obtained will be skipped. The lack of data may be due to an incorrect station ID, an incorrect date or Weather Underground API problems. A short explanatory note to this effect will be displayed against the period concerned and an entry included in the log.</p> <p>The line commencing with <code>Unique records processed</code> should update as records are imported with progress information on number of records processed, number of unique records imported and the date time of the latest record processed. If the import spans multiple days then a new <code>Period</code> line is created for each day.</p> <p>Once the initial import is complete <code>wee_import</code> will, if requested, calculate any missing derived observations and rebuild the daily summaries. A brief summary should be displayed similar to the following:</p> <pre><code>Calculating missing derived observations ...\nProcessing record: 204; Last record: 2016-01-22 23:55:00 AEST (1453470900)\nRecalculating daily summaries...\nFinished recalculating daily summaries\nFinished calculating missing derived observations\n</code></pre> <p>When the import is complete a brief summary is displayed similar to the following:</p> <pre><code>Finished import\n657 records were processed and 657 unique records imported in 78.97 seconds.\nThose records with a timestamp already in the archive will not have been\nimported. Confirm successful import in the WeeWX log file.\n</code></pre> <p>Note</p> <p>The new (2019) Weather Underground API appears to have an issue when obtaining historical data for the current day. The first time the API is queried the API returns all historical data up to and including the most recent record. However, subsequent later API queries during the same day return the same set of records rather than all records up to and including the time of the latest API query. Users importing Weather Underground data that includes data from the current day are advised to carefully check the WeeWX log to ensure that all expected records were imported. If some records are missing from the current day try running an import for the current day again using the <code>--date</code> option setting. If this fails then wait until the following day and perform another import for the day concerned again using the <code>--date</code> option setting. In all cases confirm what data has been imported by referring to the WeeWX log.</p> </li> <li> <p>Whilst <code>wee_import</code> will advise of the number of records processed and the number of unique records found, <code>wee_import</code> does know how many, if any, of the imported records were successfully saved to the database. You should look carefully through the WeeWX log file covering the <code>wee_import</code> session and take note of any records that were not imported. The most common reason for imported records not being saved to the database is because a record with that timestamp already exists in the database, in such cases something similar to the following will be found in the log:</p> <pre><code>Aug 22 14:38:28 stretch12 weewx[863]: manager: unable to add record 2018-09-04 04:20:00 AEST (1535998800) to database 'weewx.sdb': UNIQUE constraint failed: archive.dateTime\n</code></pre> <p>In such cases you should take note of the timestamp of the record(s) concerned and make a decision about whether to delete the pre-existing record and re-import the record or retain the pre-existing record.</p> </li> </ol>"},{"location":"utilities/wee_reports/","title":"wee_reports","text":"<p>In normal operation, WeeWX generates reports at each archive interval, when new data arrive. The reports utility is used to generate reports on demand. It uses the same configuration file that <code>weewxd</code> uses.</p> <p>Specify <code>--help</code> to see how it is used: <pre><code>wee_reports --help\n</code></pre> <pre><code>usage: wee_reports --help\n       wee_reports [CONFIG_FILE | --config=CONFIG_FILE]\n       wee_reports [CONFIG_FILE | --config=CONFIG_FILE] --epoch=TIMESTAMP\n       wee_reports [CONFIG_FILE | --config=CONFIG_FILE] --date=YYYY-MM-DD --time=HH:MM\n\nRun all reports defined in the specified configuration file. Use this utility\nto run reports immediately instead of waiting for the end of an archive\ninterval.\n\npositional arguments:\n  CONFIG_FILE\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --config CONFIG_FILE  Use the configuration file CONFIG_FILE\n  --epoch EPOCH_TIME    Time of the report in unix epoch time\n  --date YYYY-MM-DD     Date for the report\n  --time HH:MM          Time of day for the report\n\nSpecify either the positional argument CONFIG_FILE, or the optional argument\n--config, but not both.\n</code></pre></p> <p>By default, the reports are generated as of the last timestamp in the database, however, an explicit time can be given by using either option <code>--epoch</code>, or by using options <code>--date</code> and <code>--time</code>.</p>"},{"location":"utilities/wee_reports/#-configfilename","title":"<code>--config=FILENAME</code>","text":"<p>An optional path to the configuration file (usually, <code>weewx.conf</code>) can be given as either a positional argument, or by using option <code>--config</code> (but not both). If not given, the location of the configuration file will be inferred.</p>"},{"location":"utilities/wee_reports/#-epochepoch","title":"<code>--epoch=EPOCH</code>","text":"<p>Generate the reports so that they are current as of the given unix epoch time.</p> <pre><code>wee_reports --epoch=1652367600\n</code></pre> <p>This would generate a report for unix epoch time 1652367600 (12-May-2022 at 8AM PDT).</p>"},{"location":"utilities/wee_reports/#-dateyyyy-mm-dd-and-timehhmm","title":"<code>--date=YYYY-MM-DD</code> and <code>--time=HH:MM</code>","text":"<p>Generate the reports so that they are current as of the given date and time. The date should be given in the form <code>YYYY-MM-DD</code> and the time should be given as <code>HH:DD</code>.</p> <pre><code>wee_reports /home/weewx/weewx.conf --date=2022-05-12 --time=08:00\n</code></pre> <p>This would generate a report for 12-May-2022 at 8AM (unix epoch time 1652367600).</p>"},{"location":"utilities/weectl-about/","title":"weectl","text":"<p>The command <code>weectl</code> is the entry point for most WeeWX utilities. To see the various utilities available, run it with the <code>--help</code> option:</p> <pre><code>$ weectl --help\n\nusage: weectl -v|--version\n       weectl -h|--help\n       weectl database --help\n       weectl debug --help\n       weectl extension --help\n       weectl station --help\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n\nAvailable subcommands:\n  {database,debug,extension,station}\n    database            Manages WeeWX databases.\n    debug               Generate debug info.\n    extension           List, install, or uninstall extensions.\n    station             Create, modify, or upgrade a station data area.\n</code></pre>"},{"location":"utilities/weectl-about/#weectl-database","title":"weectl database","text":"<p>Use this subcommand to manage your WeeWX database</p>"},{"location":"utilities/weectl-about/#weectl-debug","title":"weectl debug","text":"<p>Use this subcommand to generate output that captures your WeeWX environment and configuration file. This is useful for remote debugging.</p>"},{"location":"utilities/weectl-about/#weectl-extension","title":"weectl extension","text":"<p>Use this subcommand to install, uninstall, and list WeeWX extensions.</p>"},{"location":"utilities/weectl-about/#weectl-station","title":"weectl station","text":"<p>Use this subcommand to create and manage stations.</p>"},{"location":"utilities/weectl-database/","title":"weectl database","text":"<p>Use the <code>weectl</code> subcommand <code>database</code> to manage the WeeWX database.</p> <p>Specify <code>--help</code> to see the various actions and options:</p> <pre><code>weectl database --help\n</code></pre>"},{"location":"utilities/weectl-database/#create-a-new-database","title":"Create a new database","text":"<pre><code>weectl database create\n    [--config=FILENAME] [--binding=BINDING] [--dry-run]\n</code></pre> <p>This action is used to create a new database by using the specifications in the WeeWX configuration file. It is rarely needed, as <code>weewxd</code> will do this automatically on startup.</p> <p>Use the <code>--help</code> option to see how to use this action.</p> <pre><code>weectl database create --help\n</code></pre>"},{"location":"utilities/weectl-database/#drop-the-daily-summaries","title":"Drop the daily summaries","text":"<pre><code>weectl database drop-daily\n    [--config=FILENAME] [--binding=BINDING] [--dry-run]\n</code></pre> <p>In addition to the regular archive data, every WeeWX database also includes a daily summary table for each observation type. Because there can be dozens of observation types, there can be dozens of these daily summaries. It does not happen very often, but there can be occasions when it's necessary to drop them all and then rebuild them. Dropping them by hand would be very tedious! This action does them all at once.</p> <p>Use the <code>--help</code> option to see how to use this action:</p> <pre><code>weectl database drop-daily --help\n</code></pre>"},{"location":"utilities/weectl-database/#rebuild-the-daily-summaries","title":"Rebuild the daily summaries","text":"<pre><code>weectl database rebuild-daily \n    [[--date=YYYY-mm-dd] | [--from=YYYY-mm-dd] [--to=YYYY-mm-dd]] \n    [--config=FILENAME] [--binding=BINDING] [--dry-run]\n</code></pre> <p>This action is the inverse of action <code>weectk database drop-daily</code> in that it rebuilds the daily summaries from the archive data.</p> <p>The action <code>rebuild-daily</code> accepts a number of date related options, <code>--date</code>, <code>--from</code> and <code>--to</code> that allow selective rebuilding of the daily summaries for one or more days rather than for the entire archive history. These options may be useful if bogus data has been removed from the archive covering a single day or a period of few days. The daily summaries can then be rebuilt for this period only, resulting in a faster rebuild and detailed low/high values and the associated times being retained for unaffected days.</p>"},{"location":"utilities/weectl-database/#rebuild-a-specific-date","title":"Rebuild a specific date","text":"<pre><code>weectl database rebuild-daily --date=YYYY-mm-dd\n</code></pre> <p>Use this form to rebuild the daily summaries for a specific date.</p>"},{"location":"utilities/weectl-database/#rebuild-for-a-range-of-dates","title":"Rebuild for a range of dates","text":"<pre><code>weectl database rebuild-daily --from=YYYY-mm-dd --to=YYYY-mm-dd\n</code></pre> <p>Use this form to rebuild for an inclusive interval of dates. The default value for <code>--from</code> is from the first day in the database. The default value for <code>--to</code> is the last day in the database.</p> <p>Note</p> <p>The period defined by <code>--to</code> and <code>--from</code> is inclusive.</p>"},{"location":"utilities/weectl-database/#add-a-new-observation-type-to-the-database","title":"Add a new observation type to the database","text":"<pre><code>weectl database add-column NAME\n    [--type=COLUMN-DEF]\n    [--config=FILENAME] [--binding=BINDING] [--dry-run]\n</code></pre> <p>This action adds a new database observation type (column), given by <code>NAME</code>, to the database. The option <code>--type</code> is any valid SQL column definition. It defaults to <code>REAL</code>.</p> <p>For example, to add a new observation <code>pulseCount</code> with a SQL type of <code>INTEGER</code>, whose default value is zero:</p> <pre><code>weectl database add-column pulseCount --type \"INTEGER DEFAULT 0\"\n</code></pre>"},{"location":"utilities/weectl-database/#rename-an-observation-type","title":"Rename an observation type","text":"<pre><code>weectl database rename-column FROM-NAME TO-NAME\n    [--config=FILENAME [--binding=BINDING] [--dry-run]\n</code></pre> <p>Use this action to rename a database observation type (column) to a new name.</p> <p>For example, to rename the column <code>luminosity</code> in your database to <code>illuminance</code>:</p> <pre><code>weectl database rename-column luminosity illuminance\n</code></pre>"},{"location":"utilities/weectl-database/#drop-remove-observation-types","title":"Drop (remove) observation types","text":"<pre><code>weectl database drop-columns NAME...\n    [--config=FILENAME] [--binding=BINDING] [--dry-run]\n</code></pre> <p>This action will drop one or more observation types (columns) from the database. If more than one column name is given, they should be separated by spaces.</p> <p>Note</p> <p>When dropping columns from a SQLite database, the entire database must be copied except for the dropped columns. Because this can be quite slow, if you are dropping more than one column, it is better to do them all in one pass. This is why action <code>drop-columns</code> accepts more than one name.</p>"},{"location":"utilities/weectl-database/#reconfigure-a-database","title":"Reconfigure a database","text":"<pre><code>weectl database reconfigure\n    [--config=FILENAME] [--binding=BINDING] [--dry-run]\n</code></pre> <p>This action is useful for changing the schema or unit system in your database.</p> <p>It creates a new database with the same name as the old, except with the suffix <code>_new</code> attached at the end (nominally, <code>weewx.sdb_new</code> if you are using SQLite, <code>weewx_new</code> if you are using MySQL). It then initializes the database with the schema specified in <code>weewx.conf</code>. Finally, it copies over the data from your old database into the new database.</p> <p>See the section Changing the database unit system in an existing database in the Customization Guide for step-by-step instructions that use this option.</p>"},{"location":"utilities/weectl-database/#transfer-copy-a-database","title":"Transfer (copy) a database","text":"<pre><code>weectl database transfer --dest-binding=BINDING-NAME\n    [--config=FILENAME] [--binding=BINDING] [--dry-run]\n</code></pre> <p>This action is useful for moving your database from one type of database to another, such as from SQLite to MySQL. To use it, you must have two bindings specified in your <code>weewx.conf</code> configuration file. One will serve as the source, the other as the destination. Specify the source binding with option <code>--binding</code> (default <code>wx_binding</code>), the destination binding with option <code>--dest-binding</code> (required).</p> <p>See the Wiki for examples of moving data from SQLite to MySQL, and from MySQL to SQLite by using <code>weectl database transfer</code>.</p>"},{"location":"utilities/weectl-database/#calculate-missing-derived-variables","title":"Calculate missing derived variables","text":"<pre><code>weectl database calc-missing\n    [--date=YYYY-mm-dd | [--from=YYYY-mm-dd[THH:MM]] [--to=YYYY-mm-dd[THH:MM]]]\n    [--config=FILENAME] [--binding=BINDING-NAME]\n    [--dry-run]\n</code></pre> <p>This action calculates derived observations for archive records in the database and then stores the calculated observations in the database. This can be useful if erroneous archive data is corrected or some additional observational data is added to the archive that may alter previously calculated or missing derived observations.</p> <p>The period over which the derived observations are calculated can be limited through use of the <code>--date</code>, <code>--from</code> and/or <code>--to</code> options. When used without any of these options <code>--calc-missing</code> will calculate derived observations for all archive records in the database. The <code>--date</code> option limits the calculation of derived observations to the specified date only. The <code>--from</code> and <code>--to</code> options can be used together to specify the start and end date-time respectively of the period over which derived observations will be calculated.</p> <p>If <code>--from</code> is used by itself the period is fom the date-time specified up to and including the last archive record in the database.</p> <p>If <code>--to</code> is used by itself the period is the first archive record in the database through to the specified date-time.</p> <pre><code>weectl database calc-missing\nweectl database calc-missing --date=YYYY-mm-dd\nweectl database calc-missing --from=YYYY-mm-dd[THH:MM]\nweectl database calc-missing --to=YYYY-mm-dd[THH:MM]\nweectl database calc-missing --from=YYYY-mm-dd[THH:MM] --to=YYYY-mm-dd[THH:MM]\n</code></pre> <p>Note</p> <p>Action <code>calc-missing</code> uses the <code>StdWXCalculate</code> service to calculate missing derived observations. The data binding used by the <code>StdWXCalculate</code> service should normally match the data binding of the database being operated on by <code>calc-missing</code>. Those who use custom or additional data bindings should take care to ensure the correct data bindings are used by both <code>calc-missing</code> and the <code>StdWXCalculate</code> service.</p>"},{"location":"utilities/weectl-database/#check-a-database","title":"Check a database","text":"<pre><code>weectl database check\n    [--config=FILENAME] [--binding=BINDING-NAME]\n</code></pre> <p>Databases created earlier than 3.7.0 (released 11-March-2017) have a flaw that prevents them from being used with archive intervals that change with time. This utility check whether your database is affected. See Issue #61.</p>"},{"location":"utilities/weectl-database/#update-a-database","title":"Update a database","text":"<pre><code>weectl database update\n    [--config=FILENAME] [--binding=BINDING-NAME]\n    [--dry-run]\n</code></pre> <p>This action updates the daily summary tables to use interval weighted calculations (see Issue #61) as well as recalculating the <code>windSpeed</code> maximum daily values and times (see Issue #195). Interval weighted calculations are only applied to the daily summaries if not previously applied. The update process is irreversible and users are advised to back up their database before performing this action.</p> <p>For further information on interval weighting and recalculation of daily <code>windSpeed</code> maximum values, see the sections Changes to daily summaries and Recalculation of wind speed maximum values in the Upgrade Guide.</p>"},{"location":"utilities/weectl-database/#recalculate-daily-summary-weights","title":"Recalculate daily summary weights","text":"<pre><code>weectl database reweight\n    [[--date=YYYY-mm-dd] | [--from=YYYY-mm-dd] [--to=YYYY-mm-dd]] \n    [--config=FILENAME] [--binding=BINDING] [--dry-run]\n</code></pre> <p>As an alternative to dropping and rebuilding the daily summaries, this action simply rebuilds the weighted daily sums (used to calculate averages) from the archive data. It does not touch the highs and lows. It is much faster than <code>weectl database rebuild-daily</code>, and has the advantage that the highs and lows remain unchanged.</p> <p>Other options are as in <code>weectl database rebuild-daily</code>.</p>"},{"location":"utilities/weectl-database/#options","title":"Options","text":"<p>These are options used by most of the actions.</p>"},{"location":"utilities/weectl-database/#-config","title":"--config","text":"<p>Path to the configuration file. Default is <code>~/weewx-data/weewx.conf</code>.</p>"},{"location":"utilities/weectl-database/#-binding","title":"--binding","text":"<p>The database binding to use. Default is <code>wx_binding</code>.</p>"},{"location":"utilities/weectl-database/#-dry-run","title":"--dry-run","text":"<p>Show what would happen if the action was run, but do not actually make any writable changes.</p>"},{"location":"utilities/weectl-debug/","title":"weectl debug","text":"<p>Use the <code>weectl</code> subcommand <code>debug</code> to produce information about your environment.</p> <p>Specify <code>--help</code> to see how it is used:</p> <pre><code>weectl debug --help\n</code></pre>"},{"location":"utilities/weectl-debug/#create-debug-information","title":"Create debug information","text":"<pre><code>weectl debug \n    [--config=FILENAME] [--output=FILENAME]\n</code></pre> <p>Troubleshooting problems when running WeeWX often involves analysis of a number of pieces of seemingly disparate system and WeeWX related information. The <code>weectl debug</code> command gathers all this information together into a single output to make troubleshooting easier. The command is particularly useful for new users as the output may be redirected to a file then emailed or posted to a forum to assist in remote troubleshooting.</p> <p>The utility produces two types of information:</p> <ol> <li> <p>General information about your environment. This includes:</p> <ul> <li>System information,</li> <li>Load information,</li> <li>Driver type,</li> <li>Any installed extensions, and</li> <li>Information about your databse</li> </ul> </li> <li> <p>An obfuscated copy of your configuration file (nominally, <code>weewx.conf</code>).</p> </li> </ol> <p>Warning</p> <p>The <code>weectl debug</code> output includes a copy of the WeeWX config file (typically <code>weewx.conf</code>) and whilst the utility attempts to obfuscate any personal or sensitive information, the user should check the output carefully for any remaining personal or sensitive information before  emailing or posting the output publicly.</p>"},{"location":"utilities/weectl-debug/#options","title":"Options","text":""},{"location":"utilities/weectl-debug/#-configfilename","title":"--config=FILENAME","text":"<p>The utility is pretty good about guessing where the configuration file is, but if you have an unusual installation or multiple stations, you may have to tell it explicitly. You can do this using the <code>--config</code> option. For example,</p> <pre><code>weectl debug --config=/etc/weewx/alt_config.conf\n</code></pre>"},{"location":"utilities/weectl-debug/#-outputfilename","title":"--output=FILENAME","text":"<p>By default, <code>weectl debug</code> writes to standard output (the console). However, the output can be sent somewhere else using option <code>--output</code>. For example, to send it to <code>/var/tmp/weewx.info</code>:</p> <pre><code>weectl debug --output=/var/tmp/weewx.info\n</code></pre>"},{"location":"utilities/weectl-device/","title":"weectl device","text":"<p>The <code>weectl</code> subcommand <code>device</code> is used to configure hardware settings, such as rain bucket size, station archive interval, altitude, EEPROM constants, etc., on your station. In order to do its job, it depends on optional code being present in the hardware driver. Because not all drivers have this code, it may not work for your specific device. If it does not, you will have to consult your manufacturer's instructions for how to set these things through your console or other means.</p> <p><code>weectl device</code> uses the option <code>station_type</code> in <code>weewx.conf</code> to determine what device you are using and what options to display. Make sure it is set correctly before attempting to use this utility.</p> <p>Because <code>weectl device</code> uses hardware-specific code, its options are different for every station type. You should run it with <code>--help</code> to see how to use it for your specific station:</p> <pre><code>weectl device --help\n</code></pre> <p>The utility requires a WeeWX configuration file. If no file is specified, it will look for a file called <code>weewx.conf</code> in the standard location. If your configuration file is in a non-standard location, specify the path to the configuration file either as the first argument, or by using the <code>--config</code> option. For example,</p> <pre><code>weectl device /path/to/weewx.conf --help\n</code></pre> <p>or</p> <pre><code>weectl device --config=/path/to/weewx.conf --help\n</code></pre> <p>For details about the options available for each type of hardware, see the appropriate hardware section:</p> <ul> <li>AcuRite</li> <li>CC3000</li> <li>FineOffset</li> <li>TE923</li> <li>Ultimeter</li> <li>Vantage</li> <li>WMR100</li> <li>WMR300</li> <li>WMR9x8</li> <li>WS1</li> <li>WS23xx</li> <li>WS28xx</li> </ul>"},{"location":"utilities/weectl-extension/","title":"weectl extension","text":"<p>Use the <code>weectl</code> subcommand <code>extension</code> to manage WeeWX extensions.</p> <p>Specify <code>--help</code> to see the actions and options: <pre><code>weectl extension --help\n</code></pre></p>"},{"location":"utilities/weectl-extension/#list-installed-extensions","title":"List installed extensions","text":"<pre><code>weectl extension list\n    [--config=FILENAME] [--dry-run]\n</code></pre> <p>This action will list all the extensions that you have installed.</p>"},{"location":"utilities/weectl-extension/#install-an-extension","title":"Install an extension","text":"<pre><code>weectl extension install (FILE|DIR|URL)\n</code></pre> <p>This action will install an extension from a zip file, tar file, directory, or URL.</p> <p>For example, this would install the <code>windy</code> extension from the latest zip file located at <code>github.com</code>: <pre><code>weectl extension install https://github.com/matthewwall/weewx-windy/archive/master.zip\n</code></pre></p> <p>This would install the <code>windy</code> extension from a compressed tar archive in the current directory: <pre><code>weectl extension install windy-0.1.tgz\n</code></pre></p> <p>This would install the <code>windy</code> extension from a zip file in the <code>Downloads</code> directory: <pre><code>weectl extension install ~/Downloads/windy-0.1.zip\n</code></pre></p>"},{"location":"utilities/weectl-extension/#uninstall-an-extension","title":"Uninstall an extension","text":"<pre><code>weectl extension uninstall NAME\n</code></pre> <p>This action uninstalls an extension. Use the <code>list</code> action to see what to use for <code>NAME</code>. </p> <p>For example, this would uninstall the extension called <code>windy</code>: <pre><code>weectl extension uninstall windy\n</code></pre></p>"},{"location":"utilities/weectl-extension/#examples","title":"Examples","text":"<p>These examples illustrate how to use the extension installer to install, list, and uninstall the <code>windy</code> extension.</p> <p>Do a dry run of installing an uploader for the Windy website, maximum verbosity:</p> <pre><code>% weectl extension install https://github.com/matthewwall/weewx-windy/archive/master.zip --dry-run --verbosity=3\nRequest to install 'https://github.com/matthewwall/weewx-windy/archive/master.zip'\nThis is a dry run. Nothing will actually be done.\nExtracting from zip archive /var/folders/xm/72q6zf8j71x8df2cqh0j9f6c0000gn/T/tmpuvuc_c0k\n  Request to install extension found in directory /var/folders/xm/72q6zf8j71x8df2cqh0j9f6c0000gn/T/tmpif_nj_0g/weewx-windy-master/\n  Found extension with name 'windy'\nCopying new files\n    Copying from '/var/folders/xm/72q6zf8j71x8df2cqh0j9f6c0000gn/T/tmpif_nj_0g/weewx-windy-master/bin/user/windy.py' to '/Users/Shared/weewx/bin/user/windy.py'\nCopied 0 files\n  Adding services to service lists\n    Added new service user.windy.Windy to restful_services\n  Adding sections to configuration file\n    Merged extension settings into configuration file\nSaving installer file to /Users/Shared/weewx/bin/user/installer/windy\nFinished installing extension windy from https://github.com/matthewwall/weewx-windy/archive/master.zip\nThis was a dry run. Nothing was actually done.\n</code></pre> <p>Do it for real, default verbosity:</p> <pre><code>% weectl extension install https://github.com/matthewwall/weewx-windy/archive/master.zip\nRequest to install 'https://github.com/matthewwall/weewx-windy/archive/master.zip'\nExtracting from zip archive /var/folders/xm/72q6zf8j71x8df2cqh0j9f6c0000gn/T/tmpk8ggl4qr\nSaving installer file to /Users/Shared/weewx/bin/user/installer/windy\nSaved configuration dictionary. Backup copy at /Users/Shared/weewx/weewx.conf.20230110152037\nFinished installing extension windy from https://github.com/matthewwall/weewx-windy/archive/master.zip\n</code></pre> <p>List the results:</p> <pre><code>% weectl extension list\nExtension Name    Version   Description\nwindy             0.7       Upload weather data to Windy.\n</code></pre> <p>Uninstall the extension:</p> <pre><code>% weectl extension uninstall windy\nRequest to remove extension 'windy'\nFinished removing extension 'windy'\n</code></pre>"},{"location":"utilities/weectl-extension/#options","title":"Options","text":"<p>These are options used by most of the actions.</p>"},{"location":"utilities/weectl-extension/#-help","title":"--help","text":"<p>Show the help message, then exit.</p>"},{"location":"utilities/weectl-extension/#-config","title":"--config","text":"<p>Path to the configuration file. Default is <code>~/weewx-data/weewx.conf</code>.</p>"},{"location":"utilities/weectl-extension/#-dry-run","title":"--dry-run","text":"<p>Show what would happen if the action was run, but do not actually make any writable changes.</p>"},{"location":"utilities/weectl-extension/#-verbosity0123","title":"--verbosity=(0|1|2|3)","text":"<p>How much information to display (0-3).</p>"},{"location":"utilities/weectl-station/","title":"weectl station","text":"<p>Use the <code>weectl</code> subcommand <code>station</code> to manage the data for a station, including its configuration file.</p> <p>Specify <code>--help</code> to see the actions and options. </p> <p>See the section Options below for details of the various options.</p>"},{"location":"utilities/weectl-station/#create-a-new-station-data-directory","title":"Create a new station data directory","text":"<pre><code>weectl station create\n    [--driver=DRIVER]\n    [--location=LOCATION]\n    [--altitude=ALTITUDE,(foot|meter)]\n    [--latitude=LATITUDE] [--longitude=LONGITUDE]\n    [--register=(y,n) [--station-url=URL]]\n    [--units=(us|metricwx|metric)]\n    [--skin-root=DIRECTORY]\n    [--sqlite-root=DIRECTORY]\n    [--html-root=DIRECTORY]\n    [--user-root=DIRECTORY]\n    [--docs-root=DIRECTORY]\n    [--examples-root=DIRECTORY]\n    [--no-prompt]\n    [--config=FILENAME]\n    [--dist-config=FILENAME]\n    [--dry-run]\n</code></pre> <p>The <code>create</code> action will create a directory and populate it with station data. After the command completes, the directory will contain:</p> <ul> <li>a configuration file called <code>weewx.conf</code>;</li> <li>documentation;</li> <li>examples;</li> <li>utility files; and</li> <li>skins.</li> </ul> <p>This action is typically used to create the initial station configuration when installing WeeWX for the first time.  It can also be used to create configurations for multiple stations.</p> <p>If invoked without any options, the <code>create</code> action will prompt you for various settings, such as the type of hardware you are using, the station altitude and location, etc.</p> <p>Use the option <code>--no-prompt</code> to create a configuration without prompts. This will use settings specified as options, and default values for any setting not specified. This is useful when creating a station with an automated script. For example,</p> <pre><code>weectl station create --no-prompt --driver=weewx.drivers.vantage \\\n    --altitude=\"400,foot\" --latitude=45.1 --longitude=-105.9 \\ \n    --location=\"My Special Station\"\n</code></pre> <p>will create a station with the indicated values. Default values will be used for any setting that is not specified.</p>"},{"location":"utilities/weectl-station/#reconfigure-an-existing-station","title":"Reconfigure an existing station","text":"<pre><code>weectl station reconfigure\n    [--driver=DRIVER]\n    [--location=LOCATION]\n    [--altitude=ALTITUDE,(foot|meter)]\n    [--latitude=LATITUDE] [--longitude=LONGITUDE]\n    [--register=(y,n) [--station-url=URL]]\n    [--units=(us|metricwx|metric)]\n    [--skin-root=DIRECTORY]\n    [--sqlite-root=DIRECTORY]\n    [--html-root=DIRECTORY]\n    [--no-backup]\n    [--no-prompt]\n    [--config=FILENAME]\n    [--dry-run]\n</code></pre> <p>The <code>reconfigure</code> action will modify the contents of an existing configuration file. It is often used to change drivers.</p> <p>If invoked without any options, <code>reconfigure</code> will prompt you for settings.</p> <p>Use the option <code>--no-prompt</code> to reconfigure without prompts. This will use the settings specified as options, and existing values for anything that is not specified.</p> <p>For example, to keep all settings, but change to the Vantage driver you would use</p> <pre><code>weectl station reconfigure --no-prompt --driver=weewx.drivers.vantage\n</code></pre>"},{"location":"utilities/weectl-station/#upgrade-an-existing-station","title":"Upgrade an existing station","text":"<pre><code>weectl station upgrade\n    [--docs-root=DIRECTORY]\n    [--examples-root=DIRECTORY]\n    [--skin-root=DIRECTORY]\n    [--what (config|docs|examples|util|skins)]\n    [--no-backup]\n    [--no-prompt]\n    [--config=FILENAME]\n    [--dist-config=FILENAME]\n    [--dry-run]\n</code></pre> <p>When you upgrade WeeWX, only the code is upgraded; upgrades to WeeWX do not modify the station data, specifically configuration file, database, or skins.</p> <p>Use the <code>upgrade</code> action to upgrade one or more of these items.</p> <pre><code>weectl station upgrade\n</code></pre> <p>When invoked with no options, the <code>upgrade</code> action upgrades only the documentation, examples, and utility files. By default, the configuration file and skins are not upgraded. This is to avoid overwriting any changes you might have made.</p> <p>If you wish to upgrade the skins, you must specify <code>--what skins</code>. This will put the current version of the skins into <code>WEEWX_ROOT</code>, leaving timestamped copies of your old skins.</p> <pre><code>weectl station upgrade --what skins\n</code></pre> <p>If you wish to upgrade the configuration file, specify <code>--what config</code>.  This is rarely necessary, since WeeWX is usually backward compatible.</p> <pre><code>weectl station upgrade --what config\n</code></pre>"},{"location":"utilities/weectl-station/#options","title":"Options","text":"<p>In what follows, <code>WEEWX_ROOT</code> is the directory holding the configuration file. For a pip install, this is typically <code>~/weewx-data</code>. For a Debian, Redhat, or SUSE install, it is <code>/etc/weewx</code>.</p>"},{"location":"utilities/weectl-station/#-driverdriver","title":"--driver=DRIVER","text":"<p>Which driver to use. Default is <code>weewx.drivers.simulator</code>.</p>"},{"location":"utilities/weectl-station/#-locationlocation","title":"--location=LOCATION","text":"<p>A description of your station, such as <code>--location=\"A small town in Rongovia\"</code> Default is <code>WeeWX</code>.</p>"},{"location":"utilities/weectl-station/#-altitudealtitude","title":"--altitude=ALTITUDE","text":"<p>The altitude of your station, along with the unit it is measured in. For example, <code>--altitude=50,meter</code>. Note that the unit is measured in the singular (<code>foot</code>, not <code>feet</code>). Default is <code>\"0,foot\"</code>.</p>"},{"location":"utilities/weectl-station/#-latitudelatitude","title":"--latitude=LATITUDE","text":"<p>The station latitude in decimal degrees. Negative for the southern hemisphere. Default is <code>0</code>.</p>"},{"location":"utilities/weectl-station/#-longitudelongitude","title":"--longitude=LONGITUDE","text":"<p>The station longitude in decimal degrees. Negative for the western hemisphere. Default is <code>0</code>.</p>"},{"location":"utilities/weectl-station/#-registeryn","title":"--register=(y|n)","text":"<p>Whether to include the station in the WeeWX registry and map. If you choose to register your station, you must also specify a unique URL for your station with option <code>--station-url</code>. Default is <code>n</code> (do not register).</p>"},{"location":"utilities/weectl-station/#-station-urlurl","title":"--station-url=URL","text":"<p>A unique URL for the station.  The station URL identifies each station in the WeeWX registry and map.</p> <p>Example: <code>--station-url=https://www.wunderground.com/dashboard/pws/KNDPETE15</code>. No default.</p>"},{"location":"utilities/weectl-station/#-unitsunit_system","title":"--units=UNIT_SYSTEM","text":"<p>What units to use for your reports. Options are <code>us</code>, <code>metricwx</code>, or <code>metric</code>. See the Appendix Units for details. Default is <code>us</code>.</p>"},{"location":"utilities/weectl-station/#-configfilename","title":"--config=FILENAME","text":"<p>Path to the configuration file, relative to <code>WEEWX_ROOT</code>. If the filename starts with a slash (<code>/</code>), it is an absolute path. Default is <code>weewx.conf</code>.</p>"},{"location":"utilities/weectl-station/#-weewx-rootdir","title":"--weewx-root=DIR","text":"<p>The <code>WEEWX_ROOT</code> directory. This is typically <code>~/weewx-data</code> or <code>/etc/weewx</code>.</p>"},{"location":"utilities/weectl-station/#-skin-rootdir","title":"--skin-root=DIR","text":"<p>The location of the directory holding the skins relative to <code>WEEWX_ROOT</code>. If the directory starts with a slash (<code>/</code>), it is an absolute path. Default is <code>skins</code>.</p>"},{"location":"utilities/weectl-station/#-sqlite-rootdir","title":"--sqlite-root=DIR","text":"<p>The location of the directory holding the SQLite database relative to <code>WEEWX_ROOT</code>. If the directory starts with a slash (<code>/</code>), it is an absolute path. Default is <code>skins</code>.</p>"},{"location":"utilities/weectl-station/#-html-rootdir","title":"--html-root=DIR","text":"<p>Where generated HTML files should be placed, relative to <code>WEEWX_ROOT</code>. If the directory starts with a slash (<code>/</code>), it is an absolute path. Default is <code>public_html</code>.</p>"},{"location":"utilities/weectl-station/#-user-rootdir","title":"--user-root=DIR","text":"<p>Where user extensions can be found, relative to <code>WEEWX_ROOT</code>. If the directory starts with a slash (<code>/</code>), it is an absolute path. Default is <code>bin/user</code>.</p>"},{"location":"utilities/weectl-station/#-docs-rootdir","title":"--docs-root=DIR","text":"<p>Where the WeeWX documentation can be found, relative to <code>WEEWX_ROOT</code>. If the directory starts with a slash (<code>/</code>), it is an absolute path. Default is <code>docs</code>.</p>"},{"location":"utilities/weectl-station/#-examples-rootdir","title":"--examples-root=DIR","text":"<p>Where the WeeWX examples can be found, relative to <code>WEEWX_ROOT</code>. If the directory starts with a slash (<code>/</code>), it is an absolute path. Default is <code>examples</code>.</p>"},{"location":"utilities/weectl-station/#-what","title":"--what","text":"<p>By default, the <code>upgrade</code> action will upgrade the documentation, examples, and utility files. However, you can specify exactly what gets upgraded by using the <code>--what</code> option.</p> <p>The <code>--what</code> option understands the following:</p> <ul> <li>config - the configuration file</li> <li>docs - the documentation</li> <li>examples - the example extensions</li> <li>util - the system utility files</li> <li>skins - the report templates</li> </ul> <p>For example, to upgrade the configuration file and skins only, you would specify</p> <pre><code>weectl station upgrade --what config skins\n</code></pre> <p>Note</p> <p>The <code>--what</code> option does not take an equal sign (<code>=</code>). Just list the desired things to be upgraded, without commas between them.</p>"},{"location":"utilities/weectl-station/#-no-backup","title":"--no-backup","text":"<p>If <code>weectl station</code> changes your configuration file or skins, it will save a timestamped copy of the original. If you specify <code>--no-backup</code>, then it will not save a copy.</p>"},{"location":"utilities/weectl-station/#-no-prompt","title":"--no-prompt","text":"<p>Generally, the utility will prompt for values unless <code>--no-prompt</code> has been set. When <code>--no-prompt</code> is specified, the values to be used are the default values, replaced with whatever options have been set on the command line. For example,</p> <pre><code>weectl station create --driver='weewx.drivers.vantage' --no-prompt\n</code></pre> <p>will cause the defaults to be used for all values except <code>--driver</code>.</p>"},{"location":"utilities/weectl-station/#-dry-run","title":"--dry-run","text":"<p>With option <code>--dry-run</code> you can test what <code>weect station</code> would do without actually doing it. It will print out the steps, but not actually write anything.</p>"},{"location":"utilities/weewxd/","title":"weewxd","text":"<p>The <code>weewxd</code> application is the heart of WeeWX.  It collects data from hardware, processes the data, archives the data, then generates reports from the data.</p> <p>It can be run directly, or in the background as a daemon.  When it is run directly, <code>weewxd</code> emits LOOP and ARCHIVE data to stdout.</p> <p>Specify <code>--help</code> to see how it is used: <pre><code>weewxd --help\n</code></pre> <pre><code>Usage: weewxd --help\n       weewxd --version\n       weewxd  [CONFIG_FILE|--config=CONFIG_FILE]\n              [--daemon]\n              [--pidfile=PIDFILE]\n              [--exit]\n              [--loop-on-init]\n              [--log-label=LABEL]\n\n  Entry point to the weewx weather program. Can be run directly, or as a daemon\n  by specifying the '--daemon' option.\n\nArguments:\n    CONFIG_FILE: The weewx configuration file to be used. Optional.\n\n\nOptions:\n  -h, --help            show this help message and exit\n  --config=CONFIG_FILE  Use configuration file CONFIG_FILE.\n  -d, --daemon          Run as a daemon\n  -p PIDFILE, --pidfile=PIDFILE\n                        Store the process ID in PIDFILE\n  -v, --version         Display version number then exit\n  -x, --exit            Exit on I/O and database errors instead of restarting\n  -r, --loop-on-init    Retry forever if device is not ready on startup\n  -n LABEL, --log-label=LABEL\n                        Label to use in syslog entries\n</code></pre></p> <p>Note that options <code>--daemon</code> and <code>--pidfile</code> are not necessary when running under systemd.</p>"}]}